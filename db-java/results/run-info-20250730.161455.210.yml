---
queries:
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Diagnostics/ExtractionErrors.ql
  relativeBqrsPath: codeql/java-queries/Diagnostics/ExtractionErrors.bqrs
  metadata:
    name: Extraction errors
    description: A list of extraction errors for files in the source code directory.
    kind: diagnostic
    id: java/diagnostics/extraction-errors
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Diagnostics/ExtractionWarnings.ql
  relativeBqrsPath: codeql/java-queries/Diagnostics/ExtractionWarnings.bqrs
  metadata:
    name: Extraction warnings
    description: A list of extraction warnings for files in the source code directory.
    kind: diagnostic
    id: java/diagnostics/extraction-warnings
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Diagnostics/SuccessfullyExtractedFiles.ql
  relativeBqrsPath: codeql/java-queries/Diagnostics/SuccessfullyExtractedFiles.bqrs
  metadata:
    name: Extracted files
    description: |-
      A list of all files in the source code directory that
                    were extracted.
    kind: diagnostic
    id: java/diagnostics/successfully-extracted-files
    tags: successfully-extracted-files
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Likely Bugs/Arithmetic/InformationLoss.ql
  relativeBqrsPath: codeql/java-queries/Likely Bugs/Arithmetic/InformationLoss.bqrs
  metadata:
    name: Implicit narrowing conversion in compound assignment
    description: |-
      Compound assignment statements (for example 'intvar += longvar') that implicitly
                    cast a value of a wider type to a narrower type may result in information loss and
                    numeric errors such as overflows.
    kind: problem
    problem.severity: warning
    security-severity: 8.1
    precision: very-high
    id: java/implicit-cast-in-compound-assignment
    tags: |-
      reliability
             security
             external/cwe/cwe-190
             external/cwe/cwe-192
             external/cwe/cwe-197
             external/cwe/cwe-681
  queryHelp: |
    # Implicit narrowing conversion in compound assignment
    Compound assignment statements of the form `x += y` or `x *= y` perform an implicit narrowing conversion if the type of `x` is narrower than the type of `y`. For example, `x += y` is equivalent to `x = (T)(x + y)`, where `T` is the type of `x`. This can result in information loss and numeric errors such as overflows.


    ## Recommendation
    Ensure that the type of the left-hand side of the compound assignment statement is at least as wide as the type of the right-hand side.


    ## Example
    If `x` is of type `short` and `y` is of type `int`, the expression `x + y` is of type `int`. However, the expression `x += y` is equivalent to `x = (short) (x + y)`. The expression `x + y` is cast to the type of the left-hand side of the assignment: `short`, possibly leading to information loss.

    To avoid implicitly narrowing the type of `x + y`, change the type of `x` to `int`. Then the types of `x` and `x + y` are both `int` and there is no need for an implicit cast.


    ## References
    * J. Bloch and N. Gafter, *Java Puzzlers: Traps, Pitfalls, and Corner Cases*, Puzzle 9. Addison-Wesley, 2005.
    * Java Language Specification: [Compound Assignment Operators](https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-15.26.2), [Narrowing Primitive Conversion](https://docs.oracle.com/javase/specs/jls/se11/html/jls-5.html#jls-5.1.3).
    * SEI CERT Oracle Coding Standard for Java: [NUM00-J. Detect or prevent integer overflow](https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow).
    * Common Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html).
    * Common Weakness Enumeration: [CWE-192](https://cwe.mitre.org/data/definitions/192.html).
    * Common Weakness Enumeration: [CWE-197](https://cwe.mitre.org/data/definitions/197.html).
    * Common Weakness Enumeration: [CWE-681](https://cwe.mitre.org/data/definitions/681.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Metrics/Summaries/LinesOfCode.ql
  relativeBqrsPath: codeql/java-queries/Metrics/Summaries/LinesOfCode.bqrs
  metadata:
    id: java/summary/lines-of-code
    name: Total lines of Java/Kotlin code in the database
    description: |-
      The total number of lines of code across all Java and Kotlin files. This is a useful metric of the size of a database.
                    For all source files that were seen during the build, this query counts the lines of code, excluding whitespace
                    or comments.
    kind: metric
    tags: |-
      summary
             lines-of-code
             debug
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Metrics/Summaries/LinesOfCodeJava.ql
  relativeBqrsPath: codeql/java-queries/Metrics/Summaries/LinesOfCodeJava.bqrs
  metadata:
    id: java/summary/lines-of-code-java
    name: Total lines of Java code in the database
    description: |-
      The total number of lines of code across all Java files. This is a useful metric of the size of a database.
                    For all Java files that were seen during the build, this query counts the lines of code, excluding whitespace
                    or comments.
    kind: metric
    tags: |-
      summary
             debug
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Metrics/Summaries/LinesOfCodeKotlin.ql
  relativeBqrsPath: codeql/java-queries/Metrics/Summaries/LinesOfCodeKotlin.bqrs
  metadata:
    id: java/summary/lines-of-code-kotlin
    name: Total lines of Kotlin code in the database
    description: |-
      The total number of lines of code across all Kotlin files. This is a useful metric of the size of a database.
                    For all Kotlin files that were seen during the build, this query counts the lines of code, excluding whitespace
                    or comments.
    kind: metric
    tags: |-
      summary
             debug
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-020/OverlyLargeRange.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-020/OverlyLargeRange.bqrs
  metadata:
    name: Overly permissive regular expression range
    description: |-
      Overly permissive regular expression ranges match a wider range of characters than intended.
                    This may allow an attacker to bypass a filter or sanitizer.
    kind: problem
    problem.severity: warning
    security-severity: 5.0
    precision: high
    id: java/overly-large-range
    tags: |-
      correctness
             security
             external/cwe/cwe-020
  queryHelp: |
    # Overly permissive regular expression range
    It's easy to write a regular expression range that matches a wider range of characters than you intended. For example, `/[a-zA-z]/` matches all lowercase and all uppercase letters, as you would expect, but it also matches the characters: `` [ \ ] ^ _ ` ``.

    Another common problem is failing to escape the dash character in a regular expression. An unescaped dash is interpreted as part of a range. For example, in the character class `[a-zA-Z0-9%=.,-_]` the last character range matches the 55 characters between `,` and `_` (both included), which overlaps with the range `[0-9]` and is clearly not intended by the writer.


    ## Recommendation
    Avoid any confusion about which characters are included in the range by writing unambiguous regular expressions. Always check that character ranges match only the expected characters.


    ## Example
    The following example code is intended to check whether a string is a valid 6 digit hex color.

    ```java

    import java.util.regex.Pattern
    public class Tester {
        public static boolean is_valid_hex_color(String color) {
            return Pattern.matches("#[0-9a-fA-f]{6}", color);
        }
    }

    ```
    However, the `A-f` range is overly large and matches every uppercase character. It would parse a "color" like `#XXYYZZ` as valid.

    The fix is to use an uppercase `A-F` range instead.

    ```javascript

    import java.util.regex.Pattern
    public class Tester {
        public static boolean is_valid_hex_color(String color) {
            return Pattern.matches("#[0-9a-fA-F]{6}", color);
        }
    }

    ```

    ## References
    * GitHub Advisory Database: [CVE-2021-42740: Improper Neutralization of Special Elements used in a Command in Shell-quote](https://github.com/advisories/GHSA-g4rg-993r-mgx7)
    * wh0.github.io: [Exploiting CVE-2021-42740](https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html)
    * Yosuke Ota: [no-obscure-range](https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html)
    * Paul Boyd: [The regex \[,-.\]](https://pboyd.io/posts/comma-dash-dot/)
    * Common Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-022/TaintedPath.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-022/TaintedPath.bqrs
  metadata:
    name: Uncontrolled data used in path expression
    description: Accessing paths influenced by users can allow an attacker to access
      unexpected resources.
    kind: path-problem
    problem.severity: error
    security-severity: 7.5
    precision: high
    id: java/path-injection
    tags: |-
      security
             external/cwe/cwe-022
             external/cwe/cwe-023
             external/cwe/cwe-036
             external/cwe/cwe-073
  queryHelp: "# Uncontrolled data used in path expression\nAccessing paths controlled\
    \ by users can allow an attacker to access unexpected resources. This can result\
    \ in sensitive information being revealed or deleted, or an attacker being able\
    \ to influence behavior by modifying unexpected files.\n\nPaths that are naively\
    \ constructed from data controlled by a user may be absolute paths, or may contain\
    \ unexpected special characters such as \"..\". Such a path could point anywhere\
    \ on the file system.\n\n\n## Recommendation\nValidate user input before using\
    \ it to construct a file path.\n\nCommon validation methods include checking that\
    \ the normalized path is relative and does not contain any \"..\" components,\
    \ or checking that the path is contained within a safe folder. The method you\
    \ should use depends on how the path is used in the application, and whether the\
    \ path should be a single path component.\n\nIf the path should be a single path\
    \ component (such as a file name), you can check for the existence of any path\
    \ separators (\"/\" or \"\\\\\"), or \"..\" sequences in the input, and reject\
    \ the input if any are found.\n\nNote that removing \"../\" sequences is *not*\
    \ sufficient, since the input could still contain a path separator followed by\
    \ \"..\". For example, the input \".../...//\" would still result in the string\
    \ \"../\" if only \"../\" sequences are removed.\n\nFinally, the simplest (but\
    \ most restrictive) option is to use an allow list of safe patterns and make sure\
    \ that the user input matches one of these patterns.\n\n\n## Example\nIn this\
    \ example, a file name is read from a `java.net.Socket` and then used to access\
    \ a file and send it back over the socket. However, a malicious user could enter\
    \ a file name anywhere on the file system, such as \"/etc/passwd\" or \"../../../etc/passwd\"\
    .\n\n\n```java\npublic void sendUserFile(Socket sock, String user) {\n\tBufferedReader\
    \ filenameReader = new BufferedReader(\n\t\t\tnew InputStreamReader(sock.getInputStream(),\
    \ \"UTF-8\"));\n\tString filename = filenameReader.readLine();\n\t// BAD: read\
    \ from a file without checking its path\n\tBufferedReader fileReader = new BufferedReader(new\
    \ FileReader(filename));\n\tString fileLine = fileReader.readLine();\n\twhile(fileLine\
    \ != null) {\n\t\tsock.getOutputStream().write(fileLine.getBytes());\n\t\tfileLine\
    \ = fileReader.readLine();\n\t}\n}\n\n```\nIf the input should only be a file\
    \ name, you can check that it doesn't contain any path separators or \"..\" sequences.\n\
    \n\n```java\npublic void sendUserFileGood(Socket sock, String user) {\n\tBufferedReader\
    \ filenameReader = new BufferedReader(\n\t\t\tnew InputStreamReader(sock.getInputStream(),\
    \ \"UTF-8\"));\n\tString filename = filenameReader.readLine();\n\t// GOOD: ensure\
    \ that the filename has no path separators or parent directory references\n\t\
    if (filename.contains(\"..\") || filename.contains(\"/\") || filename.contains(\"\
    \\\\\")) {\n\t\tthrow new IllegalArgumentException(\"Invalid filename\");\n\t\
    }\n\tBufferedReader fileReader = new BufferedReader(new FileReader(filename));\n\
    \tString fileLine = fileReader.readLine();\n\twhile(fileLine != null) {\n\t\t\
    sock.getOutputStream().write(fileLine.getBytes());\n\t\tfileLine = fileReader.readLine();\n\
    \t}\t\n}\n\n```\nIf the input should be within a specific directory, you can check\
    \ that the resolved path is still contained within that directory.\n\n\n```java\n\
    public void sendUserFileGood(Socket sock, String user) {\n\tBufferedReader filenameReader\
    \ = new BufferedReader(\n\t\t\tnew InputStreamReader(sock.getInputStream(), \"\
    UTF-8\"));\n\tString filename = filenameReader.readLine();\n\n\tPath publicFolder\
    \ = Paths.get(\"/home/\" + user + \"/public\").normalize().toAbsolutePath();\n\
    \tPath filePath = publicFolder.resolve(filename).normalize().toAbsolutePath();\n\
    \n\t// GOOD: ensure that the path stays within the public folder\n\tif (!filePath.startsWith(publicFolder\
    \ + File.separator)) {\n\t\tthrow new IllegalArgumentException(\"Invalid filename\"\
    );\n\t}\n\tBufferedReader fileReader = new BufferedReader(new FileReader(filePath.toString()));\n\
    \tString fileLine = fileReader.readLine();\n\twhile(fileLine != null) {\n\t\t\
    sock.getOutputStream().write(fileLine.getBytes());\n\t\tfileLine = fileReader.readLine();\n\
    \t}\n}\n```\n\n## References\n* OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).\n\
    * Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).\n\
    * Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).\n\
    * Common Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html).\n\
    * Common Weakness Enumeration: [CWE-73](https://cwe.mitre.org/data/definitions/73.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-022/ZipSlip.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-022/ZipSlip.bqrs
  metadata:
    name: Arbitrary file access during archive extraction ("Zip Slip")
    description: |-
      Extracting files from a malicious ZIP file, or similar type of archive, without
                    validating that the destination file path is within the destination directory
                    can allow an attacker to unexpectedly gain access to resources.
    kind: path-problem
    id: java/zipslip
    problem.severity: error
    security-severity: 7.5
    precision: high
    tags: |-
      security
             external/cwe/cwe-022
  queryHelp: |
    # Arbitrary file access during archive extraction ("Zip Slip")
    Extracting files from a malicious zip file, or similar type of archive, is at risk of directory traversal attacks if filenames from the archive are not properly validated.

    Zip archives contain archive entries representing each file in the archive. These entries include a file path for the entry, but these file paths are not restricted and may contain unexpected special elements such as the directory traversal element (`..`). If these file paths are used to create a filesystem path, then a file operation may happen in an unexpected location. This can result in sensitive information being revealed or deleted, or an attacker being able to influence behavior by modifying unexpected files.

    For example, if a zip file contains a file entry `..\sneaky-file`, and the zip file is extracted to the directory `c:\output`, then naively combining the paths would result in an output file path of `c:\output\..\sneaky-file`, which would cause the file to be written to `c:\sneaky-file`.


    ## Recommendation
    Ensure that output paths constructed from zip archive entries are validated to prevent writing files to unexpected locations.

    The recommended way of writing an output file from a zip archive entry is to verify that the normalized full path of the output file starts with a prefix that matches the destination directory. Path normalization can be done with either `java.io.File.getCanonicalFile()` or `java.nio.file.Path.normalize()`. Prefix checking can be done with `String.startsWith(..)`, but it is better to use `java.nio.file.Path.startsWith(..)`, as the latter works on complete path segments.

    Another alternative is to validate archive entries against a whitelist of expected files.


    ## Example
    In this example, a file path taken from a zip archive item entry is combined with a destination directory. The result is used as the destination file path without verifying that the result is within the destination directory. If provided with a zip file containing an archive path like `..\sneaky-file`, then this file would be written outside the destination directory.


    ```java
    void writeZipEntry(ZipEntry entry, File destinationDir) {
        File file = new File(destinationDir, entry.getName());
        FileOutputStream fos = new FileOutputStream(file); // BAD
        // ... write entry to fos ...
    }

    ```
    To fix this vulnerability, we need to verify that the normalized `file` still has `destinationDir` as its prefix, and throw an exception if this is not the case.


    ```java
    void writeZipEntry(ZipEntry entry, File destinationDir) {
        File file = new File(destinationDir, entry.getName());
        if (!file.toPath().normalize().startsWith(destinationDir.toPath()))
            throw new Exception("Bad zip entry");
        FileOutputStream fos = new FileOutputStream(file); // OK
        // ... write entry to fos ...
    }

    ```

    ## References
    * Snyk: [Zip Slip Vulnerability](https://snyk.io/research/zip-slip-vulnerability).
    * OWASP: [Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).
    * Common Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-023/PartialPathTraversalFromRemote.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-023/PartialPathTraversalFromRemote.bqrs
  metadata:
    name: Partial path traversal vulnerability from remote
    description: A prefix used to check that a canonicalised path falls within another
      must be slash-terminated.
    kind: path-problem
    problem.severity: error
    security-severity: 9.3
    precision: high
    id: java/partial-path-traversal-from-remote
    tags: |-
      security
             external/cwe/cwe-023
  queryHelp: |
    # Partial path traversal vulnerability from remote
    A common way to check that a user-supplied path `SUBDIR` falls inside a directory `DIR` is to use `getCanonicalPath()` to remove any path-traversal elements and then check that `DIR` is a prefix. However, if `DIR` is not slash-terminated, this can unexpectedly allow accessing siblings of `DIR`.

    See also `java/partial-path-traversal`, which is similar to this query, but may also flag non-remotely-exploitable instances of partial path traversal vulnerabilities.


    ## Recommendation
    If the user should only access items within a certain directory `DIR`, ensure that `DIR` is slash-terminated before checking that `DIR` is a prefix of the user-provided path, `SUBDIR`. Note, Java's `getCanonicalPath()` returns a **non**-slash-terminated path string, so a slash must be added to `DIR` if that method is used.


    ## Example
    In this example, the `if` statement checks if `parent.getCanonicalPath()` is a prefix of `dir.getCanonicalPath()`. However, `parent.getCanonicalPath()` is not slash-terminated. This means that users that supply `dir` may be also allowed to access siblings of `parent` and not just children of `parent`, which is a security issue.


    ```java
    public class PartialPathTraversalBad {
        public void example(File dir, File parent) throws IOException {
            // BAD: dir.getCanonicalPath() not slash-terminated
            if (!dir.getCanonicalPath().startsWith(parent.getCanonicalPath())) {
                throw new IOException("Path traversal attempt: " + dir.getCanonicalPath());
            }
        }
    }

    ```
    In this example, the `if` statement checks if `parent.toPath()` is a prefix of `dir.normalize()`. Because `Path#startsWith` does the correct check that `dir` is a child of `parent`, users will not be able to access siblings of `parent`, as desired.


    ```java
    import java.io.File;

    public class PartialPathTraversalGood {
        public void example(File dir, File parent) throws IOException {
            // GOOD: Check if dir.Path() is normalised
            if (!dir.toPath().normalize().startsWith(parent.toPath())) {
                throw new IOException("Path traversal attempt: " + dir.getCanonicalPath());
            }
        }
    }

    ```

    ## References
    * OWASP: [Partial Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal).
    * CVE-2022-23457: [ ESAPI Vulnerability Report](https://github.com/ESAPI/esapi-java-legacy/blob/develop/documentation/GHSL-2022-008_The_OWASP_Enterprise_Security_API.md).
    * Common Weakness Enumeration: [CWE-23](https://cwe.mitre.org/data/definitions/23.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-074/JndiInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-074/JndiInjection.bqrs
  metadata:
    name: JNDI lookup with user-controlled name
    description: |-
      Performing a JNDI lookup with a user-controlled name can lead to the download of an untrusted
                    object and to execution of arbitrary code.
    kind: path-problem
    problem.severity: error
    security-severity: 9.8
    precision: high
    id: java/jndi-injection
    tags: |-
      security
             external/cwe/cwe-074
  queryHelp: |
    # JNDI lookup with user-controlled name
    The Java Naming and Directory Interface (JNDI) is a Java API for a directory service that allows Java software clients to discover and look up data and resources (in the form of Java objects) via a name. If the name being used to look up the data is controlled by the user, it can point to a malicious server, which can return an arbitrary object. In the worst case, this can allow remote code execution.


    ## Recommendation
    The general recommendation is to avoid passing untrusted data to the `InitialContext.lookup ` method. If the name being used to look up the object must be provided by the user, make sure that it's not in the form of an absolute URL or that it's the URL pointing to a trusted server.


    ## Example
    In the following examples, the code accepts a name from the user, which it uses to look up an object.

    In the first example, the user provided name is used to look up an object.

    The second example validates the name before using it to look up an object.


    ```java
    import javax.naming.Context;
    import javax.naming.InitialContext;

    public void jndiLookup(HttpServletRequest request) throws NamingException {
      String name = request.getParameter("name");

      Hashtable<String, String> env = new Hashtable<String, String>();
      env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.rmi.registry.RegistryContextFactory");
      env.put(Context.PROVIDER_URL, "rmi://trusted-server:1099");
      InitialContext ctx = new InitialContext(env);

      // BAD: User input used in lookup
      ctx.lookup(name);

      // GOOD: The name is validated before being used in lookup
      if (isValid(name)) {
        ctx.lookup(name);
      } else {
        // Reject the request
      }
    }
    ```

    ## References
    * Oracle: [Java Naming and Directory Interface (JNDI)](https://docs.oracle.com/javase/8/docs/technotes/guides/jndi/).
    * Black Hat materials: [A Journey from JNDI/LDAP Manipulation to Remote Code Execution Dream Land](https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf).
    * Veracode: [Exploiting JNDI Injections in Java](https://www.veracode.com/blog/research/exploiting-jndi-injections-java).
    * Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-074/XsltInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-074/XsltInjection.bqrs
  metadata:
    name: XSLT transformation with user-controlled stylesheet
    description: |-
      Performing an XSLT transformation with user-controlled stylesheets can lead to
                    information disclosure or execution of arbitrary code.
    kind: path-problem
    problem.severity: error
    security-severity: 9.8
    precision: high
    id: java/xslt-injection
    tags: |-
      security
             external/cwe/cwe-074
  queryHelp: "# XSLT transformation with user-controlled stylesheet\nXSLT (Extensible\
    \ Stylesheet Language Transformations) is a language for transforming XML documents\
    \ into other XML documents or other formats. Processing unvalidated XSLT stylesheets\
    \ can allow attackers to read arbitrary files from the filesystem or to execute\
    \ arbitrary code.\n\n\n## Recommendation\nThe general recommendation is to not\
    \ process untrusted XSLT stylesheets. If user-provided stylesheets must be processed,\
    \ enable the secure processing mode.\n\n\n## Example\nIn the following examples,\
    \ the code accepts an XSLT stylesheet from the user and processes it.\n\nIn the\
    \ first example, the user-provided XSLT stylesheet is parsed and processed.\n\n\
    In the second example, secure processing mode is enabled.\n\n\n```java\nimport\
    \ javax.xml.XMLConstants;\nimport javax.xml.transform.TransformerFactory;\nimport\
    \ javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.stream.StreamSource;\n\
    \npublic void transform(Socket socket, String inputXml) throws Exception {\n \
    \ StreamSource xslt = new StreamSource(socket.getInputStream());\n  StreamSource\
    \ xml = new StreamSource(new StringReader(inputXml));\n  StringWriter result =\
    \ new StringWriter();\n  TransformerFactory factory = TransformerFactory.newInstance();\n\
    \n  // BAD: User provided XSLT stylesheet is processed\n  factory.newTransformer(xslt).transform(xml,\
    \ new StreamResult(result));\n\n  // GOOD: The secure processing mode is enabled\n\
    \  factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n  factory.newTransformer(xslt).transform(xml,\
    \ new StreamResult(result));\n}  \n```\n\n## References\n* Wikipedia: [XSLT](https://en.wikipedia.org/wiki/XSLT).\n\
    * The Java Tutorials: [Transforming XML Data with XSLT](https://docs.oracle.com/javase/tutorial/jaxp/xslt/transformingXML.html).\n\
    * [XSLT Injection Basics](https://blog.hunniccyber.com/ektron-cms-remote-code-execution-xslt-transform-injection-java/).\n\
    * Common Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-078/ExecTainted.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-078/ExecTainted.bqrs
  metadata:
    name: Uncontrolled command line
    description: |-
      Using externally controlled strings in a command line is vulnerable to malicious
                    changes in the strings.
    kind: path-problem
    problem.severity: error
    security-severity: 9.8
    precision: high
    id: java/command-line-injection
    tags: |-
      security
             external/cwe/cwe-078
             external/cwe/cwe-088
  queryHelp: |
    # Uncontrolled command line
    Code that passes user input directly to `Runtime.exec`, or some other library routine that executes a command, allows the user to execute malicious code.


    ## Recommendation
    If possible, use hard-coded string literals to specify the command to run or library to load. Instead of passing the user input directly to the process or library function, examine the user input and then choose among hard-coded string literals.

    If the applicable libraries or commands cannot be determined at compile time, then add code to verify that the user input string is safe before using it.


    ## Example
    The following example shows code that takes a shell script that can be changed maliciously by a user, and passes it straight to `Runtime.exec` without examining it first.


    ```java
    class Test {
        public static void main(String[] args) {
            String script = System.getenv("SCRIPTNAME");
            if (script != null) {
                // BAD: The script to be executed is controlled by the user.
                Runtime.getRuntime().exec(script);
            }
        }
    }
    ```

    ## References
    * OWASP: [Command Injection](https://www.owasp.org/index.php/Command_Injection).
    * SEI CERT Oracle Coding Standard for Java: [IDS07-J. Sanitize untrusted data passed to the Runtime.exec() method](https://wiki.sei.cmu.edu/confluence/display/java/IDS07-J.+Sanitize+untrusted+data+passed+to+the+Runtime.exec()+method).
    * Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).
    * Common Weakness Enumeration: [CWE-88](https://cwe.mitre.org/data/definitions/88.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-079/XSS.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-079/XSS.bqrs
  metadata:
    name: Cross-site scripting
    description: |-
      Writing user input directly to a web page
                    allows for a cross-site scripting vulnerability.
    kind: path-problem
    problem.severity: error
    security-severity: 6.1
    precision: high
    id: java/xss
    tags: |-
      security
             external/cwe/cwe-079
  queryHelp: "# Cross-site scripting\nDirectly writing user input (for example, an\
    \ HTTP request parameter) to a web page, without properly sanitizing the input\
    \ first, allows for a cross-site scripting vulnerability.\n\n\n## Recommendation\n\
    To guard against cross-site scripting, consider using contextual output encoding/escaping\
    \ before writing user input to the page, or one of the other solutions that are\
    \ mentioned in the reference.\n\n\n## Example\nThe following example shows the\
    \ `page` parameter being written directly to the page, leaving the website vulnerable\
    \ to cross-site scripting.\n\n\n```java\npublic class XSS extends HttpServlet\
    \ {\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response)\n\
    \tthrows ServletException, IOException {\n\t\t// BAD: a request parameter is written\
    \ directly to the Servlet response stream\n\t\tresponse.getWriter().print(\n\t\
    \t\t\t\"The page \\\"\" + request.getParameter(\"page\") + \"\\\" was not found.\"\
    );\n\n\t}\n}\n\n```\n\n## References\n* OWASP: [XSS (Cross Site Scripting) Prevention\
    \ Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).\n\
    * Wikipedia: [Cross-site scripting](http://en.wikipedia.org/wiki/Cross-site_scripting).\n\
    * Common Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-089/SqlTainted.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-089/SqlTainted.bqrs
  metadata:
    name: Query built from user-controlled sources
    description: |-
      Building a SQL or Java Persistence query from user-controlled sources is vulnerable to insertion of
                    malicious code by the user.
    kind: path-problem
    problem.severity: error
    security-severity: 8.8
    precision: high
    id: java/sql-injection
    tags: |-
      security
             external/cwe/cwe-089
             external/cwe/cwe-564
  queryHelp: |
    # Query built from user-controlled sources
    If a database query is built using string concatenation, and the components of the concatenation include user input, a user is likely to be able to run malicious database queries. This applies to various database query languages, including SQL and the Java Persistence Query Language.


    ## Recommendation
    Usually, it is better to use a SQL prepared statement than to build a complete SQL query with string concatenation. A prepared statement can include a wildcard, written as a question mark (?), for each part of the SQL query that is expected to be filled in by a different value each time it is run. When the query is later executed, a value must be supplied for each wildcard in the query.

    In the Java Persistence Query Language, it is better to use queries with parameters than to build a complete query with string concatenation. A Java Persistence query can include a parameter placeholder for each part of the query that is expected to be filled in by a different value when run. A parameter placeholder may be indicated by a colon (:) followed by a parameter name, or by a question mark (?) followed by an integer position. When the query is later executed, a value must be supplied for each parameter in the query, using the `setParameter` method. Specifying the query using the `@NamedQuery` annotation introduces an additional level of safety: the query must be a constant string literal, preventing construction by string concatenation, and the only way to fill in values for parts of the query is by setting positional parameters.

    It is good practice to use prepared statements (in SQL) or query parameters (in the Java Persistence Query Language) for supplying parameter values to a query, whether or not any of the parameters are directly traceable to user input. Doing so avoids any need to worry about quoting and escaping.


    ## Example
    In the following example, the code runs a simple SQL query in two different ways.

    The first way involves building a query, `query1`, by concatenating an environment variable with some string literals. The environment variable can include special characters, so this code allows for SQL injection attacks.

    The second way, which shows good practice, involves building a query, `query2`, with a single string literal that includes a wildcard (`?`). The wildcard is then given a value by calling `setString`. This version is immune to injection attacks, because any special characters in the environment variable are not given any special treatment.


    ```java
    {
        // BAD: the category might have SQL special characters in it
        String category = System.getenv("ITEM_CATEGORY");
        Statement statement = connection.createStatement();
        String query1 = "SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='"
            + category + "' ORDER BY PRICE";
        ResultSet results = statement.executeQuery(query1);
    }

    {
        // GOOD: use a prepared query
        String category = System.getenv("ITEM_CATEGORY");
        String query2 = "SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=? ORDER BY PRICE";
        PreparedStatement statement = connection.prepareStatement(query2);
        statement.setString(1, category);
        ResultSet results = statement.executeQuery();
    }
    ```

    ## Example
    The following code shows several different ways to run a Java Persistence query.

    The first example involves building a query, `query1`, by concatenating an environment variable with some string literals. Just like the SQL example, the environment variable can include special characters, so this code allows for Java Persistence query injection attacks.

    The remaining examples demonstrate different methods for safely building a Java Persistence query with user-supplied values:

    1. `query2` uses a single string literal that includes a placeholder for a parameter, indicated by a colon (`:`) and parameter name (`category`).
    1. `query3` uses a single string literal that includes a placeholder for a parameter, indicated by a question mark (`?`) and position number (`1`).
    1. `namedQuery1` is defined using the `@NamedQuery` annotation, whose `query` attribute is a string literal that includes a placeholder for a parameter, indicated by a colon (`:`) and parameter name (`category`).
    1. `namedQuery2` is defined using the `@NamedQuery` annotation, whose `query` attribute includes a placeholder for a parameter, indicated by a question mark (`?`) and position number (`1`).
    The parameter is then given a value by calling `setParameter`. These versions are immune to injection attacks, because any special characters in the environment variable or user-supplied value are not given any special treatment.


    ```java
    {
        // BAD: the category might have Java Persistence Query Language special characters in it
        String category = System.getenv("ITEM_CATEGORY");
        Statement statement = connection.createStatement();
        String query1 = "SELECT p FROM Product p WHERE p.category LIKE '"
            + category + "' ORDER BY p.price";
        Query q = entityManager.createQuery(query1);
    }

    {
        // GOOD: use a named parameter and set its value
        String category = System.getenv("ITEM_CATEGORY");
        String query2 = "SELECT p FROM Product p WHERE p.category LIKE :category ORDER BY p.price"
        Query q = entityManager.createQuery(query2);
        q.setParameter("category", category);
    }

    {
        // GOOD: use a positional parameter and set its value
        String category = System.getenv("ITEM_CATEGORY");
        String query3 = "SELECT p FROM Product p WHERE p.category LIKE ?1 ORDER BY p.price"
        Query q = entityManager.createQuery(query3);
        q.setParameter(1, category);
    }

    {
        // GOOD: use a named query with a named parameter and set its value
        @NamedQuery(
                name="lookupByCategory",
                query="SELECT p FROM Product p WHERE p.category LIKE :category ORDER BY p.price")
        private static class NQ {}
        ...
        String category = System.getenv("ITEM_CATEGORY");
        Query namedQuery1 = entityManager.createNamedQuery("lookupByCategory");
        namedQuery1.setParameter("category", category);
    }

    {
        // GOOD: use a named query with a positional parameter and set its value
        @NamedQuery(
                name="lookupByCategory",
                query="SELECT p FROM Product p WHERE p.category LIKE ?1 ORDER BY p.price")
        private static class NQ {}
        ...
        String category = System.getenv("ITEM_CATEGORY");
        Query namedQuery2 = entityManager.createNamedQuery("lookupByCategory");
        namedQuery2.setParameter(1, category);
    }
    ```

    ## References
    * OWASP: [SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html).
    * SEI CERT Oracle Coding Standard for Java: [IDS00-J. Prevent SQL injection](https://wiki.sei.cmu.edu/confluence/display/java/IDS00-J.+Prevent+SQL+injection).
    * The Java Tutorials: [Using Prepared Statements](https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html).
    * The Java EE Tutorial: [The Java Persistence Query Language](https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm).
    * Common Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html).
    * Common Weakness Enumeration: [CWE-564](https://cwe.mitre.org/data/definitions/564.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-090/LdapInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-090/LdapInjection.bqrs
  metadata:
    name: LDAP query built from user-controlled sources
    description: |-
      Building an LDAP query from user-controlled sources is vulnerable to insertion of
                    malicious LDAP code by the user.
    kind: path-problem
    problem.severity: error
    security-severity: 9.8
    precision: high
    id: java/ldap-injection
    tags: |-
      security
             external/cwe/cwe-090
  queryHelp: "# LDAP query built from user-controlled sources\nIf an LDAP query is\
    \ built using string concatenation, and the components of the concatenation include\
    \ user input, a user is likely to be able to run malicious LDAP queries.\n\n\n\
    ## Recommendation\nIf user input must be included in an LDAP query, it should\
    \ be escaped to avoid a malicious user providing special characters that change\
    \ the meaning of the query. If possible build the LDAP query using framework helper\
    \ methods, for example from Spring's `LdapQueryBuilder` and `LdapNameBuilder`,\
    \ instead of string concatenation. Alternatively, escape user input using an appropriate\
    \ LDAP encoding method, for example: `encodeForLDAP` or `encodeForDN` from OWASP\
    \ ESAPI, `LdapEncoder.filterEncode` or `LdapEncoder.nameEncode` from Spring LDAP,\
    \ or `Filter.encodeValue` from UnboundID library.\n\n\n## Example\nIn the following\
    \ examples, the code accepts an \"organization name\" and a \"username\" from\
    \ the user, which it uses to query LDAP.\n\nThe first example concatenates the\
    \ unvalidated and unencoded user input directly into both the DN (Distinguished\
    \ Name) and the search filter used for the LDAP query. A malicious user could\
    \ provide special characters to change the meaning of these queries, and search\
    \ for a completely different set of values. The LDAP query is executed using Java\
    \ JNDI API.\n\nThe second example uses the OWASP ESAPI library to encode the user\
    \ values before they are included in the DN and search filters. This ensures the\
    \ meaning of the query cannot be changed by a malicious user.\n\n\n```java\nimport\
    \ javax.naming.directory.DirContext;\nimport org.owasp.esapi.Encoder;\nimport\
    \ org.owasp.esapi.reference.DefaultEncoder;\n\npublic void ldapQueryBad(HttpServletRequest\
    \ request, DirContext ctx) throws NamingException {\n  String organizationName\
    \ = request.getParameter(\"organization_name\");\n  String username = request.getParameter(\"\
    username\");\n\n  // BAD: User input used in DN (Distinguished Name) without encoding\n\
    \  String dn = \"OU=People,O=\" + organizationName;\n\n  // BAD: User input used\
    \ in search filter without encoding\n  String filter = \"username=\" + userName;\n\
    \n  ctx.search(dn, filter, new SearchControls());\n}\n\npublic void ldapQueryGood(HttpServletRequest\
    \ request, DirContext ctx) throws NamingException {\n  String organizationName\
    \ = request.getParameter(\"organization_name\");\n  String username = request.getParameter(\"\
    username\");\n\n  // ESAPI encoder\n  Encoder encoder = DefaultEncoder.getInstance();\n\
    \n  // GOOD: Organization name is encoded before being used in DN\n  String safeOrganizationName\
    \ = encoder.encodeForDN(organizationName);\n  String safeDn = \"OU=People,O=\"\
    \ + safeOrganizationName;\n\n  // GOOD: User input is encoded before being used\
    \ in search filter\n  String safeUsername = encoder.encodeForLDAP(username);\n\
    \  String safeFilter = \"username=\" + safeUsername;\n  \n  ctx.search(safeDn,\
    \ safeFilter, new SearchControls());\n}\n```\nThe third example uses Spring `LdapQueryBuilder`\
    \ to build an LDAP query. In addition to simplifying the building of complex search\
    \ parameters, it also provides proper escaping of any unsafe characters in search\
    \ filters. The DN is built using `LdapNameBuilder`, which also provides proper\
    \ escaping.\n\n\n```java\nimport static org.springframework.ldap.query.LdapQueryBuilder.query;\n\
    import org.springframework.ldap.support.LdapNameBuilder;\n\npublic void ldapQueryGood(@RequestParam\
    \ String organizationName, @RequestParam String username) {\n  // GOOD: Organization\
    \ name is encoded before being used in DN\n  String safeDn = LdapNameBuilder.newInstance()\n\
    \    .add(\"O\", organizationName)\n    .add(\"OU=People\")\n    .build().toString();\n\
    \n  // GOOD: User input is encoded before being used in search filter\n  LdapQuery\
    \ query = query()\n    .base(safeDn)\n    .where(\"username\").is(username);\n\
    \n  ldapTemplate.search(query, new AttributeCheckAttributesMapper());\n}\n```\n\
    The fourth example uses `UnboundID` classes, `Filter` and `DN`, to construct a\
    \ safe filter and base DN.\n\n\n```java\nimport com.unboundid.ldap.sdk.LDAPConnection;\n\
    import com.unboundid.ldap.sdk.DN;\nimport com.unboundid.ldap.sdk.RDN;\nimport\
    \ com.unboundid.ldap.sdk.Filter;\n\npublic void ldapQueryGood(HttpServletRequest\
    \ request, LDAPConnection c) {\n  String organizationName = request.getParameter(\"\
    organization_name\");\n  String username = request.getParameter(\"username\");\n\
    \n  // GOOD: Organization name is encoded before being used in DN\n  DN safeDn\
    \ = new DN(new RDN(\"OU\", \"People\"), new RDN(\"O\", organizationName));\n\n\
    \  // GOOD: User input is encoded before being used in search filter\n  Filter\
    \ safeFilter = Filter.createEqualityFilter(\"username\", username);\n  \n  c.search(safeDn.toString(),\
    \ SearchScope.ONE, safeFilter);\n}\n```\nThe fifth example shows how to build\
    \ a safe filter and DN using the Apache LDAP API.\n\n\n```java\nimport org.apache.directory.ldap.client.api.LdapConnection;\n\
    import org.apache.directory.api.ldap.model.name.Dn;\nimport org.apache.directory.api.ldap.model.name.Rdn;\n\
    import org.apache.directory.api.ldap.model.message.SearchRequest;\nimport org.apache.directory.api.ldap.model.message.SearchRequestImpl;\n\
    import static org.apache.directory.ldap.client.api.search.FilterBuilder.equal;\n\
    \npublic void ldapQueryGood(HttpServletRequest request, LdapConnection c) {\n\
    \  String organizationName = request.getParameter(\"organization_name\");\n  String\
    \ username = request.getParameter(\"username\");\n\n  // GOOD: Organization name\
    \ is encoded before being used in DN\n  Dn safeDn = new Dn(new Rdn(\"OU\", \"\
    People\"), new Rdn(\"O\", organizationName));\n\n  // GOOD: User input is encoded\
    \ before being used in search filter\n  String safeFilter = equal(\"username\"\
    , username);\n  \n  SearchRequest searchRequest = new SearchRequestImpl();\n \
    \ searchRequest.setBase(safeDn);\n  searchRequest.setFilter(safeFilter);\n  c.search(searchRequest);\n\
    }\n```\n\n## References\n* OWASP: [LDAP Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html).\n\
    * OWASP ESAPI: [OWASP ESAPI](https://owasp.org/www-project-enterprise-security-api/).\n\
    * Spring LdapQueryBuilder doc: [LdapQueryBuilder](https://docs.spring.io/spring-ldap/docs/current/apidocs/org/springframework/ldap/query/LdapQueryBuilder.html).\n\
    * Spring LdapNameBuilder doc: [LdapNameBuilder](https://docs.spring.io/spring-ldap/docs/current/apidocs/org/springframework/ldap/support/LdapNameBuilder.html).\n\
    * UnboundID: [Understanding and Defending Against LDAP Injection Attacks](https://ldap.com/2018/05/04/understanding-and-defending-against-ldap-injection-attacks/).\n\
    * Common Weakness Enumeration: [CWE-90](https://cwe.mitre.org/data/definitions/90.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-094/GroovyInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-094/GroovyInjection.bqrs
  metadata:
    name: Groovy Language injection
    description: |-
      Evaluation of a user-controlled Groovy script
                    may lead to arbitrary code execution.
    kind: path-problem
    problem.severity: error
    security-severity: 9.3
    precision: high
    id: java/groovy-injection
    tags: |-
      security
             external/cwe/cwe-094
  queryHelp: "# Groovy Language injection\nApache Groovy is a powerful, optionally\
    \ typed and dynamic language, with static-typing and static compilation capabilities.\
    \ It integrates smoothly with any Java program, and immediately delivers to your\
    \ application powerful features, including scripting capabilities, Domain-Specific\
    \ Language authoring, runtime and compile-time meta-programming and functional\
    \ programming. If a Groovy script is built using attacker-controlled data, and\
    \ then evaluated, then it may allow the attacker to achieve RCE.\n\n\n## Recommendation\n\
    It is generally recommended to avoid using untrusted input in a Groovy evaluation.\
    \ If this is not possible, use a sandbox solution. Developers must also take care\
    \ that Groovy compile-time metaprogramming can also lead to RCE: it is possible\
    \ to achieve RCE by compiling a Groovy script (see the article \"Abusing Meta\
    \ Programming for Unauthenticated RCE!\" linked below). Groovy's `SecureASTCustomizer`\
    \ allows securing source code by controlling what code constructs are permitted.\
    \ This is typically done when using Groovy for its scripting or domain specific\
    \ language (DSL) features. The fundamental problem is that Groovy is a dynamic\
    \ language, yet `SecureASTCustomizer` works by looking at Groovy AST statically.\
    \ This makes it very easy for an attacker to bypass many of the intended checks\
    \ (see \\[Groovy SecureASTCustomizer is harmful\\](https://kohsuke.org/2012/04/27/groovy-secureastcustomizer-is-harmful/)).\
    \ Therefore, besides `SecureASTCustomizer`, runtime checks are also necessary\
    \ before calling Groovy methods (see \\[Improved sandboxing of Groovy scripts\\\
    ](https://melix.github.io/blog/2015/03/sandboxing.html)). It is also possible\
    \ to use a block-list method, excluding unwanted classes from being loaded by\
    \ the JVM. This method is not always recommended, because block-lists can be bypassed\
    \ by unexpected values.\n\n\n## Example\nThe following example uses untrusted\
    \ data to evaluate a Groovy script.\n\n\n```java\npublic class GroovyInjection\
    \ {\n    void injectionViaClassLoader(HttpServletRequest request) {    \n    \
    \    String script = request.getParameter(\"script\");\n        final GroovyClassLoader\
    \ classLoader = new GroovyClassLoader();\n        Class groovy = classLoader.parseClass(script);\
    \ // BAD: Groovy code injection\n        GroovyObject groovyObj = (GroovyObject)\
    \ groovy.newInstance();\n    }\n\n    void injectionViaEval(HttpServletRequest\
    \ request) {\n        String script = request.getParameter(\"script\");\n    \
    \    Eval.me(script); // BAD: Groovy code injection\n    }\n\n    void injectionViaGroovyShell(HttpServletRequest\
    \ request) {\n        GroovyShell shell = new GroovyShell();\n        String script\
    \ = request.getParameter(\"script\");\n        shell.evaluate(script); // BAD:\
    \ Groovy code injection\n    }\n\n    void injectionViaGroovyShellGroovyCodeSource(HttpServletRequest\
    \ request) {\n        GroovyShell shell = new GroovyShell();\n        String script\
    \ = request.getParameter(\"script\");\n        GroovyCodeSource gcs = new GroovyCodeSource(script,\
    \ \"test\", \"Test\");\n        shell.evaluate(gcs); // BAD: Groovy code injection\n\
    \    }\n}\n\n\n```\nThe following example uses classloader block-list approach\
    \ to exclude loading dangerous classes.\n\n\n```java\npublic class SandboxGroovyClassLoader\
    \ extends ClassLoader {\n    public SandboxGroovyClassLoader(ClassLoader parent)\
    \ {\n        super(parent);\n    }\n\n    /* override `loadClass` here to prevent\
    \ loading sensitive classes, such as `java.lang.Runtime`, `java.lang.ProcessBuilder`,\
    \ `java.lang.System`, etc.  */\n    /* Note we must also block `groovy.transform.ASTTest`,\
    \ `groovy.lang.GrabConfig` and `org.buildobjects.process.ProcBuilder` to prevent\
    \ compile-time RCE. */\n\n    static void runWithSandboxGroovyClassLoader() throws\
    \ Exception {\n        // GOOD: route all class-loading via sand-boxing classloader.\n\
    \        SandboxGroovyClassLoader classLoader = new GroovyClassLoader(new SandboxGroovyClassLoader());\n\
    \        \n        Class<?> scriptClass = classLoader.parseClass(untrusted.getQueryString());\n\
    \        Object scriptInstance = scriptClass.newInstance();\n        Object result\
    \ = scriptClass.getDeclaredMethod(\"bar\", new Class[]{}).invoke(scriptInstance,\
    \ new Object[]{});\n    }\n}\n```\n\n## References\n* Orange Tsai: [Abusing Meta\
    \ Programming for Unauthenticated RCE!](https://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html).\n\
    * Cédric Champeau: [Improved sandboxing of Groovy scripts](https://melix.github.io/blog/2015/03/sandboxing.html).\n\
    * Kohsuke Kawaguchi: [Groovy SecureASTCustomizer is harmful](https://kohsuke.org/2012/04/27/groovy-secureastcustomizer-is-harmful/).\n\
    * Welk1n: [Groovy Injection payloads](https://github.com/welk1n/exploiting-groovy-in-Java/).\n\
    * Charles Chan: [Secure Groovy Script Execution in a Sandbox](https://levelup.gitconnected.com/secure-groovy-script-execution-in-a-sandbox-ea39f80ee87/).\n\
    * Eugene: [Scripting and sandboxing in a JVM environment](https://stringconcat.com/en/scripting-and-sandboxing/).\n\
    * Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-094/InsecureBeanValidation.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-094/InsecureBeanValidation.bqrs
  metadata:
    name: Insecure Bean Validation
    description: "User-controlled data may be evaluated as a Java EL expression, leading\
      \ to arbitrary code execution."
    kind: path-problem
    problem.severity: error
    security-severity: 9.3
    precision: high
    id: java/insecure-bean-validation
    tags: |-
      security
             external/cwe/cwe-094
  queryHelp: "# Insecure Bean Validation\nCustom error messages for constraint validators\
    \ support different types of interpolation, including [Java EL expressions](https://docs.jboss.org/hibernate/validator/5.1/reference/en-US/html/chapter-message-interpolation.html#section-interpolation-with-message-expressions).\
    \ Controlling part of the message template being passed to `ConstraintValidatorContext.buildConstraintViolationWithTemplate()`\
    \ argument can lead to arbitrary Java code execution. Unfortunately, it is common\
    \ that validated (and therefore, normally untrusted) bean properties flow into\
    \ the custom error message.\n\n\n## Recommendation\nThere are different approaches\
    \ to remediate the issue:\n\n* Do not include validated bean properties in the\
    \ custom error message.\n* Use parameterized messages instead of string concatenation.\
    \ For example:\n```\nHibernateConstraintValidatorContext context =\n   constraintValidatorContext.unwrap(HibernateConstraintValidatorContext.class);\n\
    context.addMessageParameter(\"foo\", \"bar\");\ncontext.buildConstraintViolationWithTemplate(\"\
    My violation message contains a parameter {foo}\")\n   .addConstraintViolation();\n\
    ```\n* Sanitize the validated bean properties to make sure that there are no EL\
    \ expressions. An example of valid sanitization logic can be found [here](https://github.com/hibernate/hibernate-validator/blob/master/engine/src/main/java/org/hibernate/validator/internal/engine/messageinterpolation/util/InterpolationHelper.java#L17).\n\
    * Disable the EL interpolation and only use `ParameterMessageInterpolator`:\n\
    ```\nValidator validator = Validation.byDefaultProvider()\n   .configure()\n \
    \  .messageInterpolator(new ParameterMessageInterpolator())\n   .buildValidatorFactory()\n\
    \   .getValidator();\n```\n* Replace Hibernate Validator with Apache BVal, which\
    \ in its latest version does not interpolate EL expressions by default. Note that\
    \ this replacement may not be a simple drop-in replacement.\n\n## Example\nThe\
    \ following validator could result in arbitrary Java code execution:\n\n\n```java\n\
    import javax.validation.ConstraintValidator;\nimport javax.validation.ConstraintValidatorContext;\n\
    import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorContext;\n\
    import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class\
    \ TestValidator implements ConstraintValidator<Object, String> {\n\n    public\
    \ static class InterpolationHelper {\n\n        public static final char BEGIN_TERM\
    \ = '{';\n        public static final char END_TERM = '}';\n        public static\
    \ final char EL_DESIGNATOR = '$';\n        public static final char ESCAPE_CHARACTER\
    \ = '\\\\';\n\n        private static final Pattern ESCAPE_MESSAGE_PARAMETER_PATTERN\
    \ = Pattern.compile( \"([\\\\\" + ESCAPE_CHARACTER + BEGIN_TERM + END_TERM + EL_DESIGNATOR\
    \ + \"])\" );\n\n        private InterpolationHelper() {\n        }\n\n      \
    \  public static String escapeMessageParameter(String messageParameter) {\n  \
    \          if ( messageParameter == null ) {\n                return null;\n \
    \           }\n            return ESCAPE_MESSAGE_PARAMETER_PATTERN.matcher( messageParameter\
    \ ).replaceAll( Matcher.quoteReplacement( String.valueOf( ESCAPE_CHARACTER ) )\
    \ + \"$1\" );\n        }\n\n    }\n\n    @Override\n    public boolean isValid(String\
    \ object, ConstraintValidatorContext constraintContext) {\n        String value\
    \ = object + \" is invalid\";\n\n        // Bad: Bean properties (normally user-controlled)\
    \ are passed directly to `buildConstraintViolationWithTemplate`\n        constraintContext.buildConstraintViolationWithTemplate(value).addConstraintViolation().disableDefaultConstraintViolation();\n\
    \n        // Good: Bean properties (normally user-controlled) are escaped \n \
    \       String escaped = InterpolationHelper.escapeMessageParameter(value);\n\
    \        constraintContext.buildConstraintViolationWithTemplate(escaped).addConstraintViolation().disableDefaultConstraintViolation();\n\
    \n        // Good: Bean properties (normally user-controlled) are parameterized\n\
    \        HibernateConstraintValidatorContext context = constraintContext.unwrap(\
    \ HibernateConstraintValidatorContext.class );\n        context.addMessageParameter(\
    \ \"prop\", object );\n        context.buildConstraintViolationWithTemplate( \"\
    {prop} is invalid\").addConstraintViolation();\n        return false;\n    }\n\
    \n}\n\n```\n\n## References\n* Hibernate Reference Guide: [ConstraintValidatorContext](https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_the_code_constraintvalidatorcontext_code).\n\
    * GitHub Security Lab research: [Bean validation](https://securitylab.github.com/research/bean-validation-RCE).\n\
    * Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-094/JexlInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-094/JexlInjection.bqrs
  metadata:
    name: Expression language injection (JEXL)
    description: |-
      Evaluation of a user-controlled JEXL expression
                    may lead to arbitrary code execution.
    kind: path-problem
    problem.severity: error
    security-severity: 9.3
    precision: high
    id: java/jexl-expression-injection
    tags: |-
      security
             external/cwe/cwe-094
  queryHelp: "# Expression language injection (JEXL)\nJava EXpression Language (JEXL)\
    \ is a simple expression language provided by the Apache Commons JEXL library.\
    \ The syntax is close to a mix of ECMAScript and shell-script. The language allows\
    \ invocation of methods available in the JVM. If a JEXL expression is built using\
    \ attacker-controlled data, and then evaluated, then it may allow the attacker\
    \ to run arbitrary code.\n\n\n## Recommendation\nIt is generally recommended to\
    \ avoid using untrusted input in a JEXL expression. If it is not possible, JEXL\
    \ expressions should be run in a sandbox that allows accessing only explicitly\
    \ allowed classes.\n\n\n## Example\nThe following example uses untrusted data\
    \ to build and run a JEXL expression.\n\n\n```java\npublic void evaluate(Socket\
    \ socket) throws IOException {\n  try (BufferedReader reader = new BufferedReader(\n\
    \        new InputStreamReader(socket.getInputStream()))) {\n    \n    String\
    \ input = reader.readLine();\n    JexlEngine jexl = new JexlBuilder().create();\n\
    \    // BAD: input is controlled by the user\n    JexlExpression expression =\
    \ jexl.createExpression(input);\n    JexlContext context = new MapContext();\n\
    \    expression.evaluate(context);\n  }\n}\n```\nThe next example shows how an\
    \ untrusted JEXL expression can be run in a sandbox that allows accessing only\
    \ methods in the `java.lang.Math` class. The sandbox is implemented using `JexlSandbox`\
    \ class that is provided by Apache Commons JEXL 3.\n\n\n```java\npublic void evaluate(Socket\
    \ socket) throws IOException {\n  try (BufferedReader reader = new BufferedReader(\n\
    \        new InputStreamReader(socket.getInputStream()))) {\n    \n    JexlSandbox\
    \ onlyMath = new JexlSandbox(false);\n    onlyMath.white(\"java.lang.Math\");\n\
    \    JexlEngine jexl = new JexlBuilder().sandbox(onlyMath).create(); // GOOD:\
    \ using a sandbox\n      \n    String input = reader.readLine();\n    JexlExpression\
    \ expression = jexl.createExpression(input);\n    JexlContext context = new MapContext();\n\
    \    expression.evaluate(context);\n  }\n}\n```\nThe next example shows another\
    \ way how a sandbox can be implemented. It uses a custom implementation of `JexlUberspect`\
    \ that checks if callees are instances of allowed classes.\n\n\n```java\npublic\
    \ void evaluate(Socket socket) throws IOException {\n  try (BufferedReader reader\
    \ = new BufferedReader(\n        new InputStreamReader(socket.getInputStream())))\
    \ {\n    \n    JexlUberspect sandbox = new JexlUberspectSandbox();\n    JexlEngine\
    \ jexl = new JexlBuilder().uberspect(sandbox).create();\n      \n    String input\
    \ = reader.readLine();\n    JexlExpression expression = jexl.createExpression(input);\
    \ // GOOD: jexl uses a sandbox\n    JexlContext context = new MapContext();\n\
    \    expression.evaluate(context);\n  }\n\n  private static class JexlUberspectSandbox\
    \ implements JexlUberspect {\n\n    private static final List<String> ALLOWED_CLASSES\
    \ =\n              Arrays.asList(\"java.lang.Math\", \"java.util.Random\");\n\n\
    \    private final JexlUberspect uberspect = new JexlBuilder().create().getUberspect();\n\
    \n    private void checkAccess(Object obj) {\n      if (!ALLOWED_CLASSES.contains(obj.getClass().getCanonicalName()))\
    \ {\n        throw new AccessControlException(\"Not allowed\");\n      }\n   \
    \ }\n\n    @Override\n    public JexlMethod getMethod(Object obj, String method,\
    \ Object... args) {\n      checkAccess(obj);\n      return uberspect.getMethod(obj,\
    \ method, args);\n    }\n\n    @Override\n    public List<PropertyResolver> getResolvers(JexlOperator\
    \ op, Object obj) {\n      checkAccess(obj);\n      return uberspect.getResolvers(op,\
    \ obj);\n    }\n\n    @Override\n    public void setClassLoader(ClassLoader loader)\
    \ {\n      uberspect.setClassLoader(loader);\n    }\n\n    @Override\n    public\
    \ int getVersion() {\n      return uberspect.getVersion();\n    }\n\n    @Override\n\
    \    public JexlMethod getConstructor(Object obj, Object... args) {\n      checkAccess(obj);\n\
    \      return uberspect.getConstructor(obj, args);\n    }\n\n    @Override\n \
    \   public JexlPropertyGet getPropertyGet(Object obj, Object identifier) {\n \
    \     checkAccess(obj);\n      return uberspect.getPropertyGet(obj, identifier);\n\
    \    }\n\n    @Override\n    public JexlPropertyGet getPropertyGet(List<PropertyResolver>\
    \ resolvers, Object obj, Object identifier) {\n      checkAccess(obj);\n     \
    \ return uberspect.getPropertyGet(resolvers, obj, identifier);\n    }\n\n    @Override\n\
    \    public JexlPropertySet getPropertySet(Object obj, Object identifier, Object\
    \ arg) {\n      checkAccess(obj);\n      return uberspect.getPropertySet(obj,\
    \ identifier, arg);\n    }\n\n    @Override\n    public JexlPropertySet getPropertySet(List<PropertyResolver>\
    \ resolvers, Object obj, Object identifier, Object arg) {\n      checkAccess(obj);\n\
    \      return uberspect.getPropertySet(resolvers, obj, identifier, arg);\n   \
    \ }\n\n    @Override\n    public Iterator<?> getIterator(Object obj) {\n     \
    \ checkAccess(obj);\n      return uberspect.getIterator(obj);\n    }\n\n    @Override\n\
    \    public JexlArithmetic.Uberspect getArithmetic(JexlArithmetic arithmetic)\
    \ {\n      return uberspect.getArithmetic(arithmetic);\n    } \n  }\n}\n```\n\n\
    ## References\n* Apache Commons JEXL: [Project page](https://commons.apache.org/proper/commons-jexl/).\n\
    * Apache Commons JEXL documentation: [JEXL 2.1.1 API](https://commons.apache.org/proper/commons-jexl/javadocs/apidocs-2.1.1/).\n\
    * Apache Commons JEXL documentation: [JEXL 3.1 API](https://commons.apache.org/proper/commons-jexl/apidocs/index.html).\n\
    * OWASP: [Expression Language Injection](https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection).\n\
    * Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-094/MvelInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-094/MvelInjection.bqrs
  metadata:
    name: Expression language injection (MVEL)
    description: |-
      Evaluation of a user-controlled MVEL expression
                    may lead to remote code execution.
    kind: path-problem
    problem.severity: error
    security-severity: 9.3
    precision: high
    id: java/mvel-expression-injection
    tags: |-
      security
             external/cwe/cwe-094
  queryHelp: "# Expression language injection (MVEL)\nMVEL is an expression language\
    \ based on Java-syntax, which offers many features including invocation of methods\
    \ available in the JVM. If a MVEL expression is built using attacker-controlled\
    \ data, and then evaluated, then it may allow attackers to run arbitrary code.\n\
    \n\n## Recommendation\nIncluding user input in a MVEL expression should be avoided.\n\
    \n\n## Example\nIn the following sample, the first example uses untrusted data\
    \ to build a MVEL expression and then runs it in the default context. In the second\
    \ example, the untrusted data is validated with a custom method that checks that\
    \ the expression does not contain unexpected code before evaluating it.\n\n\n\
    ```java\npublic void evaluate(Socket socket) throws IOException {\n  try (BufferedReader\
    \ reader = new BufferedReader(\n    new InputStreamReader(socket.getInputStream())))\
    \ {\n  \n    String expression = reader.readLine();\n    // BAD: the user-provided\
    \ expression is directly evaluated\n    MVEL.eval(expression);\n  }\n}\n\npublic\
    \ void safeEvaluate(Socket socket) throws IOException {\n  try (BufferedReader\
    \ reader = new BufferedReader(\n    new InputStreamReader(socket.getInputStream())))\
    \ {\n  \n    String expression = reader.readLine();\n    // GOOD: the user-provided\
    \ expression is validated before evaluation\n    validateExpression(expression);\n\
    \    MVEL.eval(expression);\n  }\n}\n\nprivate void validateExpression(String\
    \ expression) {\n  // Validate that the expression does not contain unexpected\
    \ code.\n  // For instance, this can be done with allow-lists or deny-lists of\
    \ code patterns.\n}\n```\n\n## References\n* MVEL Documentation: [Language Guide\
    \ for 2.0](http://mvel.documentnode.com/).\n* OWASP: [Expression Language Injection](https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection).\n\
    * Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-094/SpelInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-094/SpelInjection.bqrs
  metadata:
    name: Expression language injection (Spring)
    description: |-
      Evaluation of a user-controlled Spring Expression Language (SpEL) expression
                    may lead to remote code execution.
    kind: path-problem
    problem.severity: error
    security-severity: 9.3
    precision: high
    id: java/spel-expression-injection
    tags: |-
      security
             external/cwe/cwe-094
  queryHelp: "# Expression language injection (Spring)\nThe Spring Expression Language\
    \ (SpEL) is a powerful expression language provided by the Spring Framework. The\
    \ language offers many features including invocation of methods available in the\
    \ JVM. If a SpEL expression is built using attacker-controlled data, and then\
    \ evaluated in a powerful context, then it may allow the attacker to run arbitrary\
    \ code.\n\nThe `SpelExpressionParser` class parses a SpEL expression string and\
    \ returns an `Expression` instance that can be then evaluated by calling one of\
    \ its methods. By default, an expression is evaluated in a powerful `StandardEvaluationContext`\
    \ that allows the expression to access other methods available in the JVM.\n\n\
    \n## Recommendation\nIn general, including user input in a SpEL expression should\
    \ be avoided. If user input must be included in the expression, it should be then\
    \ evaluated in a limited context that doesn't allow arbitrary method invocation.\n\
    \n\n## Example\nThe following example uses untrusted data to build a SpEL expression\
    \ and then runs it in the default powerful context.\n\n\n```java\npublic Object\
    \ evaluate(Socket socket) throws IOException {\n  try (BufferedReader reader =\
    \ new BufferedReader(\n      new InputStreamReader(socket.getInputStream())))\
    \ {\n\n    String string = reader.readLine();\n    ExpressionParser parser = new\
    \ SpelExpressionParser();\n    // BAD: string is controlled by the user\n    Expression\
    \ expression = parser.parseExpression(string);\n    return expression.getValue();\n\
    \  }\n}\n```\nThe next example shows how an untrusted SpEL expression can be run\
    \ in `SimpleEvaluationContext` that doesn't allow accessing arbitrary methods.\
    \ However, it's recommended to avoid using untrusted input in SpEL expressions.\n\
    \n\n```java\npublic Object evaluate(Socket socket) throws IOException {\n  try\
    \ (BufferedReader reader = new BufferedReader(\n      new InputStreamReader(socket.getInputStream())))\
    \ {\n\n    String string = reader.readLine();\n    ExpressionParser parser = new\
    \ SpelExpressionParser();\n    // AVOID: string is controlled by the user\n  \
    \  Expression expression = parser.parseExpression(string);\n    SimpleEvaluationContext\
    \ context \n        = SimpleEvaluationContext.forReadWriteDataBinding().build();\n\
    \    // OK: Untrusted expressions are evaluated in a restricted context\n    return\
    \ expression.getValue(context);\n  }\n}\n```\n\n## References\n* Spring Framework\
    \ Reference Documentation: [Spring Expression Language (SpEL)](https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/expressions.html).\n\
    * OWASP: [Expression Language Injection](https://owasp.org/www-community/vulnerabilities/Expression_Language_Injection).\n\
    * Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-094/TemplateInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-094/TemplateInjection.bqrs
  metadata:
    name: Server-side template injection
    description: Untrusted input interpreted as a template can lead to remote code
      execution.
    kind: path-problem
    problem.severity: error
    security-severity: 9.3
    precision: high
    id: java/server-side-template-injection
    tags: |-
      security
             external/cwe/cwe-1336
             external/cwe/cwe-094
  queryHelp: "# Server-side template injection\nTemplate injection occurs when user\
    \ input is embedded in a template's code in an unsafe manner. An attacker can\
    \ use native template syntax to inject a malicious payload into a template, which\
    \ is then executed server-side. This permits the attacker to run arbitrary code\
    \ in the server's context.\n\n\n## Recommendation\nTo fix this, ensure that untrusted\
    \ input is not used as part of a template's code. If the application requirements\
    \ do not allow this, use a sandboxed environment where access to unsafe attributes\
    \ and methods is prohibited.\n\n\n## Example\nIn the example given below, an untrusted\
    \ HTTP parameter `code` is used as a Velocity template string. This can lead to\
    \ remote code execution.\n\n\n```java\n@Controller\npublic class VelocitySSTI\
    \ {\n\n\t@GetMapping(value = \"bad\")\n\tpublic void bad(HttpServletRequest request)\
    \ {\n\t\tVelocity.init();\n\n\t\tString code = request.getParameter(\"code\");\n\
    \n\t\tVelocityContext context = new VelocityContext();\n\n\t\tcontext.put(\"name\"\
    , \"Velocity\");\n\t\tcontext.put(\"project\", \"Jakarta\");\n\n\t\tStringWriter\
    \ w = new StringWriter();\n\t\t// evaluate( Context context, Writer out, String\
    \ logTag, String instring )\n\t\t// BAD: code is controlled by the user\n\t\t\
    Velocity.evaluate(context, w, \"mystring\", code);\n\t}\n}\n\n```\nIn the next\
    \ example, the problem is avoided by using a fixed template string `s`. Since\
    \ the template's code is not attacker-controlled in this case, this solution prevents\
    \ the execution of untrusted code.\n\n\n```java\n@Controller\npublic class VelocitySSTI\
    \ {\n\n\t@GetMapping(value = \"good\")\n\tpublic void good(HttpServletRequest\
    \ request) {\n\t\tVelocity.init();\n\t\tVelocityContext context = new VelocityContext();\n\
    \n\t\tcontext.put(\"name\", \"Velocity\");\n\t\tcontext.put(\"project\", \"Jakarta\"\
    );\n\n\t\tString s = \"We are using $project $name to render this.\";\n\t\tStringWriter\
    \ w = new StringWriter();\n\t\tVelocity.evaluate(context, w, \"mystring\", s);\
    \ // GOOD: s is a constant string\n\t\tSystem.out.println(\" string : \" + w);\n\
    \t}\n}\n\n```\n\n## References\n* Portswigger: [Server Side Template Injection](https://portswigger.net/web-security/server-side-template-injection).\n\
    * Common Weakness Enumeration: [CWE-1336](https://cwe.mitre.org/data/definitions/1336.html).\n\
    * Common Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-1104/MavenPomDependsOnBintray.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-1104/MavenPomDependsOnBintray.bqrs
  metadata:
    name: Depending upon JCenter/Bintray as an artifact repository
    description: Using a deprecated artifact repository may eventually give attackers
      access for a supply chain attack.
    kind: problem
    problem.severity: error
    security-severity: 6.5
    precision: very-high
    id: java/maven/dependency-upon-bintray
    tags: |-
      security
             external/cwe/cwe-1104
  queryHelp: |
    # Depending upon JCenter/Bintray as an artifact repository
    [Bintray and JCenter are shutting down on February 1st, 2022](https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/). Relying upon repositories that are deprecated or scheduled to be shutdown can have unintended consequences; for example, artifacts being resolved from a different artifact server or a total failure of the CI build.

    When artifact repositories are left unmaintained for a long period of time, vulnerabilities may emerge. Theoretically, this could allow attackers to inject malicious code into the artifacts that you are resolving and infect build artifacts that are being produced. This can be used by attackers to perform a [supply chain attack](https://en.wikipedia.org/wiki/Supply_chain_attack) against your project's users.


    ## Recommendation
    Always use the canonical repository for resolving your dependencies.


    ## Example
    The following example shows locations in a Maven POM file where artifact repository upload/download is configured. The use of Bintray in any of these locations is not advised.


    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <project xmlns="http://maven.apache.org/POM/4.0.0"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

        <modelVersion>4.0.0</modelVersion>

        <groupId>com.semmle</groupId>
        <artifactId>parent</artifactId>
        <version>1.0</version>
        <packaging>pom</packaging>

        <name>Bintray Usage</name>
        <description>An example of using bintray to download and upload dependencies</description>

        <distributionManagement>
            <repository>
                <id>jcenter</id>
                <name>JCenter</name>
                <!-- BAD! Don't use JCenter -->
                <url>https://jcenter.bintray.com</url>
            </repository>
            <snapshotRepository>
                <id>jcenter-snapshots</id>
                <name>JCenter</name>
                <!-- BAD! Don't use JCenter -->
                <url>https://jcenter.bintray.com</url>
            </snapshotRepository>
        </distributionManagement>
        <repositories>
            <repository>
                <id>jcenter</id>
                <name>JCenter</name>
                <!-- BAD! Don't use JCenter -->
                <url>https://jcenter.bintray.com</url>
            </repository>
        </repositories>
        <repositories>
            <repository>
                <id>jcenter</id>
                <name>JCenter</name>
                <!-- BAD! Don't use Bintray -->
                <url>https://dl.bintray.com/groovy/maven</url>
            </repository>
        </repositories>
        <pluginRepositories>
            <pluginRepository>
                <id>jcenter-plugins</id>
                <name>JCenter</name>
                <!-- BAD! Don't use JCenter -->
                <url>https://jcenter.bintray.com</url>
            </pluginRepository>
        </pluginRepositories>
    </project>

    ```

    ## References
    * JFrog blog: [ Into the Sunset on May 1st: Bintray, JCenter, GoCenter, and ChartCenter ](https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/)
    * Common Weakness Enumeration: [CWE-1104](https://cwe.mitre.org/data/definitions/1104.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-113/NettyResponseSplitting.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-113/NettyResponseSplitting.bqrs
  metadata:
    name: Disabled Netty HTTP header validation
    description: |-
      Disabling HTTP header validation makes code vulnerable to
                    attack by header splitting if user input is written directly to
                    an HTTP header.
    kind: problem
    problem.severity: error
    security-severity: 6.1
    precision: high
    id: java/netty-http-request-or-response-splitting
    tags: |-
      security
             external/cwe/cwe-093
             external/cwe/cwe-113
  queryHelp: "# Disabled Netty HTTP header validation\nDirectly writing user input\
    \ (for example, an HTTP request parameter) to an HTTP header can lead to an HTTP\
    \ request-splitting or response-splitting vulnerability.\n\nHTTP response splitting\
    \ can lead to vulnerabilities such as XSS and cache poisoning.\n\nHTTP request\
    \ splitting can allow an attacker to inject an additional HTTP request into a\
    \ client's outgoing socket connection. This can allow an attacker to perform an\
    \ SSRF-like attack.\n\nIn the context of a servlet container, if the user input\
    \ includes blank lines and the servlet container does not escape the blank lines,\
    \ then a remote user can cause the response to turn into two separate responses.\
    \ The remote user can then control one or more responses, which is also HTTP response\
    \ splitting.\n\n\n## Recommendation\nGuard against HTTP header splitting in the\
    \ same way as guarding against cross-site scripting. Before passing any data into\
    \ HTTP headers, either check the data for special characters, or escape any special\
    \ characters that are present.\n\nIf the code calls Netty API's directly, ensure\
    \ that the `validateHeaders` parameter is set to `true`.\n\n\n## Example\nThe\
    \ following example shows the 'name' parameter being written to a cookie in two\
    \ different ways. The first way writes it directly to the cookie, and thus is\
    \ vulnerable to response-splitting attacks. The second way first removes all special\
    \ characters, thus avoiding the potential problem.\n\n\n```java\npublic class\
    \ ResponseSplitting extends HttpServlet {\n\tprotected void doGet(HttpServletRequest\
    \ request, HttpServletResponse response)\n\tthrows ServletException, IOException\
    \ {\n\t\t// BAD: setting a cookie with an unvalidated parameter\n\t\tCookie cookie\
    \ = new Cookie(\"name\", request.getParameter(\"name\"));\n\t\tresponse.addCookie(cookie);\n\
    \n\t\t// GOOD: remove special characters before putting them in the header\n\t\
    \tString name = removeSpecial(request.getParameter(\"name\"));\n\t\tCookie cookie2\
    \ = new Cookie(\"name\", name);\n\t\tresponse.addCookie(cookie2);\n\t}\n\n\tprivate\
    \ static String removeSpecial(String str) {\n\t\treturn str.replaceAll(\"[^a-zA-Z\
    \ ]\", \"\");\n\t}\n}\n\n```\n\n## Example\nThe following example shows the use\
    \ of the library 'netty' with HTTP response-splitting verification configurations.\
    \ The second way will verify the parameters before using them to build the HTTP\
    \ response.\n\n\n```java\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\n\
    \npublic class ResponseSplitting {\n    // BAD: Disables the internal response\
    \ splitting verification\n    private final DefaultHttpHeaders badHeaders = new\
    \ DefaultHttpHeaders(false);\n\n    // GOOD: Verifies headers passed don't contain\
    \ CRLF characters\n    private final DefaultHttpHeaders goodHeaders = new DefaultHttpHeaders();\n\
    \n    // BAD: Disables the internal response splitting verification\n    private\
    \ final DefaultHttpResponse badResponse = new DefaultHttpResponse(version, httpResponseStatus,\
    \ false);\n\n    // GOOD: Verifies headers passed don't contain CRLF characters\n\
    \    private final DefaultHttpResponse goodResponse = new DefaultHttpResponse(version,\
    \ httpResponseStatus);\n}\n\n```\n\n## Example\nThe following example shows the\
    \ use of the netty library with configurations for verification of HTTP request\
    \ splitting. The second recommended approach in the example verifies the parameters\
    \ before using them to build the HTTP request.\n\n\n```java\npublic class NettyRequestSplitting\
    \ {\n    // BAD: Disables the internal request splitting verification\n    private\
    \ final DefaultHttpHeaders badHeaders = new DefaultHttpHeaders(false);\n\n   \
    \ // GOOD: Verifies headers passed don't contain CRLF characters\n    private\
    \ final DefaultHttpHeaders goodHeaders = new DefaultHttpHeaders();\n\n    // BAD:\
    \ Disables the internal request splitting verification\n    private final DefaultHttpRequest\
    \ badRequest = new DefaultHttpRequest(httpVersion, method, uri, false);\n\n  \
    \  // GOOD: Verifies headers passed don't contain CRLF characters\n    private\
    \ final DefaultHttpRequest goodResponse = new DefaultHttpRequest(httpVersion,\
    \ method, uri);\n}\n\n```\n\n## References\n* SecLists.org: [HTTP response splitting](https://seclists.org/bugtraq/2005/Apr/187).\n\
    * OWASP: [HTTP Response Splitting](https://www.owasp.org/index.php/HTTP_Response_Splitting).\n\
    * Wikipedia: [HTTP response splitting](http://en.wikipedia.org/wiki/HTTP_response_splitting).\n\
    * CAPEC: [CAPEC-105: HTTP Request Splitting](https://capec.mitre.org/data/definitions/105.html)\n\
    * Common Weakness Enumeration: [CWE-93](https://cwe.mitre.org/data/definitions/93.html).\n\
    * Common Weakness Enumeration: [CWE-113](https://cwe.mitre.org/data/definitions/113.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-113/ResponseSplitting.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-113/ResponseSplitting.bqrs
  metadata:
    name: HTTP response splitting
    description: |-
      Writing user input directly to an HTTP header
                    makes code vulnerable to attack by header splitting.
    kind: path-problem
    problem.severity: error
    security-severity: 6.1
    precision: high
    id: java/http-response-splitting
    tags: |-
      security
             external/cwe/cwe-113
  queryHelp: "# HTTP response splitting\nDirectly writing user input (for example,\
    \ an HTTP request parameter) to an HTTP header can lead to an HTTP request-splitting\
    \ or response-splitting vulnerability.\n\nHTTP response splitting can lead to\
    \ vulnerabilities such as XSS and cache poisoning.\n\nHTTP request splitting can\
    \ allow an attacker to inject an additional HTTP request into a client's outgoing\
    \ socket connection. This can allow an attacker to perform an SSRF-like attack.\n\
    \nIn the context of a servlet container, if the user input includes blank lines\
    \ and the servlet container does not escape the blank lines, then a remote user\
    \ can cause the response to turn into two separate responses. The remote user\
    \ can then control one or more responses, which is also HTTP response splitting.\n\
    \n\n## Recommendation\nGuard against HTTP header splitting in the same way as\
    \ guarding against cross-site scripting. Before passing any data into HTTP headers,\
    \ either check the data for special characters, or escape any special characters\
    \ that are present.\n\nIf the code calls Netty API's directly, ensure that the\
    \ `validateHeaders` parameter is set to `true`.\n\n\n## Example\nThe following\
    \ example shows the 'name' parameter being written to a cookie in two different\
    \ ways. The first way writes it directly to the cookie, and thus is vulnerable\
    \ to response-splitting attacks. The second way first removes all special characters,\
    \ thus avoiding the potential problem.\n\n\n```java\npublic class ResponseSplitting\
    \ extends HttpServlet {\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse\
    \ response)\n\tthrows ServletException, IOException {\n\t\t// BAD: setting a cookie\
    \ with an unvalidated parameter\n\t\tCookie cookie = new Cookie(\"name\", request.getParameter(\"\
    name\"));\n\t\tresponse.addCookie(cookie);\n\n\t\t// GOOD: remove special characters\
    \ before putting them in the header\n\t\tString name = removeSpecial(request.getParameter(\"\
    name\"));\n\t\tCookie cookie2 = new Cookie(\"name\", name);\n\t\tresponse.addCookie(cookie2);\n\
    \t}\n\n\tprivate static String removeSpecial(String str) {\n\t\treturn str.replaceAll(\"\
    [^a-zA-Z ]\", \"\");\n\t}\n}\n\n```\n\n## Example\nThe following example shows\
    \ the use of the library 'netty' with HTTP response-splitting verification configurations.\
    \ The second way will verify the parameters before using them to build the HTTP\
    \ response.\n\n\n```java\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\n\
    \npublic class ResponseSplitting {\n    // BAD: Disables the internal response\
    \ splitting verification\n    private final DefaultHttpHeaders badHeaders = new\
    \ DefaultHttpHeaders(false);\n\n    // GOOD: Verifies headers passed don't contain\
    \ CRLF characters\n    private final DefaultHttpHeaders goodHeaders = new DefaultHttpHeaders();\n\
    \n    // BAD: Disables the internal response splitting verification\n    private\
    \ final DefaultHttpResponse badResponse = new DefaultHttpResponse(version, httpResponseStatus,\
    \ false);\n\n    // GOOD: Verifies headers passed don't contain CRLF characters\n\
    \    private final DefaultHttpResponse goodResponse = new DefaultHttpResponse(version,\
    \ httpResponseStatus);\n}\n\n```\n\n## Example\nThe following example shows the\
    \ use of the netty library with configurations for verification of HTTP request\
    \ splitting. The second recommended approach in the example verifies the parameters\
    \ before using them to build the HTTP request.\n\n\n```java\npublic class NettyRequestSplitting\
    \ {\n    // BAD: Disables the internal request splitting verification\n    private\
    \ final DefaultHttpHeaders badHeaders = new DefaultHttpHeaders(false);\n\n   \
    \ // GOOD: Verifies headers passed don't contain CRLF characters\n    private\
    \ final DefaultHttpHeaders goodHeaders = new DefaultHttpHeaders();\n\n    // BAD:\
    \ Disables the internal request splitting verification\n    private final DefaultHttpRequest\
    \ badRequest = new DefaultHttpRequest(httpVersion, method, uri, false);\n\n  \
    \  // GOOD: Verifies headers passed don't contain CRLF characters\n    private\
    \ final DefaultHttpRequest goodResponse = new DefaultHttpRequest(httpVersion,\
    \ method, uri);\n}\n\n```\n\n## References\n* SecLists.org: [HTTP response splitting](https://seclists.org/bugtraq/2005/Apr/187).\n\
    * OWASP: [HTTP Response Splitting](https://www.owasp.org/index.php/HTTP_Response_Splitting).\n\
    * Wikipedia: [HTTP response splitting](http://en.wikipedia.org/wiki/HTTP_response_splitting).\n\
    * CAPEC: [CAPEC-105: HTTP Request Splitting](https://capec.mitre.org/data/definitions/105.html)\n\
    * Common Weakness Enumeration: [CWE-113](https://cwe.mitre.org/data/definitions/113.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-1204/StaticInitializationVector.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-1204/StaticInitializationVector.bqrs
  metadata:
    name: Using a static initialization vector for encryption
    description: "An initialization vector (IV) used for ciphers of certain modes\
      \ (such as CBC or GCM) should be unique and unpredictable, to maximize encryption\
      \ and prevent dictionary attacks."
    kind: path-problem
    problem.severity: warning
    security-severity: 7.5
    precision: high
    id: java/static-initialization-vector
    tags: |-
      security
             external/cwe/cwe-329
             external/cwe/cwe-1204
  queryHelp: |
    # Using a static initialization vector for encryption
    When a cipher is used in certain modes such as CBC or GCM, it requires an initialization vector (IV). Under the same secret key, IVs should be unique and ideally unpredictable. If the same IV is used with the same secret key, then the same plaintext results in the same ciphertext. This can let an attacker learn if the same data pieces are transferred or stored, or help the attacker run a dictionary attack.


    ## Recommendation
    Use a random IV generated by `SecureRandom`.


    ## Example
    The following example initializes a cipher with a static IV, which is unsafe:


    ```java
    byte[] iv = new byte[16]; // BAD: all zeroes
    GCMParameterSpec params = new GCMParameterSpec(128, iv);
    Cipher cipher = Cipher.getInstance("AES/GCM/PKCS5PADDING");
    cipher.init(Cipher.ENCRYPT_MODE, key, params);
    ```
    The next example initializes a cipher with a random IV:


    ```java
    byte[] iv = new byte[16];
    SecureRandom random = SecureRandom.getInstanceStrong();
    random.nextBytes(iv); // GOOD: random initialization vector
    GCMParameterSpec params = new GCMParameterSpec(128, iv);
    Cipher cipher = Cipher.getInstance("AES/GCM/PKCS5PADDING");
    cipher.init(Cipher.ENCRYPT_MODE, key, params);
    ```

    ## References
    * Wikipedia: [Initialization vector](https://en.wikipedia.org/wiki/Initialization_vector).
    * National Institute of Standards and Technology: [Recommendation for Block Cipher Modes of Operation](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf).
    * National Institute of Standards and Technology: [FIPS 140-2: Security Requirements for Cryptographic Modules](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.140-2.pdf).
    * Common Weakness Enumeration: [CWE-329](https://cwe.mitre.org/data/definitions/329.html).
    * Common Weakness Enumeration: [CWE-1204](https://cwe.mitre.org/data/definitions/1204.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-134/ExternallyControlledFormatString.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-134/ExternallyControlledFormatString.bqrs
  metadata:
    name: Use of externally-controlled format string
    description: Using external input in format strings can lead to exceptions or
      information leaks.
    kind: path-problem
    problem.severity: error
    security-severity: 7.3
    precision: high
    id: java/tainted-format-string
    tags: |-
      security
             external/cwe/cwe-134
  queryHelp: "# Use of externally-controlled format string\nThe `String.format` method\
    \ and related methods, like `PrintStream.printf` and `Formatter.format`, all accept\
    \ a format string that is used to format the trailing arguments to the format\
    \ call by providing inline format specifiers. If the format string contains unsanitized\
    \ input from an untrusted source, then that string may contain extra format specifiers\
    \ that cause an exception to be thrown or information to be leaked.\n\nThe Java\
    \ standard library implementation for the format methods throws an exception if\
    \ either the format specifier does not match the type of the argument, or if there\
    \ are too few or too many arguments. If unsanitized input is used in the format\
    \ string, it may contain invalid extra format specifiers which cause an exception\
    \ to be thrown.\n\nPositional format specifiers may be used to access an argument\
    \ to the format call by position. Unsanitized input in the format string may use\
    \ a positional format specifier to access information that was not intended to\
    \ be visible. For example, when formatting a Calendar instance we may intend to\
    \ print only the year, but a user-specified format string may include a specifier\
    \ to access the month and day.\n\n\n## Recommendation\nIf the argument passed\
    \ as a format string is meant to be a plain string rather than a format string,\
    \ then pass `%s` as the format string, and pass the original argument as the sole\
    \ trailing argument.\n\n\n## Example\nThe following program is meant to check\
    \ a card security code for a stored credit card:\n\n\n```java\npublic class ResponseSplitting\
    \ extends HttpServlet {\n  protected void doGet(HttpServletRequest request, HttpServletResponse\
    \ response)\n  throws ServletException, IOException {\n    Calendar expirationDate\
    \ = new GregorianCalendar(2017, GregorianCalendar.SEPTEMBER, 1);\n    // User\
    \ provided value\n    String cardSecurityCode = request.getParameter(\"cardSecurityCode\"\
    );\n    \n    if (notValid(cardSecurityCode)) {\n      \n      /*\n       * BAD:\
    \ user provided value is included in the format string.\n       * A malicious\
    \ user could provide an extra format specifier, which causes an\n       * exception\
    \ to be thrown. Or they could provide a %1$tm or %1$te format specifier to\n \
    \      * access the month or day of the expiration date.\n       */\n      System.out.format(cardSecurityCode\
    \ +\n                          \" is not the right value. Hint: the card expires\
    \ in %1$ty.\",\n                        expirationDate);\n      \n      // GOOD:\
    \ %s is used to include the user-provided cardSecurityCode in the output\n   \
    \   System.out.format(\"%s is not the right value. Hint: the card expires in %2$ty.\"\
    ,\n                        cardSecurityCode,\n                        expirationDate);\n\
    \    }\n\n  }\n}\n```\nHowever, in the first format call it uses the cardSecurityCode\
    \ provided by the user in a format string. If the user includes a format specifier\
    \ in the cardSecurityCode field, they may be able to cause an exception to be\
    \ thrown, or to be able to access extra information about the stored card expiration\
    \ date.\n\nThe second format call shows the correct approach. The user-provided\
    \ value is passed as an argument to the format call. This prevents any format\
    \ specifiers in the user provided value from being evaluated.\n\n\n## References\n\
    * SEI CERT Oracle Coding Standard for Java: [IDS06-J. Exclude unsanitized user\
    \ input from format strings](https://wiki.sei.cmu.edu/confluence/display/java/IDS06-J.+Exclude+unsanitized+user+input+from+format+strings).\n\
    * The Java Tutorials: [Formatting Numeric Print Output](https://docs.oracle.com/javase/tutorial/java/data/numberformat.html).\n\
    * Java API Specification: [Formatter](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Formatter.html).\n\
    * Common Weakness Enumeration: [CWE-134](https://cwe.mitre.org/data/definitions/134.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-200/SpringBootActuators.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-200/SpringBootActuators.bqrs
  metadata:
    name: Exposed Spring Boot actuators
    description: |-
      Exposing Spring Boot actuators may lead to information leak from the internal application,
                    or even to remote code execution.
    kind: problem
    problem.severity: error
    security-severity: 6.5
    precision: high
    id: java/spring-boot-exposed-actuators
    tags: |-
      security
             external/cwe/cwe-200
  queryHelp: |
    # Exposed Spring Boot actuators
    Spring Boot includes features called actuators that let you monitor and interact with your web application. Exposing unprotected actuator endpoints can lead to information disclosure or even to remote code execution.


    ## Recommendation
    Since actuator endpoints may contain sensitive information, carefully consider when to expose them, and secure them as you would any sensitive URL. Actuators are secured by default when using Spring Security without a custom configuration. If you wish to define a custom security configuration, consider only allowing users with certain roles to access these endpoints.


    ## Example
    In the first example, the custom security configuration allows unauthenticated access to all actuator endpoints. This may lead to sensitive information disclosure and should be avoided.

    In the second example, only users with `ENDPOINT_ADMIN` role are allowed to access the actuator endpoints.


    ```java
    @Configuration(proxyBeanMethods = false)
    public class CustomSecurityConfiguration {

        @Bean
        public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
            // BAD: Unauthenticated access to Spring Boot actuator endpoints is allowed
            http.securityMatcher(EndpointRequest.toAnyEndpoint());
            http.authorizeHttpRequests((requests) -> requests.anyRequest().permitAll());
            return http.build();
        }

    }

    @Configuration(proxyBeanMethods = false)
    public class CustomSecurityConfiguration {

        @Bean
        public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
            // GOOD: only users with ENDPOINT_ADMIN role are allowed to access the actuator endpoints
            http.securityMatcher(EndpointRequest.toAnyEndpoint());
            http.authorizeHttpRequests((requests) -> requests.anyRequest().hasRole("ENDPOINT_ADMIN"));
            return http.build();
        }

    }

    ```

    ## References
    * Spring Boot Reference Documentation: [Endpoints](https://docs.spring.io/spring-boot/reference/actuator/endpoints.html).
    * Common Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-209/SensitiveDataExposureThroughErrorMessage.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-209/SensitiveDataExposureThroughErrorMessage.bqrs
  metadata:
    name: Information exposure through an error message
    description: |-
      Information from an error message propagates to an external user.
                    Error messages can unintentionally reveal implementation details
                    that are useful to an attacker for developing a subsequent exploit.
    kind: problem
    problem.severity: error
    security-severity: 5.4
    precision: high
    id: java/error-message-exposure
    tags: |-
      security
             external/cwe/cwe-209
  queryHelp: "# Information exposure through an error message\nThe error message at\
    \ the top of a stack trace can include information such as server-side file names\
    \ and SQL code that the application relies on, allowing an attacker to fine-tune\
    \ a subsequent injection attack.\n\n\n## Recommendation\nSend the user a more\
    \ generic error message that reveals less information. Either suppress the error\
    \ message entirely, or log it only on the server.\n\n\n## Example\nIn the following\
    \ example, an exception is handled in two different ways. In the first version,\
    \ labeled BAD, the exception is sent back to the remote user using the `getMessage()`\
    \ method. As such, the user is able to see a detailed error message, which may\
    \ contain sensitive information. In the second version, the error message is logged\
    \ only on the server. That way, the developers can still access and use the error\
    \ log, but remote users will not see the information.\n\n\n```java\nprotected\
    \ void doGet(HttpServletRequest request, HttpServletResponse response) {\n\ttry\
    \ {\n\t\tdoSomeWork();\n\t} catch (NullPointerException ex) {\n\t\t// BAD: printing\
    \ a exception message back to the response\n\t\tresponse.sendError(\n\t\t\tHttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n\
    \t\t\tex.getMessage());\n\t\treturn;\n\t}\n\n\ttry {\n\t\tdoSomeWork();\n\t} catch\
    \ (NullPointerException ex) {\n\t\t// GOOD: log the exception message, and send\
    \ back a non-revealing response\n\t\tlog(\"Exception occurred\", ex.getMessage);\n\
    \t\tresponse.sendError(\n\t\t\tHttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n\
    \t\t\t\"Exception occurred\");\n\t\treturn;\n\t}\n}\n\n```\n\n## References\n\
    * OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n\
    * CERT Java Coding Standard: [ERR01-J. Do not allow exceptions to expose sensitive\
    \ information](https://www.securecoding.cert.org/confluence/display/java/ERR01-J.+Do+not+allow+exceptions+to+expose+sensitive+information).\n\
    * Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-209/StackTraceExposure.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-209/StackTraceExposure.bqrs
  metadata:
    name: Information exposure through a stack trace
    description: |-
      Information from a stack trace propagates to an external user.
                    Stack traces can unintentionally reveal implementation details
                    that are useful to an attacker for developing a subsequent exploit.
    kind: problem
    problem.severity: error
    security-severity: 5.4
    precision: high
    id: java/stack-trace-exposure
    tags: |-
      security
             external/cwe/cwe-209
             external/cwe/cwe-497
  queryHelp: "# Information exposure through a stack trace\nSoftware developers often\
    \ add stack traces to error messages, as a debugging aid. Whenever that error\
    \ message occurs for an end user, the developer can use the stack trace to help\
    \ identify how to fix the problem. In particular, stack traces can tell the developer\
    \ more about the sequence of events that led to a failure, as opposed to merely\
    \ the final state of the software when the error occurred.\n\nUnfortunately, the\
    \ same information can be useful to an attacker. The sequence of class names in\
    \ a stack trace can reveal the structure of the application as well as any internal\
    \ components it relies on.\n\n\n## Recommendation\nSend the user a more generic\
    \ error message that reveals less information. Either suppress the stack trace\
    \ entirely, or log it only on the server.\n\n\n## Example\nIn the following example,\
    \ an exception is handled in two different ways. In the first version, labeled\
    \ BAD, the exception is sent back to the remote user using the `sendError()` method.\
    \ As such, the user is able to see a detailed stack trace, which may contain sensitive\
    \ information. In the second version, the error message is logged only on the\
    \ server. That way, the developers can still access and use the error log, but\
    \ remote users will not see the information.\n\n\n```java\nprotected void doGet(HttpServletRequest\
    \ request, HttpServletResponse response) {\n\ttry {\n\t\tdoSomeWork();\n\t} catch\
    \ (NullPointerException ex) {\n\t\t// BAD: printing a stack trace back to the\
    \ response\n\t\tex.printStackTrace(response.getWriter());\n\t\treturn;\n\t}\n\n\
    \ttry {\n\t\tdoSomeWork();\n\t} catch (NullPointerException ex) {\n\t\t// GOOD:\
    \ log the stack trace, and send back a non-revealing response\n\t\tlog(\"Exception\
    \ occurred\", ex);\n\t\tresponse.sendError(\n\t\t\tHttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n\
    \t\t\t\"Exception occurred\");\n\t\treturn;\n\t}\n}\n\n```\n\n## References\n\
    * OWASP: [Improper Error Handling](https://owasp.org/www-community/Improper_Error_Handling).\n\
    * CERT Java Coding Standard: [ERR01-J. Do not allow exceptions to expose sensitive\
    \ information](https://www.securecoding.cert.org/confluence/display/java/ERR01-J.+Do+not+allow+exceptions+to+expose+sensitive+information).\n\
    * Common Weakness Enumeration: [CWE-209](https://cwe.mitre.org/data/definitions/209.html).\n\
    * Common Weakness Enumeration: [CWE-497](https://cwe.mitre.org/data/definitions/497.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-266/IntentUriPermissionManipulation.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-266/IntentUriPermissionManipulation.bqrs
  metadata:
    name: Intent URI permission manipulation
    description: |-
      Returning an externally provided Intent via 'setResult' may allow a malicious
                    application to access arbitrary content providers of the vulnerable application.
    kind: path-problem
    problem.severity: error
    security-severity: 7.8
    precision: high
    id: java/android/intent-uri-permission-manipulation
    tags: |-
      security
             external/cwe/cwe-266
             external/cwe/cwe-926
  queryHelp: |
    # Intent URI permission manipulation
    When an Android component expects a result from an Activity, `startActivityForResult` can be used. The started Activity can then use `setResult` to return the appropriate data to the calling component.

    If an Activity obtains the incoming, user-provided Intent and directly returns it via `setResult` without any checks, the application may be unintentionally giving arbitrary access to its content providers, even if they are not exported, as long as they are configured with the attribute `android:grantUriPermissions="true"`. This happens because the attacker adds the appropriate URI permission flags to the provided Intent, which take effect once the Intent is reflected back.


    ## Recommendation
    Avoid returning user-provided or untrusted Intents via `setResult`. Use a new Intent instead.

    If it is required to use the received Intent, make sure that it does not contain URI permission flags, either by checking them with `Intent.getFlags` or removing them with `Intent.removeFlags`.


    ## Example
    The following sample contains three examples. In the first example, a user-provided Intent is obtained and directly returned back with `setResult`, which is dangerous. In the second example, a new Intent is created to safely return the desired data. The third example shows how the obtained Intent can be sanitized by removing dangerous flags before using it to return data to the calling component.


    ```java
    public class IntentUriPermissionManipulation extends Activity {

        // BAD: the user-provided Intent is returned as-is
        public void dangerous() {
            Intent intent = getIntent();
            intent.putExtra("result", "resultData");
            setResult(intent);
        }

        // GOOD: a new Intent is created and returned
        public void safe() {
            Intent intent = new Intent();
            intent.putExtra("result", "resultData");
            setResult(intent);
        }

        // GOOD: the user-provided Intent is sanitized before being returned
        public void sanitized() {
            Intent intent = getIntent();
            intent.putExtra("result", "resultData");
            intent.removeFlags(
                    Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_READ_URI_PERMISSION);
            setResult(intent);
        }
    }

    ```

    ## References
    * Google Help: [Remediation for Intent Redirection Vulnerability](https://support.google.com/faqs/answer/9267555?hl=en).
    * Common Weakness Enumeration: [CWE-266](https://cwe.mitre.org/data/definitions/266.html).
    * Common Weakness Enumeration: [CWE-926](https://cwe.mitre.org/data/definitions/926.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-287/AndroidInsecureLocalAuthentication.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-287/AndroidInsecureLocalAuthentication.bqrs
  metadata:
    name: Insecure local authentication
    description: Local authentication that does not make use of a `CryptoObject` can
      be bypassed.
    kind: problem
    problem.severity: warning
    security-severity: 4.4
    precision: high
    id: java/android/insecure-local-authentication
    tags: |-
      security
             external/cwe/cwe-287
  queryHelp: |
    # Insecure local authentication
    Biometric local authentication such as fingerprint recognition can be used to protect sensitive data or actions within an application. However, if this authentication does not use a `KeyStore`-backed key, it can be bypassed by a privileged malicious application, or by an attacker with physical access using application hooking tools such as Frida.


    ## Recommendation
    Generate a secure key in the Android `KeyStore`. Ensure that the `onAuthenticationSuccess` callback for a biometric prompt uses it in a way that is required for the sensitive parts of the application to function, such as by using it to decrypt sensitive data or credentials.


    ## Example
    In the following (bad) case, no `CryptoObject` is required for the biometric prompt to grant access, so it can be bypassed.


    ```java
    biometricPrompt.authenticate(
        cancellationSignal,
        executor,
        new BiometricPrompt.AuthenticationCallback {
            @Override
            // BAD: This authentication callback does not make use of a `CryptoObject` from the `result`.
            public void onAuthenticationSucceeded(BiometricPrompt.AuthenticationResult result) {
                grantAccess()
            }
        }
    )
    ```
    In the following (good) case, a secret key is generated in the Android `KeyStore`. The application requires this secret key for access, using it to decrypt data.


    ```java
    private void generateSecretKey() {
        KeyGenParameterSpec keyGenParameterSpec = new KeyGenParameterSpec.Builder(
            "MySecretKey",
            KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
            .setBlockModes(KeyProperties.BLOCK_MODE_CBC)
            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)
            .setUserAuthenticationRequired(true)
            .setInvalidatedByBiometricEnrollment(true)
            .build();
        KeyGenerator keyGenerator = KeyGenerator.getInstance(
                KeyProperties.KEY_ALGORITHM_AES, "AndroidKeyStore");
        keyGenerator.init(keyGenParameterSpec);
        keyGenerator.generateKey();
    }


    private SecretKey getSecretKey() {
        KeyStore keyStore = KeyStore.getInstance("AndroidKeyStore");
        keyStore.load(null);
        return ((SecretKey)keyStore.getKey("MySecretKey", null));
    }

    private Cipher getCipher() {
        return Cipher.getInstance(KeyProperties.KEY_ALGORITHM_AES + "/"
                + KeyProperties.BLOCK_MODE_CBC + "/"
                + KeyProperties.ENCRYPTION_PADDING_PKCS7);
    }

    public prompt(byte[] encryptedData) {
        Cipher cipher = getCipher();
        SecretKey secretKey = getSecretKey();
        cipher.init(Cipher.DECRYPT_MODE, secretKey);

        biometricPrompt.authenticate(
            new BiometricPrompt.CryptoObject(cipher),
            cancellationSignal,
            executor,
            new BiometricPrompt.AuthenticationCallback() {
                @Override
                // GOOD: This authentication callback uses the result to decrypt some data.
                public void onAuthenticationSucceeded(BiometricPrompt.AuthenticationResult result) {
                    Cipher cipher = result.getCryptoObject().getCipher();
                    byte[] decryptedData = cipher.doFinal(encryptedData);
                    grantAccessWithData(decryptedData);
                }
            }
        );
    }
    ```

    ## References
    * OWASP Mobile Application Security: [Android Local Authentication](https://mas.owasp.org/MASTG/Android/0x05f-Testing-Local-Authentication/)
    * OWASP Mobile Application Security: [Testing Biometric Authentication](https://mas.owasp.org/MASTG/tests/android/MASVS-AUTH/MASTG-TEST-0018/)
    * WithSecure: [How Secure is your Android Keystore Authentication?](https://labs.withsecure.com/publications/how-secure-is-your-android-keystore-authentication)
    * Android Developers: [Biometric Authentication](https://developer.android.com/training/sign-in/biometric-auth)
    * Common Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-295/ImproperWebViewCertificateValidation.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-295/ImproperWebViewCertificateValidation.bqrs
  metadata:
    name: Android `WebView` that accepts all certificates
    description: Trusting all certificates allows an attacker to perform a machine-in-the-middle
      attack.
    kind: problem
    problem.severity: error
    security-severity: 7.5
    precision: high
    id: java/improper-webview-certificate-validation
    tags: |-
      security
             external/cwe/cwe-295
  queryHelp: "# Android `WebView` that accepts all certificates\nIf the `onReceivedSslError`\
    \ method of an Android `WebViewClient` always calls `proceed` on the given `SslErrorHandler`,\
    \ it trusts any certificate. This allows an attacker to perform a machine-in-the-middle\
    \ attack against the application, therefore breaking any security Transport Layer\
    \ Security (TLS) gives.\n\nAn attack might look like this:\n\n1. The vulnerable\
    \ application connects to `https://example.com`.\n1. The attacker intercepts this\
    \ connection and presents a valid, self-signed certificate for `https://example.com`.\n\
    1. The vulnerable application calls the `onReceivedSslError` method to check whether\
    \ it should trust the certificate.\n1. The `onReceivedSslError` method of your\
    \ `WebViewClient` calls `SslErrorHandler.proceed`.\n1. The vulnerable application\
    \ accepts the certificate and proceeds with the connection since your `WevViewClient`\
    \ trusted it by proceeding.\n1. The attacker can now read the data your application\
    \ sends to `https://example.com` and/or alter its replies while the application\
    \ thinks the connection is secure.\n\n## Recommendation\nDo not use a call `SslerrorHandler.proceed`\
    \ unconditionally. If you have to use a self-signed certificate, only accept that\
    \ certificate, not all certificates.\n\n\n## Example\nIn the first (bad) example,\
    \ the `WebViewClient` trusts all certificates by always calling `SslErrorHandler.proceed`.\
    \ In the second (good) example, only certificates signed by a certain public key\
    \ are accepted.\n\n\n```java\nclass Bad extends WebViewClient {\n    // BAD: All\
    \ certificates are trusted.\n    public void onReceivedSslError (WebView view,\
    \ SslErrorHandler handler, SslError error) { // $hasResult\n        handler.proceed();\
    \ \n    }\n}\n\nclass Good extends WebViewClient {\n    PublicKey myPubKey = ...;\n\
    \n    // GOOD: Only certificates signed by a certain public key are trusted.\n\
    \    public void onReceivedSslError (WebView view, SslErrorHandler handler, SslError\
    \ error) { // $hasResult\n        try {\n            X509Certificate cert = error.getCertificate().getX509Certificate();\n\
    \            cert.verify(this.myPubKey);\n            handler.proceed();\n   \
    \     }\n        catch (CertificateException|NoSuchAlgorithmException|InvalidKeyException|NoSuchProviderException|SignatureException\
    \ e) {\n            handler.cancel();\n        }\n    }    \n}\n```\n\n## References\n\
    * [WebViewClient.onReceivedSslError documentation](https://developer.android.com/reference/android/webkit/WebViewClient?hl=en#onReceivedSslError(android.webkit.WebView,%20android.webkit.SslErrorHandler,%20android.net.http.SslError)).\n\
    * Common Weakness Enumeration: [CWE-295](https://cwe.mitre.org/data/definitions/295.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-295/InsecureTrustManager.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-295/InsecureTrustManager.bqrs
  metadata:
    name: '`TrustManager` that accepts all certificates'
    description: Trusting all certificates allows an attacker to perform a machine-in-the-middle
      attack.
    kind: path-problem
    problem.severity: error
    security-severity: 7.5
    precision: high
    id: java/insecure-trustmanager
    tags: |-
      security
             external/cwe/cwe-295
  queryHelp: "# `TrustManager` that accepts all certificates\nIf the `checkServerTrusted`\
    \ method of a `TrustManager` never throws a `CertificateException`, it trusts\
    \ every certificate. This allows an attacker to perform a machine-in-the-middle\
    \ attack against the application, therefore breaking any security Transport Layer\
    \ Security (TLS) gives.\n\nAn attack might look like this:\n\n1. The vulnerable\
    \ program connects to `https://example.com`.\n1. The attacker intercepts this\
    \ connection and presents a valid, self-signed certificate for `https://example.com`.\n\
    1. The vulnerable program calls the `checkServerTrusted` method to check whether\
    \ it should trust the certificate.\n1. The `checkServerTrusted` method of your\
    \ `TrustManager` does not throw a `CertificateException`.\n1. The vulnerable program\
    \ accepts the certificate and proceeds with the connection since your `TrustManager`\
    \ implicitly trusted it by not throwing an exception.\n1. The attacker can now\
    \ read the data your program sends to `https://example.com` and/or alter its replies\
    \ while the program thinks the connection is secure.\n\n## Recommendation\nDo\
    \ not use a custom `TrustManager` that trusts any certificate. If you have to\
    \ use a self-signed certificate, don't trust every certificate, but instead only\
    \ trust this specific certificate. See below for an example of how to do this.\n\
    \n\n## Example\nIn the first (bad) example, the `TrustManager` never throws a\
    \ `CertificateException` and therefore implicitly trusts any certificate. This\
    \ allows an attacker to perform a machine-in-the-middle attack. In the second\
    \ (good) example, the self-signed certificate that should be trusted is loaded\
    \ into a `KeyStore`. This explicitly defines the certificate as trusted and there\
    \ is no need to create a custom `TrustManager`.\n\n\n```java\npublic static void\
    \ main(String[] args) throws Exception {\n    {\n        class InsecureTrustManager\
    \ implements X509TrustManager {\n            @Override\n            public X509Certificate[]\
    \ getAcceptedIssuers() {\n                return null;\n            }\n\n    \
    \        @Override\n            public void checkServerTrusted(X509Certificate[]\
    \ chain, String authType) throws CertificateException {\n                // BAD:\
    \ Does not verify the certificate chain, allowing any certificate.\n         \
    \   }\n\n            @Override\n            public void checkClientTrusted(X509Certificate[]\
    \ chain, String authType) throws CertificateException {\n\n            }\n   \
    \     }\n        SSLContext context = SSLContext.getInstance(\"TLS\");\n     \
    \   TrustManager[] trustManager = new TrustManager[] { new InsecureTrustManager()\
    \ };\n        context.init(null, trustManager, null);\n    }\n    {\n        SSLContext\
    \ context = SSLContext.getInstance(\"TLS\");\n        File certificateFile = new\
    \ File(\"path/to/self-signed-certificate\");\n        // Create a `KeyStore` with\
    \ default type\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n\
    \        // `keyStore` is initially empty\n        keyStore.load(null, null);\n\
    \        X509Certificate generatedCertificate;\n        try (InputStream cert\
    \ = new FileInputStream(certificateFile)) {\n            generatedCertificate\
    \ = (X509Certificate) CertificateFactory.getInstance(\"X509\")\n             \
    \       .generateCertificate(cert);\n        }\n        // Add the self-signed\
    \ certificate to the key store\n        keyStore.setCertificateEntry(certificateFile.getName(),\
    \ generatedCertificate);\n        // Get default `TrustManagerFactory`\n     \
    \   TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n\
    \        // Use it with our key store that trusts our self-signed certificate\n\
    \        tmf.init(keyStore);\n        TrustManager[] trustManagers = tmf.getTrustManagers();\n\
    \        context.init(null, trustManagers, null);\n        // GOOD, we are not\
    \ using a custom `TrustManager` but instead have\n        // added the self-signed\
    \ certificate we want to trust to the key\n        // store. Note, the `trustManagers`\
    \ will **only** trust this one\n        // certificate.\n        \n        URL\
    \ url = new URL(\"https://self-signed.badssl.com/\");\n        HttpsURLConnection\
    \ conn = (HttpsURLConnection) url.openConnection();\n        conn.setSSLSocketFactory(context.getSocketFactory());\n\
    \    }\n}\n\n```\n\n## References\n* Android Developers: [Security with HTTPS\
    \ and SSL](https://developer.android.com/training/articles/security-ssl).\n* Common\
    \ Weakness Enumeration: [CWE-295](https://cwe.mitre.org/data/definitions/295.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-297/UnsafeHostnameVerification.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-297/UnsafeHostnameVerification.bqrs
  metadata:
    name: Unsafe hostname verification
    description: Marking a certificate as valid for a host without checking the certificate
      hostname allows an attacker to perform a machine-in-the-middle attack.
    kind: path-problem
    problem.severity: error
    security-severity: 5.9
    precision: high
    id: java/unsafe-hostname-verification
    tags: |-
      security
             external/cwe/cwe-297
  queryHelp: "# Unsafe hostname verification\nIf a `HostnameVerifier` always returns\
    \ `true` it will not verify the hostname at all. This stops Transport Layer Security\
    \ (TLS) providing any security and allows an attacker to perform a man-in-the-middle\
    \ attack against the application.\n\nAn attack might look like this:\n\n1. The\
    \ program connects to `https://example.com`.\n1. The attacker intercepts this\
    \ connection and presents an apparently-valid certificate of their choosing.\n\
    1. The `TrustManager` of the program verifies that the certificate has been issued\
    \ by a trusted certificate authority.\n1. The Java HTTPS library checks whether\
    \ the certificate has been issued for the host `example.com`. This check fails\
    \ because the certificate has been issued for a domain controlled by the attacker,\
    \ for example: `malicious.domain`.\n1. The HTTPS library wants to reject the certificate\
    \ because the hostname does not match. Before doing this it checks whether a `HostnameVerifier`\
    \ exists.\n1. Your `HostnameVerifier` is called which returns `true` for any certificate\
    \ so also for this one.\n1. The program proceeds with the connection since your\
    \ `HostnameVerifier` accepted it.\n1. The attacker can now read the data your\
    \ program sends to `https://example.com` and/or alter its replies while the program\
    \ thinks the connection is secure.\n\n## Recommendation\nDo not use an open `HostnameVerifier`.\
    \ If you have a configuration problem with TLS/HTTPS, you should always solve\
    \ the configuration problem instead of using an open verifier.\n\n\n## Example\n\
    In the first (bad) example, the `HostnameVerifier` always returns `true`. This\
    \ allows an attacker to perform a man-in-the-middle attack, because any certificate\
    \ is accepted despite an incorrect hostname. In the second (good) example, the\
    \ `HostnameVerifier` only returns `true` when the certificate has been correctly\
    \ checked.\n\n\n```java\npublic static void main(String[] args) {\n\n\t{\n\t\t\
    HostnameVerifier verifier = new HostnameVerifier() {\n\t\t\t@Override\n\t\t\t\
    public boolean verify(String hostname, SSLSession session) {\n\t\t\t\treturn true;\
    \ // BAD: accept even if the hostname doesn't match\n\t\t\t}\n\t\t};\n\t\tHttpsURLConnection.setDefaultHostnameVerifier(verifier);\n\
    \t}\n\n\t{\n\t\tHostnameVerifier verifier = new HostnameVerifier() {\n\t\t\t@Override\n\
    \t\t\tpublic boolean verify(String hostname, SSLSession session) {\n\t\t\t\ttry\
    \ { // GOOD: verify the certificate\n\t\t\t\t\tCertificate[] certs = session.getPeerCertificates();\n\
    \t\t\t\t\tX509Certificate x509 = (X509Certificate) certs[0];\n\t\t\t\t\tcheck(new\
    \ String[]{host}, x509);\n\t\t\t\t\treturn true;\n\t\t\t\t} catch (SSLException\
    \ e) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tHttpsURLConnection.setDefaultHostnameVerifier(verifier);\n\
    \t}\n\n}\n```\n\n## References\n* Android developers: [Security with HTTPS and\
    \ SSL](https://developer.android.com/training/articles/security-ssl).\n* Terse\
    \ systems blog: [Fixing Hostname Verification](https://tersesystems.com/blog/2014/03/23/fixing-hostname-verification/).\n\
    * Common Weakness Enumeration: [CWE-297](https://cwe.mitre.org/data/definitions/297.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-312/CleartextStorageCookie.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-312/CleartextStorageCookie.bqrs
  metadata:
    name: Cleartext storage of sensitive information in cookie
    description: Storing sensitive information in cleartext can expose it to an attacker.
    kind: problem
    problem.severity: error
    security-severity: 5.0
    precision: high
    id: java/cleartext-storage-in-cookie
    tags: |-
      security
             external/cwe/cwe-315
  queryHelp: "# Cleartext storage of sensitive information in cookie\nSensitive information\
    \ that is stored unencrypted is accessible to an attacker who gains access to\
    \ the storage.\n\n\n## Recommendation\nEnsure that sensitive information is always\
    \ encrypted before being stored. It may be wise to encrypt information before\
    \ it is put into a heap data structure (such as `Java.util.Properties`) that may\
    \ be written to disk later. Objects that are serializable or marshallable should\
    \ also always contain encrypted information unless you are certain that they are\
    \ not ever going to be serialized.\n\nIn general, decrypt sensitive information\
    \ only at the point where it is necessary for it to be used in cleartext.\n\n\n\
    ## Example\nThe following example shows two ways of storing user credentials in\
    \ a cookie. In the 'BAD' case, the credentials are simply stored in cleartext.\
    \ In the 'GOOD' case, the credentials are hashed before storing them.\n\n\n```java\n\
    public static void main(String[] args) {\n\t{\n\t\tString data;\n\t\tPasswordAuthentication\
    \ credentials =\n\t\t\t\tnew PasswordAuthentication(\"user\", \"BP@ssw0rd\".toCharArray());\n\
    \t\tdata = credentials.getUserName() + \":\" + new String(credentials.getPassword());\n\
    \t\n\t\t// BAD: store data in a cookie in cleartext form\n\t\tresponse.addCookie(new\
    \ Cookie(\"auth\", data));\n\t}\n\t\n\t{\n\t\tString data;\n\t\tPasswordAuthentication\
    \ credentials =\n\t\t\t\tnew PasswordAuthentication(\"user\", \"GP@ssw0rd\".toCharArray());\n\
    \t\tString salt = \"ThisIsMySalt\";\n\t\tMessageDigest messageDigest = MessageDigest.getInstance(\"\
    SHA-512\");\n\t\tmessageDigest.reset();\n\t\tString credentialsToHash =\n\t\t\t\
    \tcredentials.getUserName() + \":\" + credentials.getPassword();\n\t\tbyte[] hashedCredsAsBytes\
    \ =\n\t\t\t\tmessageDigest.digest((salt+credentialsToHash).getBytes(\"UTF-8\"\
    ));\n\t\tdata = bytesToString(hashedCredsAsBytes);\n\t\t\n\t\t// GOOD: store data\
    \ in a cookie in encrypted form\n\t\tresponse.addCookie(new Cookie(\"auth\", data));\n\
    \t}\n}\n\n```\n\n## References\n* SEI CERT Oracle Coding Standard for Java: [SER03-J.\
    \ Do not serialize unencrypted, sensitive data](https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data).\n\
    * M. Dowd, J. McDonald and J. Schuhm, *The Art of Software Security Assessment*,\
    \ 1st Edition, Chapter 2 - 'Common Vulnerabilities of Encryption', p. 43. Addison\
    \ Wesley, 2006.\n* M. Howard and D. LeBlanc, *Writing Secure Code*, 2nd Edition,\
    \ Chapter 9 - 'Protecting Secret Data', p. 299. Microsoft, 2002.\n* Common Weakness\
    \ Enumeration: [CWE-315](https://cwe.mitre.org/data/definitions/315.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-326/InsufficientKeySize.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-326/InsufficientKeySize.bqrs
  metadata:
    name: Use of a cryptographic algorithm with insufficient key size
    description: |-
      Using cryptographic algorithms with too small a key size can
                    allow an attacker to compromise security.
    kind: path-problem
    problem.severity: warning
    security-severity: 7.5
    precision: high
    id: java/insufficient-key-size
    tags: |-
      security
             external/cwe/cwe-326
  queryHelp: |
    # Use of a cryptographic algorithm with insufficient key size
    Modern encryption relies on the computational infeasibility of breaking a cipher and decoding its message without the key. As computational power increases, the ability to break ciphers grows, and key sizes need to become larger as a result. Cryptographic algorithms that use too small of a key size are vulnerable to brute force attacks, which can reveal sensitive data.


    ## Recommendation
    Use a key of the recommended size or larger. The key size should be at least 128 bits for AES encryption, 256 bits for elliptic-curve cryptography (ECC), and 2048 bits for RSA, DSA, or DH encryption.


    ## Example
    The following code uses cryptographic algorithms with insufficient key sizes.


    ```java
        KeyPairGenerator keyPairGen1 = KeyPairGenerator.getInstance("RSA");
        keyPairGen1.initialize(1024); // BAD: Key size is less than 2048

        KeyPairGenerator keyPairGen2 = KeyPairGenerator.getInstance("DSA");
        keyPairGen2.initialize(1024); // BAD: Key size is less than 2048

        KeyPairGenerator keyPairGen3 = KeyPairGenerator.getInstance("DH");
        keyPairGen3.initialize(1024); // BAD: Key size is less than 2048

        KeyPairGenerator keyPairGen4 = KeyPairGenerator.getInstance("EC");
        ECGenParameterSpec ecSpec = new ECGenParameterSpec("secp112r1"); // BAD: Key size is less than 256
        keyPairGen4.initialize(ecSpec);

        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(64); // BAD: Key size is less than 128

    ```
    To fix the code, change the key sizes to be the recommended size or larger for each algorithm.


    ## References
    * Wikipedia: [Key size](http://en.wikipedia.org/wiki/Key_size).
    * Wikipedia: [Strong cryptography](https://en.wikipedia.org/wiki/Strong_cryptography).
    * OWASP: [ Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms).
    * OWASP: [ Testing for Weak Encryption](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption).
    * NIST: [ Transitioning the Use of Cryptographic Algorithms and Key Lengths](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf).
    * Common Weakness Enumeration: [CWE-326](https://cwe.mitre.org/data/definitions/326.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-327/BrokenCryptoAlgorithm.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-327/BrokenCryptoAlgorithm.bqrs
  metadata:
    name: Use of a broken or risky cryptographic algorithm
    description: Using broken or weak cryptographic algorithms can allow an attacker
      to compromise security.
    kind: path-problem
    problem.severity: warning
    security-severity: 7.5
    precision: high
    id: java/weak-cryptographic-algorithm
    tags: |-
      security
             external/cwe/cwe-327
             external/cwe/cwe-328
  queryHelp: "# Use of a broken or risky cryptographic algorithm\nUsing broken or\
    \ weak cryptographic algorithms can leave data vulnerable to being decrypted.\n\
    \nMany cryptographic algorithms provided by cryptography libraries are known to\
    \ be weak, or flawed. Using such an algorithm means that an attacker may be able\
    \ to easily decrypt the encrypted data.\n\n\n## Recommendation\nEnsure that you\
    \ use a strong, modern cryptographic algorithm. Use at least AES-128 or RSA-2048.\
    \ Do not use the ECB encryption mode since it is vulnerable to replay and other\
    \ attacks.\n\n\n## Example\nThe following code shows an example of using a java\
    \ `Cipher` to encrypt some data. When creating a `Cipher` instance, you must specify\
    \ the encryption algorithm to use. The first example uses DES, which is an older\
    \ algorithm that is now considered weak. The second example uses AES, which is\
    \ a strong modern algorithm.\n\n\n```java\n// BAD: DES is a weak algorithm \n\
    Cipher des = Cipher.getInstance(\"DES\");\ncipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n\
    \nbyte[] encrypted = cipher.doFinal(input.getBytes(\"UTF-8\"));\n\n// ...\n\n\
    // GOOD: AES is a strong algorithm\nCipher aes = Cipher.getInstance(\"AES\");\n\
    \n// ...\n\n```\n\n## References\n* NIST, FIPS 140 Annex a: [ Approved Security\
    \ Functions](http://csrc.nist.gov/publications/fips/fips140-2/fips1402annexa.pdf).\n\
    * NIST, SP 800-131A: [ Transitions: Recommendation for Transitioning the Use of\
    \ Cryptographic Algorithms and Key Lengths](http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf).\n\
    * Common Weakness Enumeration: [CWE-327](https://cwe.mitre.org/data/definitions/327.html).\n\
    * Common Weakness Enumeration: [CWE-328](https://cwe.mitre.org/data/definitions/328.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-330/InsecureRandomness.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-330/InsecureRandomness.bqrs
  metadata:
    name: Insecure randomness
    description: |-
      Using a cryptographically Insecure pseudo-random number generator to generate a
                    security-sensitive value may allow an attacker to predict what value will
                    be generated.
    kind: path-problem
    problem.severity: warning
    security-severity: 7.8
    precision: high
    id: java/insecure-randomness
    tags: |-
      security
            external/cwe/cwe-330
            external/cwe/cwe-338
  queryHelp: |
    # Insecure randomness
    If you use a cryptographically weak pseudo-random number generator to generate security-sensitive values, such as passwords, attackers can more easily predict those values.

    Pseudo-random number generators generate a sequence of numbers that only approximates the properties of random numbers. The sequence is not truly random because it is completely determined by a relatively small set of initial values (the seed). If the random number generator is cryptographically weak, then this sequence may be easily predictable through outside observations.


    ## Recommendation
    The `java.util.Random` random number generator is not cryptographically secure. Use a secure random number generator such as `java.security.SecureRandom` instead.

    Use a cryptographically secure pseudo-random number generator if the output is to be used in a security-sensitive context. As a general rule, a value should be considered "security-sensitive" if predicting it would allow the attacker to perform an action that they would otherwise be unable to perform. For example, if an attacker could predict the random password generated for a new user, they would be able to log in as that new user.


    ## Example
    The following examples show different ways of generating a cookie with a random value.

    In the first (BAD) case, we generate a fresh cookie by appending a random integer to the end of a static string. The random number generator used (`Random`) is not cryptographically secure, so it may be possible for an attacker to predict the generated cookie.


    ```java
    Random r = new Random(); // BAD: Random is not cryptographically secure

    byte[] bytes = new byte[16];
    r.nextBytes(bytes);

    String cookieValue = encode(bytes);

    Cookie cookie = new Cookie("name", cookieValue);
    response.addCookie(cookie);

    ```
    In the second (GOOD) case, we generate a fresh cookie by appending a random integer to the end of a static string. The random number generator used (`SecureRandom`) is cryptographically secure, so it is not possible for an attacker to predict the generated cookie.


    ```java
    SecureRandom r = new SecureRandom(); // GOOD: SecureRandom is cryptographically secure

    byte[] bytes = new byte[16];
    r.nextBytes(bytes);

    String cookieValue = encode(bytes);

    Cookie cookie = new Cookie("name", cookieValue);
    response.addCookie(cookie);

    ```

    ## References
    * Wikipedia: [Pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator).
    * Java Docs: [Random](http://docs.oracle.com/javase/8/docs/api/java/util/Random.html).
    * Java Docs: [SecureRandom](http://docs.oracle.com/javase/8/docs/api/java/security/SecureRandom.html).
    * Common Weakness Enumeration: [CWE-330](https://cwe.mitre.org/data/definitions/330.html).
    * Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-335/PredictableSeed.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-335/PredictableSeed.bqrs
  metadata:
    name: Use of a predictable seed in a secure random number generator
    description: Using a predictable seed in a pseudo-random number generator can
      lead to predictability of the numbers generated by it.
    kind: problem
    problem.severity: error
    security-severity: 9.8
    precision: high
    id: java/predictable-seed
    tags: |-
      security
             external/cwe/cwe-335
             external/cwe/cwe-337
  queryHelp: |
    # Use of a predictable seed in a secure random number generator
    Using a predictable seed in a pseudo-random number generator can lead to predictability of the numbers generated by it.


    ## Recommendation
    If the predictability of the pseudo-random number generator does not matter then consider using the faster `Random` class from `java.util`. If it is important that the pseudo-random number generator produces completely unpredictable values then either let the generator securely seed itself by not specifying a seed or specify a randomly generated, unpredictable seed.


    ## Example
    In the first example shown here, a constant value is used as a seed. Depending on the implementation of ` SecureRandom`, this could lead to the same random number being generated each time the code is executed.

    In the second example shown here, the system time is used as a seed. Depending on the implementation of ` SecureRandom`, if an attacker knows what time the code was run, they could predict the generated random number.

    In the third example shown here, the random number generator is allowed to generate its own seed, which it will do in a secure way.


    ```java
    SecureRandom prng = new SecureRandom();
    int randomData = 0;

    // BAD: Using a constant value as a seed for a random number generator means all numbers it generates are predictable.
    prng.setSeed(12345L);
    randomData = prng.next(32);

    // BAD: System.currentTimeMillis() returns the system time which is predictable.
    prng.setSeed(System.currentTimeMillis());
    randomData = prng.next(32);

    // GOOD: SecureRandom implementations seed themselves securely by default.
    prng = new SecureRandom();
    randomData = prng.next(32);

    ```

    ## References
    * Common Weakness Enumeration: [CWE-335](https://cwe.mitre.org/data/definitions/335.html).
    * Common Weakness Enumeration: [CWE-337](https://cwe.mitre.org/data/definitions/337.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-338/JHipsterGeneratedPRNG.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-338/JHipsterGeneratedPRNG.bqrs
  metadata:
    name: Detect JHipster Generator Vulnerability CVE-2019-16303
    description: Using a vulnerable version of JHipster to generate random numbers
      makes it easier for attackers to take over accounts.
    kind: problem
    problem.severity: error
    security-severity: 7.8
    precision: very-high
    id: java/jhipster-prng
    tags: |-
      security
             external/cwe/cwe-338
  queryHelp: |
    # Detect JHipster Generator Vulnerability CVE-2019-16303
    This query detects instances of `RandomUtil.java` that were generated by a [JHipster](https://www.jhipster.tech/) version that is vulnerable to [CVE-2019-16303](https://github.com/jhipster/jhipster-kotlin/security/advisories/GHSA-j3rh-8vwq-wh84).

    If an app uses `RandomUtil.java` generated by a vulnerable version of JHipster, attackers can request a password reset token and use this to predict the value of future reset tokens generated by this server. Using this information, they can create a reset link that allows them to take over any account.

    This vulnerability has a [ CVSS v3.0 Base Score of 9.8/10 ](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?name=CVE-2019-16303&vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H&version=3.1&source=NIST).


    ## Example
    The example below shows the vulnerable `RandomUtil` class generated by [JHipster prior to version 6.3.0](https://www.jhipster.tech/2019/09/13/jhipster-release-6.3.0.html).


    ```java
    import org.apache.commons.lang3.RandomStringUtils;

    /**
     * Utility class for generating random Strings.
     */
    public final class RandomUtil {

        private static final int DEF_COUNT = 20;

        private RandomUtil() {
        }

        /**
         * Generate a password.
         *
         * @return the generated password.
         */
        public static String generatePassword() {
            return RandomStringUtils.randomAlphanumeric(DEF_COUNT); // BAD: RandomStringUtils does not use SecureRandom
        }

        /**
         * Generate an activation key.
         *
         * @return the generated activation key.
         */
        public static String generateActivationKey() {
            return RandomStringUtils.randomNumeric(DEF_COUNT); // BAD: RandomStringUtils does not use SecureRandom
        }

        /**
         * Generate a reset key.
         *
         * @return the generated reset key.
         */
        public static String generateResetKey() {
            return RandomStringUtils.randomNumeric(DEF_COUNT); // BAD: RandomStringUtils does not use SecureRandom
        }

        /**
         * Generate a unique series to validate a persistent token, used in the
         * authentication remember-me mechanism.
         *
         * @return the generated series data.
         */
        public static String generateSeriesData() {
            return RandomStringUtils.randomAlphanumeric(DEF_COUNT); // BAD: RandomStringUtils does not use SecureRandom
        }

        /**
         * Generate a persistent token, used in the authentication remember-me mechanism.
         *
         * @return the generated token data.
         */
        public static String generateTokenData() {
            return RandomStringUtils.randomAlphanumeric(DEF_COUNT); // BAD: RandomStringUtils does not use SecureRandom
        }
    }

    ```
    Below is a fixed version of the `RandomUtil` class.


    ```java
    import org.apache.commons.lang3.RandomStringUtils;

    import java.security.SecureRandom;

    /**
     * Utility class for generating random Strings.
     */
    public final class RandomUtil {
        private static final SecureRandom SECURE_RANDOM = new SecureRandom(); // GOOD: Using SecureRandom

        private static final int DEF_COUNT = 20;

        static {
            SECURE_RANDOM.nextBytes(new byte[64]);
        }

        private RandomUtil() {
        }

        private static String generateRandomAlphanumericString() {
            // GOOD: Passing Secure Random to RandomStringUtils::random
            return RandomStringUtils.random(DEF_COUNT, 0, 0, true, true, null, SECURE_RANDOM);
        }

        /**
         * Generate a password.
         *
         * @return the generated password.
         */
        public static String generatePassword() {
            return generateRandomAlphanumericString();
        }

        /**
         * Generate an activation key.
         *
         * @return the generated activation key.
         */
        public static String generateActivationKey() {
            return generateRandomAlphanumericString();
        }

        /**
         * Generate a reset key.
         *
         * @return the generated reset key.
         */
        public static String generateResetKey() {
            return generateRandomAlphanumericString();
        }

        /**
         * Generate a unique series to validate a persistent token, used in the
         * authentication remember-me mechanism.
         *
         * @return the generated series data.
         */
        public static String generateSeriesData() {
            return generateRandomAlphanumericString();
        }

        /**
         * Generate a persistent token, used in the authentication remember-me mechanism.
         *
         * @return the generated token data.
         */
        public static String generateTokenData() {
            return generateRandomAlphanumericString();
        }
    }

    ```

    ## Recommendation
    You should refactor the `RandomUtil` class and replace every call to `RandomStringUtils.randomAlphaNumeric`. You could regenerate the class using the latest version of JHipster, or use an automated refactoring. For example, using the [Patching JHipster CWE-338](https://github.com/moderneinc/jhipster-cwe-338) for the [Rewrite project](https://github.com/openrewrite/rewrite).


    ## References
    * Cloudflare Blog: [ Why secure systems require random numbers ](https://blog.cloudflare.com/why-randomness-matters/)
    * Hacker News: [ How I Hacked Hacker News (with arc security advisory) ](https://news.ycombinator.com/item?id=639976)
    * Posts by Pucara Information Security Team: [ The Java Soothsayer: A practical application for insecure randomness. (Includes free 0day) ](https://blog.pucarasec.com/2020/05/09/the-java-soothsayer-a-practical-application-for-insecure-randomness-includes-free-0day/)
    * Common Weakness Enumeration: [CWE-338](https://cwe.mitre.org/data/definitions/338.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-347/MissingJWTSignatureCheck.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-347/MissingJWTSignatureCheck.bqrs
  metadata:
    name: Missing JWT signature check
    description: Failing to check the Json Web Token (JWT) signature may allow an
      attacker to forge their own tokens.
    kind: path-problem
    problem.severity: error
    security-severity: 7.8
    precision: high
    id: java/missing-jwt-signature-check
    tags: |-
      security
             external/cwe/cwe-347
  queryHelp: |
    # Missing JWT signature check
    A JSON Web Token (JWT) consists of three parts: header, payload, and signature. The `io.jsonwebtoken.jjwt` library is one of many libraries used for working with JWTs. It offers different methods for parsing tokens like `parse`, `parseClaimsJws`, and `parsePlaintextJws`. The last two correctly verify that the JWT is properly signed. This is done by computing the signature of the combination of header and payload and comparing the locally computed signature with the signature part of the JWT.

    Therefore it is necessary to provide the `JwtParser` with a key that is used for signature validation. Unfortunately the `parse` method **accepts** a JWT whose signature is empty although a signing key has been set for the parser. This means that an attacker can create arbitrary JWTs that will be accepted if this method is used.


    ## Recommendation
    Always verify the signature by using either the `parseClaimsJws` and `parsePlaintextJws` methods or by overriding the `onPlaintextJws` or `onClaimsJws` of `JwtHandlerAdapter`.


    ## Example
    The following example shows four cases where a signing key is set for a parser. In the first 'BAD' case the `parse` method is used, which will not validate the signature. The second 'BAD' case uses a `JwtHandlerAdapter` where the `onPlaintextJwt` method is overriden, so it will not validate the signature. The third and fourth 'GOOD' cases use `parseClaimsJws` method or override the `onPlaintextJws` method.


    ```java
    public void badJwt(String token) {
        Jwts.parserBuilder()
                    .setSigningKey("someBase64EncodedKey").build()
                    .parse(token); // BAD: Does not verify the signature
    }

    public void badJwtHandler(String token) {
        Jwts.parserBuilder()
                    .setSigningKey("someBase64EncodedKey").build()
                    .parse(plaintextJwt, new JwtHandlerAdapter<Jwt<Header, String>>() {
                        @Override
                        public Jwt<Header, String> onPlaintextJwt(Jwt<Header, String> jwt) {
                            return jwt;
                        }
                    }); // BAD: The handler is called on an unverified JWT
    }

    public void goodJwt(String token) {
        Jwts.parserBuilder()
                    .setSigningKey("someBase64EncodedKey").build()
                    .parseClaimsJws(token) // GOOD: Verify the signature
                    .getBody();
    }

    public void goodJwtHandler(String token) {
        Jwts.parserBuilder()
                    .setSigningKey("someBase64EncodedKey").build()
                    .parse(plaintextJwt, new JwtHandlerAdapter<Jws<String>>() {
                        @Override
                        public Jws<String> onPlaintextJws(Jws<String> jws) {
                            return jws;
                        }
                    }); // GOOD: The handler is called on a verified JWS
    }
    ```

    ## References
    * zofrex: [How I Found An alg=none JWT Vulnerability in the NHS Contact Tracing App](https://www.zofrex.com/blog/2020/10/20/alg-none-jwt-nhs-contact-tracing-app/).
    * Common Weakness Enumeration: [CWE-347](https://cwe.mitre.org/data/definitions/347.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-352/SpringCSRFProtection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-352/SpringCSRFProtection.bqrs
  metadata:
    name: Disabled Spring CSRF protection
    description: |-
      Disabling CSRF protection makes the application vulnerable to
                    a Cross-Site Request Forgery (CSRF) attack.
    kind: problem
    problem.severity: error
    security-severity: 8.8
    precision: high
    id: java/spring-disabled-csrf-protection
    tags: |-
      security
             external/cwe/cwe-352
  queryHelp: "# Disabled Spring CSRF protection\nCross-site request forgery (CSRF)\
    \ is a type of vulnerability in which an attacker is able to force a user to carry\
    \ out an action that the user did not intend.\n\nThe attacker tricks an authenticated\
    \ user into submitting a request to the web application. Typically, this request\
    \ will result in a state change on the server, such as changing the user's password.\
    \ The request can be initiated when the user visits a site controlled by the attacker.\
    \ If the web application relies only on cookies for authentication, or on other\
    \ credentials that are automatically included in the request, then this request\
    \ will appear as legitimate to the server.\n\n\n## Recommendation\nWhen you use\
    \ Spring, Cross-Site Request Forgery (CSRF) protection is enabled by default.\
    \ Spring's recommendation is to use CSRF protection for any request that could\
    \ be processed by a browser client by normal users.\n\n\n## Example\nThe following\
    \ example shows the Spring Java configuration with CSRF protection disabled. This\
    \ type of configuration should only be used if you are creating a service that\
    \ is used only by non-browser clients.\n\n\n```java\nimport org.springframework.context.annotation.Configuration;\n\
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n\
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\
    \n@EnableWebSecurity\n@Configuration\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter\
    \ {\n  @Override\n  protected void configure(HttpSecurity http) throws Exception\
    \ {\n    http\n      .csrf(csrf ->\n        // BAD - CSRF protection shouldn't\
    \ be disabled\n        csrf.disable() \n      );\n  }\n}\n\n```\n\n## References\n\
    * OWASP: [Cross Site Request Forgery (CSRF)](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)).\n\
    * Spring Security Reference: [ Cross Site Request Forgery (CSRF) ](https://docs.spring.io/spring-security/reference/servlet/exploits/csrf.html).\n\
    * Common Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-441/UnsafeContentUriResolution.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-441/UnsafeContentUriResolution.bqrs
  metadata:
    name: Uncontrolled data used in content resolution
    description: |-
      Resolving externally-provided content URIs without validation can allow an attacker
                    to access unexpected resources.
    kind: path-problem
    problem.severity: warning
    security-severity: 7.5
    precision: high
    id: java/android/unsafe-content-uri-resolution
    tags: |-
      security
           external/cwe/cwe-441
           external/cwe/cwe-610
  queryHelp: |
    # Uncontrolled data used in content resolution
    When an Android application wants to access data in a content provider, it uses the `ContentResolver` object. `ContentResolver`s communicate with an instance of a class that implements the `ContentProvider` interface via URIs with the `content://` scheme. The authority part (the first path segment) of the URI, passed as parameter to the `ContentResolver`, determines which content provider is contacted for the operation. Specific operations that act on files also support the `file://` scheme, in which case the local filesystem is queried instead. If an external component, like a malicious or compromised application, controls the URI for a `ContentResolver` operation, it can trick the vulnerable application into accessing its own private files or non-exported content providers. The attacking application might be able to get access to the file by forcing it to be copied to a public directory, like external storage, or tamper with the contents by making the application overwrite the file with unexpected data.


    ## Recommendation
    If possible, avoid using externally-provided data to determine the URI for a `ContentResolver` to use. If that is not an option, validate that the incoming URI can only reference trusted components, like an allow list of content providers and/or applications, or alternatively make sure that the URI does not reference private directories like `/data/`.


    ## Example
    This example shows three ways of opening a file using a `ContentResolver`. In the first case, externally-provided data from an intent is used directly in the file-reading operation. This allows an attacker to provide a URI of the form `/data/data/(vulnerable app package)/(private file)` to trick the application into reading it and copying it to the external storage. In the second case, an insufficient check is performed on the externally-provided URI, still leaving room for exploitation. In the third case, the URI is correctly validated before being used, making sure it does not reference any internal application files.


    ```java
    import android.content.ContentResolver;
    import android.net.Uri;

    public class Example extends Activity {
        public void onCreate() {
            // BAD: Externally-provided URI directly used in content resolution
            {
                ContentResolver contentResolver = getContentResolver();
                Uri uri = (Uri) getIntent().getParcelableExtra("URI_EXTRA");
                InputStream is = contentResolver.openInputStream(uri);
                copyToExternalCache(is);
            }
            // BAD: input URI is not normalized, and check can be bypassed with ".." characters
            {
                ContentResolver contentResolver = getContentResolver();
                Uri uri = (Uri) getIntent().getParcelableExtra("URI_EXTRA");
                String path = uri.getPath();
                if (path.startsWith("/data"))
                    throw new SecurityException();
                InputStream is = contentResolver.openInputStream(uri);
                copyToExternalCache(is);
            }
            // GOOD: URI is properly validated to block access to internal files
            {
                ContentResolver contentResolver = getContentResolver();
                Uri uri = (Uri) getIntent().getParcelableExtra("URI_EXTRA");
                String path = uri.getPath();
                java.nio.file.Path normalized =
                        java.nio.file.FileSystems.getDefault().getPath(path).normalize();
                if (normalized.startsWith("/data"))
                    throw new SecurityException();
                InputStream is = contentResolver.openInputStream(uri);
                copyToExternalCache(is);
            }
        }

        private void copyToExternalCache(InputStream is) {
            // Reads the contents of is and writes a file in the app's external
            // cache directory, which can be read publicly by applications in the same device.
        }
    }

    ```

    ## References
    * Android developers: [Content provider basics](https://developer.android.com/guide/topics/providers/content-provider-basics)
    * [The ContentResolver class](https://developer.android.com/reference/android/content/ContentResolver)
    * Common Weakness Enumeration: [CWE-441](https://cwe.mitre.org/data/definitions/441.html).
    * Common Weakness Enumeration: [CWE-610](https://cwe.mitre.org/data/definitions/610.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-470/FragmentInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-470/FragmentInjection.bqrs
  metadata:
    name: Android fragment injection
    description: |-
      Instantiating an Android fragment from a user-provided value
                    may allow a malicious application to bypass access controls,  exposing the application to unintended effects.
    kind: path-problem
    problem.severity: error
    security-severity: 9.8
    precision: high
    id: java/android/fragment-injection
    tags: |-
      security
             external/cwe/cwe-470
  queryHelp: |
    # Android fragment injection
    When fragments are instantiated with externally provided names, this exposes any exported activity that dynamically creates and hosts the fragment to fragment injection. A malicious application could provide the name of an arbitrary fragment, even one not designed to be externally accessible, and inject it into the activity. This can bypass access controls and expose the application to unintended effects.

    Fragments are reusable parts of an Android application's user interface. Even though a fragment controls its own lifecycle and layout, and handles its input events, it cannot exist on its own: it must be hosted either by an activity or another fragment. This means that, normally, a fragment will be accessible by third-party applications (that is, exported) only if its hosting activity is itself exported.


    ## Recommendation
    In general, do not instantiate classes (including fragments) with user-provided names unless the name has been properly validated. Also, if an exported activity is extending the `PreferenceActivity` class, make sure that the `isValidFragment` method is overriden and only returns `true` when the provided `fragmentName` points to an intended fragment.


    ## Example
    The following example shows two cases: in the first one, untrusted data is used to instantiate and add a fragment to an activity, while in the second one, a fragment is safely added with a static name.


    ```java
    public class MyActivity extends FragmentActivity {

        @Override
        protected void onCreate(Bundle savedInstance) {
            try {
                super.onCreate(savedInstance);
                // BAD: Fragment instantiated from user input without validation
                {
                    String fName = getIntent().getStringExtra("fragmentName");
                    getFragmentManager().beginTransaction().replace(com.android.internal.R.id.prefs,
                            Fragment.instantiate(this, fName, null)).commit();
                }
                // GOOD: Fragment instantiated statically
                {
                    getFragmentManager().beginTransaction()
                            .replace(com.android.internal.R.id.prefs, new MyFragment()).commit();
                }
            } catch (Exception e) {
            }
        }

    }

    ```
    The next example shows two activities that extend `PreferenceActivity`. The first activity overrides `isValidFragment`, but it wrongly returns `true` unconditionally. The second activity correctly overrides `isValidFragment` so that it only returns `true` when `fragmentName` is a trusted fragment name.


    ```java
    class UnsafeActivity extends PreferenceActivity {

        @Override
        protected boolean isValidFragment(String fragmentName) {
            // BAD: any Fragment name can be provided.
            return true;
        }
    }


    class SafeActivity extends PreferenceActivity {
        @Override
        protected boolean isValidFragment(String fragmentName) {
            // Good: only trusted Fragment names are allowed.
            return SafeFragment1.class.getName().equals(fragmentName)
                    || SafeFragment2.class.getName().equals(fragmentName)
                    || SafeFragment3.class.getName().equals(fragmentName);
        }

    }


    ```

    ## References
    * Google Help: [How to fix Fragment Injection vulnerability](https://support.google.com/faqs/answer/7188427?hl=en).
    * IBM Security Systems: [Android collapses into Fragments](https://securityintelligence.com/wp-content/uploads/2013/12/android-collapses-into-fragments.pdf).
    * Android Developers: [Fragments](https://developer.android.com/guide/fragments)
    * Common Weakness Enumeration: [CWE-470](https://cwe.mitre.org/data/definitions/470.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-470/FragmentInjectionInPreferenceActivity.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-470/FragmentInjectionInPreferenceActivity.bqrs
  metadata:
    name: Android fragment injection in PreferenceActivity
    description: |-
      An insecure implementation of the 'isValidFragment' method
                    of the 'PreferenceActivity' class may allow a malicious application to bypass access controls,
                    exposing the application to unintended effects.
    kind: problem
    problem.severity: error
    security-severity: 9.8
    precision: high
    id: java/android/fragment-injection-preference-activity
    tags: |-
      security
             external/cwe/cwe-470
  queryHelp: |
    # Android fragment injection in PreferenceActivity
    When fragments are instantiated with externally provided names, this exposes any exported activity that dynamically creates and hosts the fragment to fragment injection. A malicious application could provide the name of an arbitrary fragment, even one not designed to be externally accessible, and inject it into the activity. This can bypass access controls and expose the application to unintended effects.

    Fragments are reusable parts of an Android application's user interface. Even though a fragment controls its own lifecycle and layout, and handles its input events, it cannot exist on its own: it must be hosted either by an activity or another fragment. This means that, normally, a fragment will be accessible by third-party applications (that is, exported) only if its hosting activity is itself exported.


    ## Recommendation
    In general, do not instantiate classes (including fragments) with user-provided names unless the name has been properly validated. Also, if an exported activity is extending the `PreferenceActivity` class, make sure that the `isValidFragment` method is overriden and only returns `true` when the provided `fragmentName` points to an intended fragment.


    ## Example
    The following example shows two cases: in the first one, untrusted data is used to instantiate and add a fragment to an activity, while in the second one, a fragment is safely added with a static name.


    ```java
    public class MyActivity extends FragmentActivity {

        @Override
        protected void onCreate(Bundle savedInstance) {
            try {
                super.onCreate(savedInstance);
                // BAD: Fragment instantiated from user input without validation
                {
                    String fName = getIntent().getStringExtra("fragmentName");
                    getFragmentManager().beginTransaction().replace(com.android.internal.R.id.prefs,
                            Fragment.instantiate(this, fName, null)).commit();
                }
                // GOOD: Fragment instantiated statically
                {
                    getFragmentManager().beginTransaction()
                            .replace(com.android.internal.R.id.prefs, new MyFragment()).commit();
                }
            } catch (Exception e) {
            }
        }

    }

    ```
    The next example shows two activities that extend `PreferenceActivity`. The first activity overrides `isValidFragment`, but it wrongly returns `true` unconditionally. The second activity correctly overrides `isValidFragment` so that it only returns `true` when `fragmentName` is a trusted fragment name.


    ```java
    class UnsafeActivity extends PreferenceActivity {

        @Override
        protected boolean isValidFragment(String fragmentName) {
            // BAD: any Fragment name can be provided.
            return true;
        }
    }


    class SafeActivity extends PreferenceActivity {
        @Override
        protected boolean isValidFragment(String fragmentName) {
            // Good: only trusted Fragment names are allowed.
            return SafeFragment1.class.getName().equals(fragmentName)
                    || SafeFragment2.class.getName().equals(fragmentName)
                    || SafeFragment3.class.getName().equals(fragmentName);
        }

    }


    ```

    ## References
    * Google Help: [How to fix Fragment Injection vulnerability](https://support.google.com/faqs/answer/7188427?hl=en).
    * IBM Security Systems: [Android collapses into Fragments](https://securityintelligence.com/wp-content/uploads/2013/12/android-collapses-into-fragments.pdf).
    * Android Developers: [Fragments](https://developer.android.com/guide/fragments)
    * Common Weakness Enumeration: [CWE-470](https://cwe.mitre.org/data/definitions/470.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-489/DebuggableAttributeEnabled.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-489/DebuggableAttributeEnabled.bqrs
  metadata:
    name: Android debuggable attribute enabled
    description: An enabled debugger can allow for entry points in the application
      or reveal sensitive information.
    kind: problem
    problem.severity: warning
    security-severity: 7.2
    id: java/android/debuggable-attribute-enabled
    tags: |-
      security
             external/cwe/cwe-489
    precision: very-high
  queryHelp: |
    # Android debuggable attribute enabled
    The Android manifest file defines configuration settings for Android applications. In this file, the `android:debuggable` attribute of the `application` element can be used to define whether or not the application can be debugged. When set to `true`, this attribute will allow the application to be debugged even when running on a device in user mode.

    When a debugger is enabled, it could allow for entry points in the application or reveal sensitive information. As a result, `android:debuggable` should only be enabled during development and should be disabled in production builds.


    ## Recommendation
    In Android applications, either set the `android:debuggable` attribute to `false`, or do not include it in the manifest. The default value, when not included, is `false`.


    ## Example
    In the example below, the `android:debuggable` attribute is set to `true`.


    ```xml
    <manifest ... >
        <!-- BAD: 'android:debuggable' set to 'true' -->
        <application
            android:debuggable="true">
            <activity ... >
            </activity>
        </application>
    </manifest>

    ```
    The corrected version sets the `android:debuggable` attribute to `false`.


    ```xml
    <manifest ... >
        <!-- GOOD: 'android:debuggable' set to 'false' -->
        <application
            android:debuggable="false">
            <activity ... >
            </activity>
        </application>
    </manifest>

    ```

    ## References
    * Android Developers: [App Manifest Overview](https://developer.android.com/guide/topics/manifest/manifest-intro).
    * Android Developers: [The android:debuggable attribute](https://developer.android.com/guide/topics/manifest/application-element#debug).
    * Android Developers: [Enable debugging](https://developer.android.com/studio/debug#enable-debug).
    * Common Weakness Enumeration: [CWE-489](https://cwe.mitre.org/data/definitions/489.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-489/WebviewDebuggingEnabled.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-489/WebviewDebuggingEnabled.bqrs
  metadata:
    name: Android Webview debugging enabled
    description: Enabling Webview debugging in production builds can expose entry
      points or leak sensitive information.
    kind: path-problem
    problem.severity: warning
    security-severity: 7.2
    id: java/android/webview-debugging-enabled
    tags: |-
      security
             external/cwe/cwe-489
    precision: high
  queryHelp: "# Android Webview debugging enabled\nThe `WebView.setWebContentsDebuggingEnabled`\
    \ method enables or disables the contents of any `WebView` in the application\
    \ to be debugged.\n\nYou should only enable debugging features during development.\
    \ When you create a production build, you should disable it. If you enable debugging\
    \ features, this can make your code vulnerable by adding entry points, or leaking\
    \ sensitive information.\n\n\n## Recommendation\nEnsure that debugging features\
    \ are not enabled in production builds, such as by guarding calls to `WebView.setWebContentsDebuggingEnabled(true)`\
    \ by a flag that is only enabled in debug builds.\n\n\n## Example\nIn the first\
    \ (bad) example, WebView debugging is always enabled. whereas the GOOD case only\
    \ enables it if the `android:debuggable` attribute is set to `true`.\n\n\n```java\n\
    // BAD - debugging is always enabled \nWebView.setWebContentsDebuggingEnabled(true);\n\
    \n// GOOD - debugging is only enabled when this is a debug build, as indicated\
    \ by the debuggable flag being set.\nif (0 != (getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE))\
    \ {\n    WebView.setWebContentsDebuggingEnabled(true);\n}\n```\n\n## References\n\
    * Android Developers: [setWebContentsDebuggingEnabled](https://developer.android.com/reference/android/webkit/WebView.html#setWebContentsDebuggingEnabled(boolean)).\n\
    * Android Developers: [Remote debugging WebViews](https://developer.chrome.com/docs/devtools/remote-debugging/webviews/).\n\
    * Common Weakness Enumeration: [CWE-489](https://cwe.mitre.org/data/definitions/489.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-502/UnsafeDeserialization.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-502/UnsafeDeserialization.bqrs
  metadata:
    name: Deserialization of user-controlled data
    description: |-
      Deserializing user-controlled data may allow attackers to
                    execute arbitrary code.
    kind: path-problem
    problem.severity: error
    security-severity: 9.8
    precision: high
    id: java/unsafe-deserialization
    tags: |-
      security
             external/cwe/cwe-502
  queryHelp: |
    # Deserialization of user-controlled data
    Deserializing untrusted data using any deserialization framework that allows the construction of arbitrary serializable objects is easily exploitable and in many cases allows an attacker to execute arbitrary code. Even before a deserialized object is returned to the caller of a deserialization method a lot of code may have been executed, including static initializers, constructors, and finalizers. Automatic deserialization of fields means that an attacker may craft a nested combination of objects on which the executed initialization code may have unforeseen effects, such as the execution of arbitrary code.

    There are many different serialization frameworks. This query currently supports Kryo, XmlDecoder, XStream, SnakeYaml, JYaml, JsonIO, YAMLBeans, HessianBurlap, Castor, Burlap, Jackson, Jabsorb, Jodd JSON, Flexjson, Gson, JMS, and Java IO serialization through `ObjectInputStream`/`ObjectOutputStream`.


    ## Recommendation
    Avoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON or XML. However, these formats should not be deserialized into complex objects because this provides further opportunities for attack. For example, XML-based deserialization attacks are possible through libraries such as XStream and XmlDecoder.

    Alternatively, a tightly controlled whitelist can limit the vulnerability of code, but be aware of the existence of so-called Bypass Gadgets, which can circumvent such protection measures.

    Recommendations specific to particular frameworks supported by this query:

    **FastJson** - `com.alibaba:fastjson`

    * **Secure by Default**: Partially
    * **Recommendation**: Call `com.alibaba.fastjson.parser.ParserConfig#setSafeMode` with the argument `true` before deserializing untrusted data.


    **FasterXML** - `com.fasterxml.jackson.core:jackson-databind`

    * **Secure by Default**: Yes
    * **Recommendation**: Don't call `com.fasterxml.jackson.databind.ObjectMapper#enableDefaultTyping` and don't annotate any object fields with `com.fasterxml.jackson.annotation.JsonTypeInfo` passing either the `CLASS` or `MINIMAL_CLASS` values to the annotation. Read [this guide](https://cowtowncoder.medium.com/jackson-2-10-safe-default-typing-2d018f0ce2ba).


    **Kryo** - `com.esotericsoftware:kryo` and `com.esotericsoftware:kryo5`

    * **Secure by Default**: Yes for `com.esotericsoftware:kryo5` and for `com.esotericsoftware:kryo` &gt;= v5.0.0
    * **Recommendation**: Don't call `com.esotericsoftware.kryo(5).Kryo#setRegistrationRequired` with the argument `false` on any `Kryo` instance that may deserialize untrusted data.


    **ObjectInputStream** - `Java Standard Library`

    * **Secure by Default**: No
    * **Recommendation**: Use a validating input stream, such as `org.apache.commons.io.serialization.ValidatingObjectInputStream`.


    **SnakeYAML** - `org.yaml:snakeyaml`

    * **Secure by Default**: As of version 2.0.
    * **Recommendation**: For versions before 2.0, pass an instance of `org.yaml.snakeyaml.constructor.SafeConstructor` to `org.yaml.snakeyaml.Yaml`'s constructor before using it to deserialize untrusted data.


    **XML Decoder** - `Standard Java Library`

    * **Secure by Default**: No
    * **Recommendation**: Do not use with untrusted user input.


    **ObjectMesssage** - `Java EE/Jakarta EE`

    * **Secure by Default**: Depends on the JMS implementation.
    * **Recommendation**: Do not use with untrusted user input.



    ## Example
    The following example calls `readObject` directly on an `ObjectInputStream` that is constructed from untrusted data, and is therefore inherently unsafe.


    ```java
    public MyObject {
      public int field;
      MyObject(int field) {
        this.field = field;
      }
    }

    public MyObject deserialize(Socket sock) {
      try(ObjectInputStream in = new ObjectInputStream(sock.getInputStream())) {
        return (MyObject)in.readObject(); // BAD: in is from untrusted source
      }
    }

    ```
    Rewriting the communication protocol to only rely on reading primitive types from the input stream removes the vulnerability.


    ```java
    public MyObject deserialize(Socket sock) {
      try(DataInputStream in = new DataInputStream(sock.getInputStream())) {
        return new MyObject(in.readInt()); // GOOD: read only an int
      }
    }

    ```

    ## References
    * OWASP vulnerability description: [Deserialization of untrusted data](https://www.owasp.org/index.php/Deserialization_of_untrusted_data).
    * OWASP guidance on deserializing objects: [Deserialization Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html).
    * Talks by Chris Frohoff &amp; Gabriel Lawrence: [ AppSecCali 2015: Marshalling Pickles - how deserializing objects will ruin your day](http://frohoff.github.io/appseccali-marshalling-pickles/), [OWASP SD: Deserialize My Shorts: Or How I Learned to Start Worrying and Hate Java Object Deserialization](http://frohoff.github.io/owaspsd-deserialize-my-shorts/).
    * Alvaro Muñoz &amp; Christian Schneider, RSAConference 2016: [Serial Killer: Silently Pwning Your Java Endpoints](https://speakerdeck.com/pwntester/serial-killer-silently-pwning-your-java-endpoints).
    * SnakeYaml documentation on deserialization: [SnakeYaml deserialization](https://bitbucket.org/snakeyaml/snakeyaml/wiki/Documentation#markdown-header-loading-yaml) (not updated for new behaviour in version 2.0).
    * Hessian deserialization and related gadget chains: [Hessian deserialization](https://paper.seebug.org/1137/).
    * Castor and Hessian java deserialization vulnerabilities: [Castor and Hessian deserialization](https://securitylab.github.com/research/hessian-java-deserialization-castor-vulnerabilities/).
    * Remote code execution in JYaml library: [JYaml deserialization](https://www.cybersecurity-help.cz/vdb/SB2020022512).
    * JsonIO deserialization vulnerabilities: [JsonIO deserialization](https://klezvirus.github.io/Advanced-Web-Hacking/Serialisation/).
    * Research by Moritz Bechler: [Java Unmarshaller Security - Turning your data into code execution](https://www.github.com/mbechler/marshalsec/blob/master/marshalsec.pdf?raw=true)
    * Blog posts by the developer of Jackson libraries: [On Jackson CVEs: Don’t Panic — Here is what you need to know](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062) [Jackson 2.10: Safe Default Typing](https://cowtowncoder.medium.com/jackson-2-10-safe-default-typing-2d018f0ce2ba)
    * Jabsorb documentation on deserialization: [Jabsorb JSON Serializer](https://github.com/Servoy/jabsorb/blob/master/src/org/jabsorb/).
    * Jodd JSON documentation on deserialization: [JoddJson Parser](https://json.jodd.org/parser).
    * RCE in Flexjson: [Flexjson deserialization](https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html).
    * Android Intent deserialization vulnerabilities with GSON parser: [Insecure use of JSON parsers](https://blog.oversecured.com/Exploiting-memory-corruption-vulnerabilities-on-Android/#insecure-use-of-json-parsers).
    * Research by Matthias Kaiser: [Pwning Your Java Messaging With Deserialization Vulnerabilities](https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities.pdf).
    * Common Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-522/InsecureLdapAuth.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-522/InsecureLdapAuth.bqrs
  metadata:
    name: Insecure LDAP authentication
    description: LDAP authentication with credentials sent in cleartext makes sensitive
      information vulnerable to remote attackers
    kind: path-problem
    problem.severity: error
    security-severity: 8.8
    precision: high
    id: java/insecure-ldap-auth
    tags: |-
      security
             external/cwe/cwe-522
             external/cwe/cwe-319
  queryHelp: |
    # Insecure LDAP authentication
    When using the Java LDAP API to perform LDAPv3-style extended operations and controls, a context with connection properties including user credentials is started. Transmission of LDAP credentials in cleartext allows remote attackers to obtain sensitive information by sniffing the network.


    ## Recommendation
    Use the `ldaps://` protocol to send credentials through SSL or use SASL authentication.


    ## Example
    In the following (bad) example, a `ldap://` URL is used and credentials will be sent in plaintext.


    ```java
    // BAD: LDAP authentication is used
    String ldapUrl = "ldap://ad.your-server.com:389";
    Hashtable<String, String> environment = new Hashtable<String, String>();
    environment.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    environment.put(Context.PROVIDER_URL, ldapUrl);
    environment.put(Context.REFERRAL, "follow");
    environment.put(Context.SECURITY_AUTHENTICATION, "simple");
    environment.put(Context.SECURITY_PRINCIPAL, ldapUserName);
    environment.put(Context.SECURITY_CREDENTIALS, password);
    DirContext dirContext = new InitialDirContext(environment);

    ```
    In the following (good) example, a `ldaps://` URL is used so credentials will be encrypted with SSL.


    ```java
    // GOOD: LDAP connection using LDAPS
    String ldapUrl = "ldaps://ad.your-server.com:636";
    Hashtable<String, String> environment = new Hashtable<String, String>();
    environment.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    environment.put(Context.PROVIDER_URL, ldapUrl);
    environment.put(Context.REFERRAL, "follow");
    environment.put(Context.SECURITY_AUTHENTICATION, "simple");
    environment.put(Context.SECURITY_PRINCIPAL, ldapUserName);
    environment.put(Context.SECURITY_CREDENTIALS, password);
    DirContext dirContext = new InitialDirContext(environment);

    ```
    In the following (good) example, a `ldap://` URL is used, but SASL authentication is enabled so that the credentials will be encrypted.


    ```java
    // GOOD: LDAP is used but SASL authentication is enabled
    String ldapUrl = "ldap://ad.your-server.com:389";
    Hashtable<String, String> environment = new Hashtable<String, String>();
    environment.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
    environment.put(Context.PROVIDER_URL, ldapUrl);
    environment.put(Context.REFERRAL, "follow");
    environment.put(Context.SECURITY_AUTHENTICATION, "DIGEST-MD5 GSSAPI");
    environment.put(Context.SECURITY_PRINCIPAL, ldapUserName);
    environment.put(Context.SECURITY_CREDENTIALS, password);
    DirContext dirContext = new InitialDirContext(environment);

    ```

    ## References
    * Oracle: [LDAP and LDAPS URLs](https://docs.oracle.com/javase/jndi/tutorial/ldap/misc/url.html)
    * Oracle: [Simple authentication](https://docs.oracle.com/javase/tutorial/jndi/ldap/simple.html)
    * Common Weakness Enumeration: [CWE-522](https://cwe.mitre.org/data/definitions/522.html).
    * Common Weakness Enumeration: [CWE-319](https://cwe.mitre.org/data/definitions/319.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-552/UrlForward.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-552/UrlForward.bqrs
  metadata:
    name: URL forward from a remote source
    description: |-
      URL forward based on unvalidated user input
                    may cause file information disclosure.
    kind: path-problem
    problem.severity: error
    security-severity: 7.5
    precision: high
    id: java/unvalidated-url-forward
    tags: |-
      security
             external/cwe/cwe-552
  queryHelp: "# URL forward from a remote source\nDirectly incorporating user input\
    \ into a URL forward request without validating the input can cause file information\
    \ disclosure by allowing an attacker to access unauthorized URLs.\n\n\n## Recommendation\n\
    To guard against untrusted URL forwarding, you should avoid putting user input\
    \ directly into a forwarded URL. Instead, you should maintain a list of authorized\
    \ URLs on the server, then choose from that list based on the user input provided.\n\
    \n\n## Example\nThe following example shows an HTTP request parameter being used\
    \ directly in a URL forward without validating the input, which may cause file\
    \ information disclosure. It also shows how to remedy the problem by validating\
    \ the user input against a known fixed string.\n\n\n```java\npublic class UrlForward\
    \ extends HttpServlet {\n\tprivate static final String VALID_FORWARD = \"https://cwe.mitre.org/data/definitions/552.html\"\
    ;\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response)\n\
    \t\t\tthrows ServletException, IOException {\n\t\tServletConfig cfg = getServletConfig();\n\
    \t\tServletContext sc = cfg.getServletContext();\n\n\t\t// BAD: a request parameter\
    \ is incorporated without validation into a URL forward\n\t\tsc.getRequestDispatcher(request.getParameter(\"\
    target\")).forward(request, response);\n\n\t\t// GOOD: the request parameter is\
    \ validated against a known fixed string\n\t\tif (VALID_FORWARD.equals(request.getParameter(\"\
    target\"))) {\n\t\t\tsc.getRequestDispatcher(VALID_FORWARD).forward(request, response);\n\
    \t\t}\n\t}\n}\n\n```\n\n## References\n* OWASP: [Unvalidated Redirects and Forwards\
    \ Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).\n\
    * Common Weakness Enumeration: [CWE-552](https://cwe.mitre.org/data/definitions/552.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-601/UrlRedirect.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-601/UrlRedirect.bqrs
  metadata:
    name: URL redirection from remote source
    description: |-
      URL redirection based on unvalidated user-input
                    may cause redirection to malicious web sites.
    kind: path-problem
    problem.severity: error
    security-severity: 6.1
    precision: high
    id: java/unvalidated-url-redirection
    tags: |-
      security
             external/cwe/cwe-601
  queryHelp: |
    # URL redirection from remote source
    Directly incorporating user input into a URL redirect request without validating the input can facilitate phishing attacks. In these attacks, unsuspecting users can be redirected to a malicious site that looks very similar to the real site they intend to visit, but which is controlled by the attacker.


    ## Recommendation
    To guard against untrusted URL redirection, it is advisable to avoid putting user input directly into a redirect URL. Instead, maintain a list of authorized redirects on the server; then choose from that list based on the user input provided.

    If this is not possible, then the user input should be validated in some other way, for example, by verifying that the target URL is on the same host as the current page.


    ## Example
    The following example shows an HTTP request parameter being used directly in a URL redirect without validating the input, which facilitates phishing attacks:


    ```java
    public class UrlRedirect extends HttpServlet {
      protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // BAD: a request parameter is incorporated without validation into a URL redirect
        response.sendRedirect(request.getParameter("target"));
      }
    }
    ```
    One way to remedy the problem is to validate the user input against a known fixed string before doing the redirection:


    ```java
    public class UrlRedirect extends HttpServlet {
      private static final List<String> VALID_REDIRECTS = Arrays.asList(
        "http://cwe.mitre.org/data/definitions/601.html",
        "http://cwe.mitre.org/data/definitions/79.html"
      );

      protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // GOOD: the request parameter is validated against a known list of strings
        String target = request.getParameter("target");
        if (VALID_REDIRECTS.contains(target)) {
            response.sendRedirect(target);
        } else {
            response.sendRedirect("/error.html");
        }
      }
    }
    ```
    Alternatively, we can check that the target URL does not redirect to a different host by checking that the URL is either relative or on a known good host:


    ```java
    public class UrlRedirect extends HttpServlet {
      protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
          String urlString = request.getParameter("page");
          URI url = new URI(urlString);

          if (!url.isAbsolute()) {
            response.sendRedirect(url.toString()); // GOOD: The redirect is to a relative URL
          }

          if ("example.org".equals(url.getHost())) {
            response.sendRedirect(url.toString()); // GOOD: The redirect is to a known host
          }
        } catch (URISyntaxException e) {
            // handle exception
        }
      }
    }
    ```
    Note that as written, the above code will allow redirects to URLs on `example.com`, which is harmless but perhaps not intended. You can substitute your own domain (if known) for `example.com` to prevent this.


    ## References
    * OWASP: [ Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html).
    * Microsoft Docs: [Preventing Open Redirection Attacks (C\#)](https://docs.microsoft.com/en-us/aspnet/mvc/overview/security/preventing-open-redirection-attacks).
    * Common Weakness Enumeration: [CWE-601](https://cwe.mitre.org/data/definitions/601.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-611/XXE.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-611/XXE.bqrs
  metadata:
    name: Resolving XML external entity in user-controlled data
    description: |-
      Parsing user-controlled XML documents and allowing expansion of external entity
       references may lead to disclosure of confidential data or denial of service.
    kind: path-problem
    problem.severity: error
    security-severity: 9.1
    precision: high
    id: java/xxe
    tags: |-
      security
             external/cwe/cwe-611
             external/cwe/cwe-776
             external/cwe/cwe-827
  queryHelp: |
    # Resolving XML external entity in user-controlled data
    Parsing untrusted XML files with a weakly configured XML parser may lead to an XML External Entity (XXE) attack. This type of attack uses external entity references to access arbitrary files on a system, carry out denial of service, or server side request forgery. Even when the result of parsing is not returned to the user, out-of-band data retrieval techniques may allow attackers to steal sensitive data. Denial of services can also be carried out in this situation.

    There are many XML parsers for Java, and most of them are vulnerable to XXE because their default settings enable parsing of external entities. This query currently identifies vulnerable XML parsing from the following parsers: `javax.xml.parsers.DocumentBuilder`, `javax.xml.stream.XMLStreamReader`, `org.jdom.input.SAXBuilder`/`org.jdom2.input.SAXBuilder`, `javax.xml.parsers.SAXParser`,`org.dom4j.io.SAXReader`, `org.xml.sax.XMLReader`, `javax.xml.transform.sax.SAXSource`, `javax.xml.transform.TransformerFactory`, `javax.xml.transform.sax.SAXTransformerFactory`, `javax.xml.validation.SchemaFactory`, `javax.xml.bind.Unmarshaller` and `javax.xml.xpath.XPathExpression`.


    ## Recommendation
    The best way to prevent XXE attacks is to disable the parsing of any Document Type Declarations (DTDs) in untrusted data. If this is not possible you should disable the parsing of external general entities and external parameter entities. This improves security but the code will still be at risk of denial of service and server side request forgery attacks. Protection against denial of service attacks may also be implemented by setting entity expansion limits, which is done by default in recent JDK and JRE implementations. We recommend visiting OWASP's [XML Entity Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java), finding the specific XML parser, and applying the mitigation listed there. Other mitigations might be sufficient in some cases, but manual verification will be needed, as the query will continue to flag the parser as potentially dangerous.


    ## Example
    The following example calls `parse` on a `DocumentBuilder` that is not safely configured on untrusted data, and is therefore inherently unsafe.


    ```java
    public void parse(Socket sock) throws Exception {
      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
      DocumentBuilder builder = factory.newDocumentBuilder();
      builder.parse(sock.getInputStream()); // BAD: DTD parsing is enabled
    }

    ```
    In this example, the `DocumentBuilder` is created with DTD disabled, securing it against XXE attack.


    ```java
    public void disableDTDParse(Socket sock) throws Exception {
      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
      factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
      DocumentBuilder builder = factory.newDocumentBuilder();
      builder.parse(sock.getInputStream()); // GOOD: DTD parsing is disabled
    }

    ```

    ## References
    * OWASP vulnerability description: [XML External Entity (XXE) Processing](https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing).
    * OWASP guidance on parsing xml files: [XXE Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java).
    * Paper by Timothy Morgen: [XML Schema, DTD, and Entity Attacks](https://research.nccgroup.com/2014/05/19/xml-schema-dtd-and-entity-attacks-a-compendium-of-known-techniques/)
    * Out-of-band data retrieval: Timur Yunusov &amp; Alexey Osipov, Black hat EU 2013: [XML Out-Of-Band Data Retrieval](https://www.slideshare.net/qqlan/bh-ready-v4).
    * Denial of service attack (Billion laughs): [Billion Laughs.](https://en.wikipedia.org/wiki/Billion_laughs)
    * The Java Tutorials: [Processing Limit Definitions.](https://docs.oracle.com/javase/tutorial/jaxp/limits/limits.html)
    * Common Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html).
    * Common Weakness Enumeration: [CWE-776](https://cwe.mitre.org/data/definitions/776.html).
    * Common Weakness Enumeration: [CWE-827](https://cwe.mitre.org/data/definitions/827.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-614/InsecureCookie.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-614/InsecureCookie.bqrs
  metadata:
    name: Failure to use secure cookies
    description: |-
      Insecure cookies may be sent in cleartext, which makes them vulnerable to
                    interception.
    kind: problem
    problem.severity: error
    security-severity: 5.0
    precision: high
    id: java/insecure-cookie
    tags: |-
      security
             external/cwe/cwe-614
  queryHelp: "# Failure to use secure cookies\nFailing to set the 'secure' flag on\
    \ a cookie can cause it to be sent in cleartext. This makes it easier for an attacker\
    \ to intercept.\n\n\n## Recommendation\nAlways use `setSecure` to set the 'secure'\
    \ flag on a cookie before adding it to an `HttpServletResponse`.\n\n\n## Example\n\
    This example shows two ways of adding a cookie to an `HttpServletResponse`. The\
    \ first way leaves out the setting of the 'secure' flag; the second way includes\
    \ the setting of the flag.\n\n\n```java\npublic static void test(HttpServletRequest\
    \ request, HttpServletResponse response) {\n\t{\n\t\tCookie cookie = new Cookie(\"\
    secret\", \"fakesecret\");\n\t\t\n\t\t// BAD: 'secure' flag not set\n\t\tresponse.addCookie(cookie);\n\
    \t}\n\n\t{\n\t\tCookie cookie = new Cookie(\"secret\", \"fakesecret\");\n\t\t\n\
    \t\t// GOOD: set 'secure' flag\n\t\tcookie.setSecure(true);\n\t\tresponse.addCookie(cookie);\n\
    \t}\n}\n```\n\n## References\n* SEI CERT Oracle Coding Standard for Java: [SER03-J.\
    \ Do not serialize unencrypted, sensitive data](https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data).\n\
    * Java Platform, Enterprise Edition (Java EE) 7, API Specification: [Class Cookie](https://docs.oracle.com/javaee/7/api/javax/servlet/http/Cookie.html).\n\
    * Common Weakness Enumeration: [CWE-614](https://cwe.mitre.org/data/definitions/614.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-643/XPathInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-643/XPathInjection.bqrs
  metadata:
    name: XPath injection
    description: |-
      Building an XPath expression from user-controlled sources is vulnerable to insertion of
                    malicious code by the user.
    kind: path-problem
    problem.severity: error
    security-severity: 9.8
    precision: high
    id: java/xml/xpath-injection
    tags: |-
      security
             external/cwe/cwe-643
  queryHelp: "# XPath injection\nIf an XPath expression is built using string concatenation,\
    \ and the components of the concatenation include user input, it makes it very\
    \ easy for a user to create a malicious XPath expression.\n\n\n## Recommendation\n\
    If user input must be included in an XPath expression, either sanitize the data\
    \ or pre-compile the query and use variable references to include the user input.\n\
    \nXPath injection can also be prevented by using XQuery.\n\n\n## Example\nIn the\
    \ first three examples, the code accepts a name and password specified by the\
    \ user, and uses this unvalidated and unsanitized value in an XPath expression.\
    \ This is vulnerable to the user providing special characters or string sequences\
    \ that change the meaning of the XPath expression to search for different values.\n\
    \nIn the fourth example, the code uses `setXPathVariableResolver` which prevents\
    \ XPath injection.\n\nThe final two examples are for dom4j. They show an example\
    \ of XPath injection and one method of preventing it.\n\n\n```java\nfinal String\
    \ xmlStr = \"<users>\" + \n                        \"   <user name=\\\"aaa\\\"\
    \ pass=\\\"pass1\\\"></user>\" + \n                        \"   <user name=\\\"\
    bbb\\\" pass=\\\"pass2\\\"></user>\" + \n                        \"</users>\"\
    ;\ntry {\n    DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();\n\
    \    domFactory.setNamespaceAware(true);\n    DocumentBuilder builder = domFactory.newDocumentBuilder();\n\
    \    //Document doc = builder.parse(\"user.xml\");\n    Document doc = builder.parse(new\
    \ InputSource(new StringReader(xmlStr)));\n\n    XPathFactory factory = XPathFactory.newInstance();\n\
    \    XPath xpath = factory.newXPath();\n\n    // Injectable data\n    String user\
    \ = request.getParameter(\"user\");\n    String pass = request.getParameter(\"\
    pass\");\n    if (user != null && pass != null) {\n        boolean isExist = false;\n\
    \n        // Bad expression\n        String expression1 = \"/users/user[@name='\"\
    \ + user + \"' and @pass='\" + pass + \"']\";\n        isExist = (boolean)xpath.evaluate(expression1,\
    \ doc, XPathConstants.BOOLEAN);\n        System.out.println(isExist);\n\n    \
    \    // Bad expression\n        XPathExpression expression2 = xpath.compile(\"\
    /users/user[@name='\" + user + \"' and @pass='\" + pass + \"']\");\n        isExist\
    \ = (boolean)expression2.evaluate(doc, XPathConstants.BOOLEAN);\n        System.out.println(isExist);\n\
    \n        // Bad expression\n        StringBuffer sb = new StringBuffer(\"/users/user[@name=\"\
    );\n        sb.append(user);\n        sb.append(\"' and @pass='\");\n        sb.append(pass);\n\
    \        sb.append(\"']\");\n        String query = sb.toString();\n        XPathExpression\
    \ expression3 = xpath.compile(query);\n        isExist = (boolean)expression3.evaluate(doc,\
    \ XPathConstants.BOOLEAN);\n        System.out.println(isExist);\n\n        //\
    \ Good expression\n        String expression4 = \"/users/user[@name=$user and\
    \ @pass=$pass]\";\n        xpath.setXPathVariableResolver(v -> {\n        switch\
    \ (v.getLocalPart()) {\n            case \"user\":\n                return user;\n\
    \            case \"pass\":\n                return pass;\n            default:\n\
    \                throw new IllegalArgumentException();\n            }\n      \
    \  });\n        isExist = (boolean)xpath.evaluate(expression4, doc, XPathConstants.BOOLEAN);\n\
    \        System.out.println(isExist);\n\n\n        // Bad Dom4j \n        org.dom4j.io.SAXReader\
    \ reader = new org.dom4j.io.SAXReader();\n        org.dom4j.Document document\
    \ = reader.read(new InputSource(new StringReader(xmlStr)));\n        isExist =\
    \ document.selectSingleNode(\"/users/user[@name='\" + user + \"' and @pass='\"\
    \ + pass + \"']\") != null;\n        // or document.selectNodes\n        System.out.println(isExist);\n\
    \n        // Good Dom4j\n        org.jaxen.SimpleVariableContext svc = new org.jaxen.SimpleVariableContext();\n\
    \        svc.setVariableValue(\"user\", user);\n        svc.setVariableValue(\"\
    pass\", pass);\n        String xpathString = \"/users/user[@name=$user and @pass=$pass]\"\
    ;\n        org.dom4j.XPath safeXPath = document.createXPath(xpathString);\n  \
    \      safeXPath.setVariableContext(svc);\n        isExist = safeXPath.selectSingleNode(document)\
    \ != null;\n        System.out.println(isExist);\n    }\n} catch (ParserConfigurationException\
    \ e) {\n\n} catch (SAXException e) {\n\n} catch (XPathExpressionException e) {\n\
    \n} catch (org.dom4j.DocumentException e) {\n\n}\n```\n\n## References\n* OWASP:\
    \ [Testing for XPath Injection](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection).\n\
    * OWASP: [XPath Injection](https://owasp.org/www-community/attacks/XPATH_Injection).\n\
    * Common Weakness Enumeration: [CWE-643](https://cwe.mitre.org/data/definitions/643.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-681/NumericCastTainted.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-681/NumericCastTainted.bqrs
  metadata:
    name: User-controlled data in numeric cast
    description: |-
      Casting user-controlled numeric data to a narrower type without validation
                    can cause unexpected truncation.
    kind: path-problem
    problem.severity: error
    security-severity: 9.0
    precision: high
    id: java/tainted-numeric-cast
    tags: |-
      security
             external/cwe/cwe-197
             external/cwe/cwe-681
  queryHelp: "# User-controlled data in numeric cast\nCasting a user-controlled numeric\
    \ value to a narrower type can result in truncated values unless the input is\
    \ validated.\n\nNarrowing conversions may cause potentially unintended results.\
    \ For example, casting the positive integer value `128` to type `byte` yields\
    \ the negative value `-128`.\n\n\n## Recommendation\nGuard against unexpected\
    \ truncation of user-controlled arithmetic data by doing one of the following:\n\
    \n* Validate the user input.\n* Define a guard on the cast expression, so that\
    \ the cast is performed only if the input is known to be within the range of the\
    \ resulting type.\n* Avoid casting to a narrower type, and instead continue to\
    \ use a wider type.\n\n## Example\nIn this example, a value is read from standard\
    \ input into a `long`. Because the value is a user-controlled value, it could\
    \ be extremely large. Casting this value to a narrower type could therefore cause\
    \ unexpected truncation. The `scaled2` example uses a guard to avoid this problem\
    \ and checks the range of the input before performing the cast. If the value is\
    \ too large to cast to type `int` it is rejected as invalid.\n\n\n```java\nclass\
    \ Test {\n\tpublic static void main(String[] args) throws IOException {\n\t\t\
    {\n\t\t\tlong data;\n\n\t\t\tBufferedReader readerBuffered = new BufferedReader(\n\
    \t\t\t\t\tnew InputStreamReader(System.in, \"UTF-8\"));\n\t\t\tString stringNumber\
    \ = readerBuffered.readLine();\n\t\t\tif (stringNumber != null) {\n\t\t\t\tdata\
    \ = Long.parseLong(stringNumber.trim());\n\t\t\t} else {\n\t\t\t\tdata = 0;\n\t\
    \t\t}\n\n\t\t\t// AVOID: potential truncation if input data is very large,\n\t\
    \t\t// for example 'Long.MAX_VALUE'\n\t\t\tint scaled = (int)data;\n\n\t\t\t//...\n\
    \n\t\t\t// GOOD: use a guard to ensure no truncation occurs\n\t\t\tint scaled2;\n\
    \t\t\tif (data > Integer.MIN_VALUE && data < Integer.MAX_VALUE)\n\t\t\t\tscaled2\
    \ = (int)data;\n\t\t\telse\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid\
    \ input\");\n\t\t}\n\t}\n}\n```\n\n## References\n* SEI CERT Oracle Coding Standard\
    \ for Java: [NUM12-J. Ensure conversions of numeric types to narrower types do\
    \ not result in lost or misinterpreted data](https://wiki.sei.cmu.edu/confluence/display/java/NUM12-J.+Ensure+conversions+of+numeric+types+to+narrower+types+do+not+result+in+lost+or+misinterpreted+data).\n\
    * Common Weakness Enumeration: [CWE-197](https://cwe.mitre.org/data/definitions/197.html).\n\
    * Common Weakness Enumeration: [CWE-681](https://cwe.mitre.org/data/definitions/681.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-730/PolynomialReDoS.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-730/PolynomialReDoS.bqrs
  metadata:
    name: Polynomial regular expression used on uncontrolled data
    description: |-
      A regular expression that can require polynomial time
                    to match may be vulnerable to denial-of-service attacks.
    kind: path-problem
    problem.severity: warning
    security-severity: 7.5
    precision: high
    id: java/polynomial-redos
    tags: |-
      security
             external/cwe/cwe-1333
             external/cwe/cwe-730
             external/cwe/cwe-400
  queryHelp: "# Polynomial regular expression used on uncontrolled data\nSome regular\
    \ expressions take a long time to match certain input strings to the point where\
    \ the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>*\
    \ or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance,\
    \ or even allow a malicious user to perform a Denial of Service (\"DoS\") attack\
    \ by crafting an expensive input string for the regular expression to match.\n\
    \nThe regular expression engine provided by Java uses a backtracking non-deterministic\
    \ finite automata to implement regular expression matching. While this approach\
    \ is space-efficient and allows supporting advanced features like capture groups,\
    \ it is not time-efficient in general. The worst-case time complexity of such\
    \ an automaton can be polynomial or even exponential, meaning that for strings\
    \ of a certain shape, increasing the input length by ten characters may make the\
    \ automaton about 1000 times slower.\n\nTypically, a regular expression is affected\
    \ by this problem if it contains a repetition of the form `r*` or `r+` where the\
    \ sub-expression `r` is ambiguous in the sense that it can match some string in\
    \ multiple ways. More information about the precise circumstances can be found\
    \ in the references.\n\nNote that Java versions 9 and above have some mitigations\
    \ against ReDoS; however they aren't perfect and more complex regular expressions\
    \ can still be affected by this problem.\n\n\n## Recommendation\nModify the regular\
    \ expression to remove the ambiguity, or ensure that the strings matched with\
    \ the regular expression are short enough that the time-complexity does not matter.\
    \ Alternatively, an alternate regex library that guarantees linear time execution,\
    \ such as Google's RE2J, may be used.\n\n\n## Example\nConsider this use of a\
    \ regular expression, which removes all leading and trailing whitespace in a string:\n\
    \n```java\n\nPattern.compile(\"^\\\\s+|\\\\s+$\").matcher(text).replaceAll(\"\"\
    ) // BAD\n```\nThe sub-expression `\"\\\\s+$\"` will match the whitespace characters\
    \ in `text` from left to right, but it can start matching anywhere within a whitespace\
    \ sequence. This is problematic for strings that do **not** end with a whitespace\
    \ character. Such a string will force the regular expression engine to process\
    \ each whitespace sequence once per whitespace character in the sequence.\n\n\
    This ultimately means that the time cost of trimming a string is quadratic in\
    \ the length of the string. So a string like `\"a b\"` will take milliseconds\
    \ to process, but a similar string with a million spaces instead of just one will\
    \ take several minutes.\n\nAvoid this problem by rewriting the regular expression\
    \ to not contain the ambiguity about when to start matching whitespace sequences.\
    \ For instance, by using a negative look-behind (`\"^\\\\s+|(?<!\\\\s)\\\\s+$\"\
    `), or just by using the built-in trim method (`text.trim()`).\n\nNote that the\
    \ sub-expression `\"^\\\\s+\"` is **not** problematic as the `^` anchor restricts\
    \ when that sub-expression can start matching, and as the regular expression engine\
    \ matches from left to right.\n\n\n## Example\nAs a similar, but slightly subtler\
    \ problem, consider the regular expression that matches lines with numbers, possibly\
    \ written using scientific notation:\n\n```java\n\n\"^0\\\\.\\\\d+E?\\\\d+$\"\"\
    \ \n```\nThe problem with this regular expression is in the sub-expression `\\\
    d+E?\\d+` because the second `\\d+` can start matching digits anywhere after the\
    \ first match of the first `\\d+` if there is no `E` in the input string.\n\n\
    This is problematic for strings that do **not** end with a digit. Such a string\
    \ will force the regular expression engine to process each digit sequence once\
    \ per digit in the sequence, again leading to a quadratic time complexity.\n\n\
    To make the processing faster, the regular expression should be rewritten such\
    \ that the two `\\d+` sub-expressions do not have overlapping matches: `\"^0\\\
    \\.\\\\d+(E\\\\d+)?$\"`.\n\n\n## Example\nSometimes it is unclear how a regular\
    \ expression can be rewritten to avoid the problem. In such cases, it often suffices\
    \ to limit the length of the input string. For instance, the following regular\
    \ expression is used to match numbers, and on some non-number inputs it can have\
    \ quadratic time complexity:\n\n```java\n\nPattern.matches(\"^(\\\\+|-)?(\\\\\
    d+|(\\\\d*\\\\.\\\\d*))?(E|e)?([-+])?(\\\\d+)?$\", str); \n```\nIt is not immediately\
    \ obvious how to rewrite this regular expression to avoid the problem. However,\
    \ you can mitigate performance issues by limiting the length to 1000 characters,\
    \ which will always finish in a reasonable amount of time.\n\n```java\n\nif (str.length()\
    \ > 1000) {\n    throw new IllegalArgumentException(\"Input too long\");\n}\n\n\
    Pattern.matches(\"^(\\\\+|-)?(\\\\d+|(\\\\d*\\\\.\\\\d*))?(E|e)?([-+])?(\\\\d+)?$\"\
    , str); \n```\n\n## References\n* OWASP: [Regular expression Denial of Service\
    \ - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n\
    * Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* Wikipedia: [Time\
    \ complexity](https://en.wikipedia.org/wiki/Time_complexity).\n* James Kirrage,\
    \ Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service\
    \ Attack](https://arxiv.org/abs/1301.0849).\n* Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).\n\
    * Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n\
    * Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-730/ReDoS.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-730/ReDoS.bqrs
  metadata:
    name: Inefficient regular expression
    description: |-
      A regular expression that requires exponential time to match certain inputs
                    can be a performance bottleneck, and may be vulnerable to denial-of-service
                    attacks.
    kind: problem
    problem.severity: error
    security-severity: 7.5
    precision: high
    id: java/redos
    tags: |-
      security
             external/cwe/cwe-1333
             external/cwe/cwe-730
             external/cwe/cwe-400
  queryHelp: |
    # Inefficient regular expression
    Some regular expressions take a long time to match certain input strings to the point where the time it takes to match a string of length *n* is proportional to *n<sup>k</sup>* or even *2<sup>n</sup>*. Such regular expressions can negatively affect performance, or even allow a malicious user to perform a Denial of Service ("DoS") attack by crafting an expensive input string for the regular expression to match.

    The regular expression engine provided by Java uses a backtracking non-deterministic finite automata to implement regular expression matching. While this approach is space-efficient and allows supporting advanced features like capture groups, it is not time-efficient in general. The worst-case time complexity of such an automaton can be polynomial or even exponential, meaning that for strings of a certain shape, increasing the input length by ten characters may make the automaton about 1000 times slower.

    Typically, a regular expression is affected by this problem if it contains a repetition of the form `r*` or `r+` where the sub-expression `r` is ambiguous in the sense that it can match some string in multiple ways. More information about the precise circumstances can be found in the references.

    Note that Java versions 9 and above have some mitigations against ReDoS; however they aren't perfect and more complex regular expressions can still be affected by this problem.


    ## Recommendation
    Modify the regular expression to remove the ambiguity, or ensure that the strings matched with the regular expression are short enough that the time-complexity does not matter. Alternatively, an alternate regex library that guarantees linear time execution, such as Google's RE2J, may be used.


    ## Example
    Consider this regular expression:

    ```java

    ^_(__|.)+_$
    ```
    Its sub-expression `"(__|.)+?"` can match the string `"__"` either by the first alternative `"__"` to the left of the `"|"` operator, or by two repetitions of the second alternative `"."` to the right. Thus, a string consisting of an odd number of underscores followed by some other character will cause the regular expression engine to run for an exponential amount of time before rejecting the input.

    This problem can be avoided by rewriting the regular expression to remove the ambiguity between the two branches of the alternative inside the repetition:

    ```java

    ^_(__|[^_])+_$
    ```

    ## References
    * OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).
    * Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).
    * Wikipedia: [Time complexity](https://en.wikipedia.org/wiki/Time_complexity).
    * James Kirrage, Asiri Rathnayake, Hayo Thielecke: [Static Analysis for Regular Expression Denial-of-Service Attack](https://arxiv.org/abs/1301.0849).
    * Common Weakness Enumeration: [CWE-1333](https://cwe.mitre.org/data/definitions/1333.html).
    * Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).
    * Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-730/RegexInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-730/RegexInjection.bqrs
  metadata:
    name: Regular expression injection
    description: |-
      User input should not be used in regular expressions without first being escaped,
                    otherwise a malicious user may be able to provide a regex that could require
                    exponential time on certain inputs.
    kind: path-problem
    problem.severity: error
    security-severity: 7.5
    precision: high
    id: java/regex-injection
    tags: |-
      security
             external/cwe/cwe-730
             external/cwe/cwe-400
  queryHelp: |
    # Regular expression injection
    Constructing a regular expression with unsanitized user input is dangerous as a malicious user may be able to modify the meaning of the expression. In particular, such a user may be able to provide a regular expression fragment that takes exponential time in the worst case, and use that to perform a Denial of Service attack.


    ## Recommendation
    Before embedding user input into a regular expression, use a sanitization function such as `Pattern.quote` to escape meta-characters that have special meaning.


    ## Example
    The following example shows an HTTP request parameter that is used to construct a regular expression.

    In the first case the user-provided regex is not escaped. If a malicious user provides a regex whose worst-case performance is exponential, then this could lead to a Denial of Service.

    In the second case, the user input is escaped using `Pattern.quote` before being included in the regular expression. This ensures that the user cannot insert characters which have a special meaning in regular expressions.


    ```java
    import java.util.regex.Pattern;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;

    public class RegexInjectionDemo extends HttpServlet {

      public boolean badExample(javax.servlet.http.HttpServletRequest request) {
        String regex = request.getParameter("regex");
        String input = request.getParameter("input");

        // BAD: Unsanitized user input is used to construct a regular expression
        return input.matches(regex);
      }

      public boolean goodExample(javax.servlet.http.HttpServletRequest request) {
        String regex = request.getParameter("regex");
        String input = request.getParameter("input");

        // GOOD: User input is sanitized before constructing the regex
        return input.matches(Pattern.quote(regex));
      }
    }

    ```

    ## References
    * OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).
    * Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).
    * Java API Specification: [Pattern.quote](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html#quote(java.lang.String)).
    * Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).
    * Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-732/ReadingFromWorldWritableFile.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-732/ReadingFromWorldWritableFile.bqrs
  metadata:
    name: Reading from a world writable file
    description: |-
      Reading from a file which is set as world writable is dangerous because
                    the file may be modified or removed by external actors.
    kind: problem
    problem.severity: error
    security-severity: 7.8
    precision: high
    id: java/world-writable-file-read
    tags: |-
      security
             external/cwe/cwe-732
  queryHelp: |
    # Reading from a world writable file
    Reading from a world-writable file is dangerous on a multi-user system because other users may be able to affect program execution by modifying or deleting the file.


    ## Recommendation
    Do not make files explicitly world writable unless the file is intended to be written by multiple users on a multi-user system. In many cases, the file may only need to be writable for the current user.

    For some file systems, there may be alternatives to setting the file to be world writable. For example, POSIX file systems support "groups" which may be used to ensure that only subset of all the users can write to the file. Access Control Lists (ACLs) are available for many operating system and file system combinations, and can provide fine-grained read and write support without resorting to world writable permissions.


    ## Example
    In the following example, we are loading some configuration parameters from a file:

    ```java

    private void readConfig(File configFile) {
      if (!configFile.exists()) {
        // Create an empty config file
        configFile.createNewFile();
        // Make the file writable for all
        configFile.setWritable(true, false);
      }
      // Now read the config
      loadConfig(configFile);
    }

    ```
    If the configuration file does not yet exist, an empty file is created. Creating an empty file can simplify the later code and is a convenience for the user. However, by setting the file to be world writable, we allow any user on the system to modify the configuration, not just the current user. If there may be untrusted users on the system, this is potentially dangerous.


    ## References
    * SEI CERT Oracle Coding Standard for Java: [FIO01-J. Create files with appropriate access permissions](https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions).
    * Common Weakness Enumeration: [CWE-732](https://cwe.mitre.org/data/definitions/732.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-780/RsaWithoutOaep.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-780/RsaWithoutOaep.bqrs
  metadata:
    name: Use of RSA algorithm without OAEP
    description: "Using RSA encryption without OAEP padding can result in a padding\
      \ oracle attack, leading to a weaker encryption."
    kind: path-problem
    problem.severity: warning
    security-severity: 7.5
    precision: high
    id: java/rsa-without-oaep
    tags: |-
      security
             external/cwe/cwe-780
  queryHelp: |
    # Use of RSA algorithm without OAEP
    Cryptographic algorithms often use padding schemes to make the plaintext less predictable. The OAEP (Optimal Asymmetric Encryption Padding) scheme should be used with RSA encryption. Using an outdated padding scheme such as PKCS1, or no padding at all, can weaken the encryption by making it vulnerable to a padding oracle attack.


    ## Recommendation
    Use the OAEP scheme when using RSA encryption.


    ## Example
    In the following example, the BAD case shows no padding being used, whereas the GOOD case shows an OAEP scheme being used.


    ```java
    // BAD: No padding scheme is used
    Cipher rsa = Cipher.getInstance("RSA/ECB/NoPadding");
    ...

    //GOOD: OAEP padding is used
    Cipher rsa = Cipher.getInstance("RSA/ECB/OAEPWithSHA-1AndMGF1Padding");
    ...
    ```

    ## References
    * [Mobile Security Testing Guide](https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#padding-oracle-attacks-due-to-weaker-padding-or-block-operation-implementations).
    * [The Padding Oracle Attack](https://robertheaton.com/2013/07/29/padding-oracle-attack/).
    * Common Weakness Enumeration: [CWE-780](https://cwe.mitre.org/data/definitions/780.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-807/TaintedPermissionsCheck.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-807/TaintedPermissionsCheck.bqrs
  metadata:
    name: User-controlled data used in permissions check
    description: |-
      Using user-controlled data in a permissions check may result in inappropriate
                    permissions being granted.
    kind: path-problem
    problem.severity: error
    security-severity: 7.8
    precision: high
    id: java/tainted-permissions-check
    tags: |-
      security
             external/cwe/cwe-807
             external/cwe/cwe-290
  queryHelp: "# User-controlled data used in permissions check\nUsing user-controlled\
    \ data in a permissions check may allow a user to gain unauthorized access to\
    \ protected functionality or data.\n\n\n## Recommendation\nWhen checking whether\
    \ a user is authorized for a particular activity, do not use data that is controlled\
    \ by that user in the permissions check. If necessary, always validate the input,\
    \ ideally against a fixed list of expected values.\n\nSimilarly, do not decide\
    \ which permission to check for based on user data. In particular, avoid using\
    \ computation to decide which permissions to check for. Use fixed permissions\
    \ for particular actions, rather than generating the permission to check for.\n\
    \n\n## Example\nThis example, using the Apache Shiro security framework, shows\
    \ two ways to specify the permissions to check. The first way uses a string, `whatDoTheyWantToDo`,\
    \ to specify the permissions to check. However, this string is built from user\
    \ input. This can allow an attacker to force a check against a permission that\
    \ they know they have, rather than the permission that should be checked. For\
    \ example, while trying to access the account details of another user, the attacker\
    \ could force the system to check whether they had permissions to access their\
    \ *own* account details, which is incorrect, and would allow them to perform the\
    \ action. The second, more secure way uses a fixed check that does not depend\
    \ on data that is controlled by the user.\n\n\n```java\npublic static void main(String[]\
    \ args) {\n\tString whatDoTheyWantToDo = args[0];\n\tSubject subject = SecurityUtils.getSubject();\n\
    \n\t// BAD: permissions decision made using tainted data\n\tif(subject.isPermitted(\"\
    domain:sublevel:\" + whatDoTheyWantToDo))\n\t\tdoIt();\n\n\t// GOOD: use fixed\
    \ checks\n\tif(subject.isPermitted(\"domain:sublevel:whatTheMethodDoes\"))\n\t\
    \tdoIt();\n}\n```\n\n## References\n* SEI CERT Oracle Coding Standard for Java:\
    \ [SEC02-J. Do not base security checks on untrusted sources](https://wiki.sei.cmu.edu/confluence/display/java/SEC02-J.+Do+not+base+security+checks+on+untrusted+sources).\n\
    * Common Weakness Enumeration: [CWE-807](https://cwe.mitre.org/data/definitions/807.html).\n\
    * Common Weakness Enumeration: [CWE-290](https://cwe.mitre.org/data/definitions/290.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-829/InsecureDependencyResolution.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-829/InsecureDependencyResolution.bqrs
  metadata:
    name: Failure to use HTTPS or SFTP URL in Maven artifact upload/download
    description: Non-HTTPS connections can be intercepted by third parties.
    kind: problem
    problem.severity: error
    security-severity: 8.1
    precision: very-high
    id: java/maven/non-https-url
    tags: |-
      security
             external/cwe/cwe-300
             external/cwe/cwe-319
             external/cwe/cwe-494
             external/cwe/cwe-829
  queryHelp: |
    # Failure to use HTTPS or SFTP URL in Maven artifact upload/download
    Using an insecure protocol like HTTP or FTP to download your dependencies leaves your Maven build vulnerable to a [Man in the Middle (MITM)](https://en.wikipedia.org/wiki/Man-in-the-middle_attack). This can allow attackers to inject malicious code into the artifacts that you are resolving and infect build artifacts that are being produced. This can be used by attackers to perform a [Supply chain attack](https://en.wikipedia.org/wiki/Supply_chain_attack) against your project's users.

    This vulnerability has a [ CVSS v3.1 base score of 8.1/10 ](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H&version=3.1).


    ## Recommendation
    Always use HTTPS or SFTP to download artifacts from artifact servers.


    ## Example
    These examples show examples of locations in Maven POM files where artifact repository upload/download is configured. The first shows the use of HTTP, the second shows the use of HTTPS.


    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <project xmlns="http://maven.apache.org/POM/4.0.0"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

        <modelVersion>4.0.0</modelVersion>

        <groupId>com.semmle</groupId>
        <artifactId>parent</artifactId>
        <version>1.0</version>
        <packaging>pom</packaging>

        <name>Security Testing</name>
        <description>An example of insecure download and upload of dependencies</description>

        <distributionManagement>
            <repository>
                <id>insecure-releases</id>
                <name>Insecure Repository Releases</name>
                <!-- BAD! Use HTTPS -->
                <url>http://insecure-repository.example</url>
            </repository>
            <snapshotRepository>
                <id>insecure-snapshots</id>
                <name>Insecure Repository Snapshots</name>
                <!-- BAD! Use HTTPS -->
                <url>http://insecure-repository.example</url>
            </snapshotRepository>
        </distributionManagement>
        <repositories>
            <repository>
                <id>insecure</id>
                <name>Insecure Repository</name>
                <!-- BAD! Use HTTPS -->
                <url>http://insecure-repository.example</url>
            </repository>
        </repositories>
        <pluginRepositories>
            <pluginRepository>
                <id>insecure-plugins</id>
                <name>Insecure Repository Releases</name>
                <!-- BAD! Use HTTPS -->
                <url>http://insecure-repository.example</url>
            </pluginRepository>
        </pluginRepositories>
    </project>

    ```

    ```xml
    <?xml version="1.0" encoding="UTF-8"?>
    <project xmlns="http://maven.apache.org/POM/4.0.0"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

        <modelVersion>4.0.0</modelVersion>

        <groupId>com.semmle</groupId>
        <artifactId>parent</artifactId>
        <version>1.0</version>
        <packaging>pom</packaging>

        <name>Security Testing</name>
        <description>An example of secure download and upload of dependencies</description>

        <distributionManagement>
            <repository>
                <id>insecure-releases</id>
                <name>Secure Repository Releases</name>
                <!-- GOOD! Use HTTPS -->
                <url>https://insecure-repository.example</url>
            </repository>
            <snapshotRepository>
                <id>insecure-snapshots</id>
                <name>Secure Repository Snapshots</name>
                <!-- GOOD! Use HTTPS -->
                <url>https://insecure-repository.example</url>
            </snapshotRepository>
        </distributionManagement>
        <repositories>
            <repository>
                <id>insecure</id>
                <name>Secure Repository</name>
                <!-- GOOD! Use HTTPS -->
                <url>https://insecure-repository.example</url>
            </repository>
        </repositories>
        <pluginRepositories>
            <pluginRepository>
                <id>insecure-plugins</id>
                <name>Secure Repository Releases</name>
                <!-- GOOD! Use HTTPS -->
                <url>https://insecure-repository.example</url>
            </pluginRepository>
        </pluginRepositories>
    </project>

    ```

    ## References
    * Research: [ Want to take over the Java ecosystem? All you need is a MITM! ](https://medium.com/bugbountywriteup/want-to-take-over-the-java-ecosystem-all-you-need-is-a-mitm-1fc329d898fb?source=friends_link&sk=3c99970c55a899ad9ef41f126efcde0e)
    * Research: [ How to take over the computer of any Java (or Closure or Scala) Developer. ](https://max.computer/blog/how-to-take-over-the-computer-of-any-java-or-clojure-or-scala-developer/)
    * Proof of Concept: [ mveytsman/dilettante ](https://github.com/mveytsman/dilettante)
    * Additional Gradle &amp; Maven plugin: [ Announcing nohttp ](https://spring.io/blog/2019/06/10/announcing-nohttp)
    * Java Ecosystem Announcement: [ HTTP Decommission Artifact Server Announcements ](https://gist.github.com/JLLeitschuh/789e49e3d34092a005031a0a1880af99)
    * Common Weakness Enumeration: [CWE-300](https://cwe.mitre.org/data/definitions/300.html).
    * Common Weakness Enumeration: [CWE-319](https://cwe.mitre.org/data/definitions/319.html).
    * Common Weakness Enumeration: [CWE-494](https://cwe.mitre.org/data/definitions/494.html).
    * Common Weakness Enumeration: [CWE-829](https://cwe.mitre.org/data/definitions/829.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-917/OgnlInjection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-917/OgnlInjection.bqrs
  metadata:
    name: OGNL Expression Language statement with user-controlled input
    description: |-
      Evaluation of OGNL Expression Language statement with user-controlled input can
                      lead to execution of arbitrary code.
    kind: path-problem
    problem.severity: error
    security-severity: 9.8
    precision: high
    id: java/ognl-injection
    tags: |-
      security
             external/cwe/cwe-917
  queryHelp: "# OGNL Expression Language statement with user-controlled input\nObject-Graph\
    \ Navigation Language (OGNL) is an open-source Expression Language (EL) for Java.\
    \ OGNL can create or change executable code, consequently it can introduce critical\
    \ security flaws to any application that uses it. Evaluation of unvalidated expressions\
    \ is a common flaw in OGNL. This exposes the properties of Java objects to modification\
    \ by an attacker and may allow them to execute arbitrary code.\n\n\n## Recommendation\n\
    The general recommendation is to avoid evaluating untrusted ONGL expressions.\
    \ If user-provided OGNL expressions must be evaluated, do this in a sandbox and\
    \ validate the expressions before evaluation.\n\n\n## Example\nIn the following\
    \ examples, the code accepts an OGNL expression from the user and evaluates it.\n\
    \nIn the first example, the user-provided OGNL expression is parsed and evaluated.\n\
    \nThe second example validates the expression and evaluates it inside a sandbox.\
    \ You can add a sandbox by setting a system property, as shown in the example,\
    \ or by adding `-Dognl.security.manager` to JVM arguments.\n\n\n```java\nimport\
    \ ognl.Ognl;\nimport ognl.OgnlException;\n\npublic void evaluate(HttpServletRequest\
    \ request, Object root) throws OgnlException {\n  String expression = request.getParameter(\"\
    expression\");\n\n  // BAD: User provided expression is evaluated\n  Ognl.getValue(expression,\
    \ root);\n  \n  // GOOD: The name is validated and expression is evaluated in\
    \ sandbox\n  System.setProperty(\"ognl.security.manager\", \"\"); // Or add -Dognl.security.manager\
    \ to JVM args\n  if (isValid(expression)) {\n    Ognl.getValue(expression, root);\n\
    \  } else {\n    // Reject the request\n  }\n}\n\npublic void isValid(Strig expression)\
    \ {\n  // Custom method to validate the expression.\n  // For instance, make sure\
    \ it doesn't include unexpected code.\n}\n\n```\n\n## References\n* Apache Commons:\
    \ [Apache Commons OGNL](https://commons.apache.org/proper/commons-ognl/).\n* Struts\
    \ security: [Proactively protect from OGNL Expression Injections attacks](https://struts.apache.org/security/#proactively-protect-from-ognl-expression-injections-attacks-if-easily-applicable).\n\
    * Common Weakness Enumeration: [CWE-917](https://cwe.mitre.org/data/definitions/917.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-918/RequestForgery.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-918/RequestForgery.bqrs
  metadata:
    name: Server-side request forgery
    description: |-
      Making web requests based on unvalidated user-input
                    may cause the server to communicate with malicious servers.
    kind: path-problem
    problem.severity: error
    security-severity: 9.1
    precision: high
    id: java/ssrf
    tags: |-
      security
             external/cwe/cwe-918
  queryHelp: "# Server-side request forgery\nDirectly incorporating user input into\
    \ an HTTP request without validating the input can facilitate server-side request\
    \ forgery (SSRF) attacks. In these attacks, the server may be tricked into making\
    \ a request and interacting with an attacker-controlled server.\n\n\n## Recommendation\n\
    To guard against SSRF attacks, you should avoid putting user-provided input directly\
    \ into a request URL. Instead, maintain a list of authorized URLs on the server;\
    \ then choose from that list based on the input provided. Alternatively, ensure\
    \ requests constructed from user input are limited to a particular host or more\
    \ restrictive URL prefix.\n\n\n## Example\nThe following example shows an HTTP\
    \ request parameter being used directly to form a new request without validating\
    \ the input, which facilitates SSRF attacks. It also shows how to remedy the problem\
    \ by validating the user input against a known fixed string.\n\n\n```java\nimport\
    \ java.net.http.HttpClient;\n\npublic class SSRF extends HttpServlet {\n\tprivate\
    \ static final String VALID_URI = \"http://lgtm.com\";\n\tprivate HttpClient client\
    \ = HttpClient.newHttpClient();\n\n\tprotected void doGet(HttpServletRequest request,\
    \ HttpServletResponse response)\n\t\tthrows ServletException, IOException {\n\t\
    \tURI uri = new URI(request.getParameter(\"uri\"));\n\t\t// BAD: a request parameter\
    \ is incorporated without validation into a Http request\n\t\tHttpRequest r =\
    \ HttpRequest.newBuilder(uri).build();\n\t\tclient.send(r, null);\n\n\t\t// GOOD:\
    \ the request parameter is validated against a known fixed string\n\t\tif (VALID_URI.equals(request.getParameter(\"\
    uri\"))) {\n\t\t\tHttpRequest r2 = HttpRequest.newBuilder(uri).build();\n\t\t\t\
    client.send(r2, null);\n\t\t}\n\t}\n}\n\n```\n\n## References\n* [OWASP SSRF](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)\n\
    * Common Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-925/ImproperIntentVerification.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-925/ImproperIntentVerification.bqrs
  metadata:
    name: Improper verification of intent by broadcast receiver
    description: A broadcast receiver that does not verify intents it receives may
      be susceptible to unintended behavior by third party applications sending it
      explicit intents.
    kind: problem
    problem.severity: warning
    security-severity: 8.2
    precision: high
    id: java/improper-intent-verification
    tags: |-
      security
             external/cwe/cwe-925
  queryHelp: |
    # Improper verification of intent by broadcast receiver
    When an Android application uses a `BroadcastReceiver` to receive intents, it is also able to receive explicit intents that are sent directly to it, regardless of its filter. Certain intent actions are only able to be sent by the operating system, not third-party applications. However, a `BroadcastReceiver` that is registered to receive system intents is still able to receive intents from a third-party application, so it should check that the intent received has the expected action. Otherwise, a third-party application could impersonate the system this way to cause unintended behavior, such as a denial of service.


    ## Example
    In the following code, the `ShutdownReceiver` initiates a shutdown procedure upon receiving an intent, without checking that the received action is indeed `ACTION_SHUTDOWN`. This allows third-party applications to send explicit intents to this receiver to cause a denial of service.


    ```java
    public class ShutdownReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(final Context context, final Intent intent) {
            // BAD: The code does not check if the intent is an ACTION_SHUTDOWN intent
            mainActivity.saveLocalData();
            mainActivity.stopActivity();
        }
    }
    ```

    ```xml
    <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="test">
        <application>
            <receiver android:name=".BootReceiverXml">
                <intent-filter>
                    <action android:name="android.intent.action.BOOT_COMPLETED" />
                </intent-filter>
            </receiver>
        </application>
    </manifest>
    ```

    ## Recommendation
    In the `onReceive` method of a `BroadcastReceiver`, the action of the received Intent should be checked. The following code demonstrates this.


    ```java
    public class ShutdownReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(final Context context, final Intent intent) {
            // GOOD: The code checks if the intent is an ACTION_SHUTDOWN intent
            if (!intent.getAction().equals(Intent.ACTION_SHUTDOWN)) {
                return;
            }
            mainActivity.saveLocalData();
            mainActivity.stopActivity();
        }
    }
    ```

    ## References
    * Common Weakness Enumeration: [CWE-925](https://cwe.mitre.org/data/definitions/925.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-926/ImplicitlyExportedAndroidComponent.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-926/ImplicitlyExportedAndroidComponent.bqrs
  metadata:
    name: Implicitly exported Android component
    description: "Android components with an '<intent-filter>' and no 'android:exported'\
      \ attribute are implicitly exported, which can allow for improper access to\
      \ the components themselves and to their data."
    kind: problem
    problem.severity: warning
    security-severity: 8.2
    id: java/android/implicitly-exported-component
    tags: |-
      security
             external/cwe/cwe-926
    precision: high
  queryHelp: |
    # Implicitly exported Android component
    The Android manifest file defines configuration settings for Android applications. In this file, components can be declared with intent filters which specify what the components can do and what types of intents the components can respond to. If the `android:exported` attribute is omitted from the component when an intent filter is included, then the component will be implicitly exported.

    An implicitly exported component could allow for improper access to the component and its data.


    ## Recommendation
    Explicitly set the `android:exported` attribute for every component or use permissions to limit access to the component.


    ## Example
    In the example below, the `android:exported` attribute is omitted when an intent filter is used.


    ```xml
    <manifest ... >
        <application ...
            <!-- BAD: this component is implicitly exported -->
            <activity>
                android:name=".Activity">
                <intent-filter>
                    <action android:name="android.intent.action.VIEW" />
                </intent-filter>
            </activity>
        </application>
    </manifest>

    ```
    A corrected version sets the `android:exported` attribute to `false`.


    ```xml
    <manifest ... >
        <application ...
            <!-- GOOD: this component is not exported due to 'android:exported' explicitly set to 'false'-->
            <activity>
                android:name=".Activity">
                android:exported="false"
                <intent-filter>
                    <action android:name="android.intent.action.VIEW" />
                </intent-filter>
            </activity>
        </application>
    </manifest>

    ```

    ## References
    * Android Developers: [App Manifest Overview](https://developer.android.com/guide/topics/manifest/manifest-intro).
    * Android Developers: [The &lt;intent-filter&gt; element](https://developer.android.com/guide/topics/manifest/intent-filter-element).
    * Android Developers: [The android:exported attribute](https://developer.android.com/guide/topics/manifest/activity-element#exported).
    * Android Developers: [The android:permission attribute](https://developer.android.com/guide/topics/manifest/activity-element#prmsn).
    * Android Developers: [Safer component exporting](https://developer.android.com/about/versions/12/behavior-changes-12#exported).
    * Common Weakness Enumeration: [CWE-926](https://cwe.mitre.org/data/definitions/926.html).
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-927/ImplicitPendingIntents.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-927/ImplicitPendingIntents.bqrs
  metadata:
    name: Use of implicit PendingIntents
    description: |-
      Sending an implicit and mutable 'PendingIntent' to an unspecified third party
                    component may provide an attacker with access to internal components of the
                    application or cause other unintended effects.
    kind: path-problem
    problem.severity: error
    security-severity: 8.2
    precision: high
    id: java/android/implicit-pendingintents
    tags: |-
      security
             external/cwe/cwe-927
  queryHelp: "# Use of implicit PendingIntents\nA `PendingIntent` is used to wrap\
    \ an `Intent` that will be supplied and executed by another application. When\
    \ the `Intent` is executed, it behaves as if it were run directly by the supplying\
    \ application, using the privileges of that application.\n\nIf a `PendingIntent`\
    \ is configured to be mutable, the fields of its internal `Intent` can be changed\
    \ by the receiving application if they were not previously set. This means that\
    \ a mutable `PendingIntent` that has not defined a destination component (that\
    \ is, an implicit `PendingIntent`) can be altered to execute an arbitrary action\
    \ with the privileges of the application that created it.\n\nA malicious application\
    \ can access an implicit `PendingIntent` as follows:\n\n* It is wrapped and sent\
    \ as an extra of another implicit `Intent`.\n* It is sent as the action of a `Slide`.\n\
    * It is sent as the action of a `Notification`.\n\n\nOn gaining access, the attacker\
    \ can modify the underlying `Intent` and execute an arbitrary action with elevated\
    \ privileges. This could give the malicious application access to private components\
    \ of the victim application, or the ability to perform actions without having\
    \ the necessary permissions.\n\n\n## Recommendation\nAvoid creating implicit `PendingIntent`s.\
    \ This means that the underlying `Intent` should always have an explicit destination\
    \ component.\n\nWhen you add the `PendingIntent` as an extra of another `Intent`,\
    \ make sure that this second `Intent` also has an explicit destination component,\
    \ so that it is not delivered to untrusted applications.\n\nCreate the `PendingIntent`\
    \ using the flag `FLAG_IMMUTABLE` whenever possible, to prevent the destination\
    \ component from modifying empty fields of the underlying `Intent`.\n\n\n## Example\n\
    In the following examples, a `PendingIntent` is created and wrapped as an extra\
    \ of another `Intent`.\n\nIn the first example, both the `PendingIntent` and the\
    \ `Intent` it is wrapped in are implicit, making them vulnerable to attack.\n\n\
    In the second example, the issue is avoided by adding explicit destination components\
    \ to the `PendingIntent` and the wrapping `Intent`.\n\nThe third example uses\
    \ the `FLAG_IMMUTABLE` flag to prevent the underlying `Intent` from being modified\
    \ by the destination component.\n\n\n```java\nimport android.app.Activity;\nimport\
    \ android.app.PendingIntent;\nimport android.content.Intent;\nimport android.os.Bundle;\n\
    \npublic class ImplicitPendingIntents extends Activity {\n\n\tpublic void onCreate(Bundle\
    \ savedInstance) {\n\t\t{\n\t\t\t// BAD: an implicit Intent is used to create\
    \ a PendingIntent.\n\t\t\t// The PendingIntent is then added to another implicit\
    \ Intent\n\t\t\t// and started.\n\t\t\tIntent baseIntent = new Intent();\n\t\t\
    \tPendingIntent pi =\n\t\t\t\t\tPendingIntent.getActivity(this, 0, baseIntent,\
    \ PendingIntent.FLAG_ONE_SHOT);\n\t\t\tIntent fwdIntent = new Intent(\"SOME_ACTION\"\
    );\n\t\t\tfwdIntent.putExtra(\"fwdIntent\", pi);\n\t\t\tsendBroadcast(fwdIntent);\n\
    \t\t}\n\n\t\t{\n\t\t\t// GOOD: both the PendingIntent and the wrapping Intent\
    \ are explicit.\n\t\t\tIntent safeIntent = new Intent(this, AnotherActivity.class);\n\
    \t\t\tPendingIntent pi =\n\t\t\t\t\tPendingIntent.getActivity(this, 0, safeIntent,\
    \ PendingIntent.FLAG_ONE_SHOT);\n\t\t\tIntent fwdIntent = new Intent();\n\t\t\t\
    fwdIntent.setClassName(\"destination.package\", \"DestinationClass\");\n\t\t\t\
    fwdIntent.putExtra(\"fwdIntent\", pi);\n\t\t\tstartActivity(fwdIntent);\n\t\t\
    }\n\n\t\t{\n\t\t\t// GOOD: The PendingIntent is created with FLAG_IMMUTABLE.\n\
    \t\t\tIntent baseIntent = new Intent(\"SOME_ACTION\");\n\t\t\tPendingIntent pi\
    \ =\n\t\t\t\t\tPendingIntent.getActivity(this, 0, baseIntent, PendingIntent.FLAG_IMMUTABLE);\n\
    \t\t\tIntent fwdIntent = new Intent();\n\t\t\tfwdIntent.setClassName(\"destination.package\"\
    , \"DestinationClass\");\n\t\t\tfwdIntent.putExtra(\"fwdIntent\", pi);\n\t\t\t\
    startActivity(fwdIntent);\n\t\t}\n\t}\n}\n\n```\n\n## References\n* Google Help:\
    \ [ Remediation for Implicit PendingIntent Vulnerability ](https://support.google.com/faqs/answer/10437428?hl=en)\n\
    * University of Potsdam: [ PIAnalyzer: A precise approach for PendingIntent vulnerability\
    \ analysis ](https://www.cs.uni-potsdam.de/se/papers/esorics18.pdf)\n* Common\
    \ Weakness Enumeration: [CWE-927](https://cwe.mitre.org/data/definitions/927.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Security/CWE/CWE-940/AndroidIntentRedirection.ql
  relativeBqrsPath: codeql/java-queries/Security/CWE/CWE-940/AndroidIntentRedirection.bqrs
  metadata:
    name: Android Intent redirection
    description: |-
      Starting Android components with user-provided Intents
                    can provide access to internal components of the application,
                    increasing the attack surface and potentially causing unintended effects.
    kind: path-problem
    problem.severity: error
    security-severity: 7.5
    precision: high
    id: java/android/intent-redirection
    tags: |-
      security
             external/cwe/cwe-926
             external/cwe/cwe-940
  queryHelp: "# Android Intent redirection\nAn exported Android component that obtains\
    \ a user-provided Intent and uses it to launch another component can be exploited\
    \ to obtain access to private, unexported components of the same app or to launch\
    \ other apps' components on behalf of the victim app.\n\n\n## Recommendation\n\
    Do not export components that start other components from a user-provided Intent.\
    \ They can be made private by setting the `android:exported` property to `false`\
    \ in the app's Android Manifest.\n\nIf this is not possible, restrict either which\
    \ apps can send Intents to the affected component, or which components can be\
    \ started from it.\n\n\n## Example\nThe following snippet contains three examples.\
    \ In the first example, an arbitrary component can be started from the externally\
    \ provided `forward_intent` Intent. In the second example, the destination component\
    \ of the Intent is first checked to make sure it is safe. In the third example,\
    \ the component that created the Intent is first checked to make sure it comes\
    \ from a trusted origin.\n\n\n```java\n// BAD: A user-provided Intent is used\
    \ to launch an arbitrary component\nIntent forwardIntent = (Intent) getIntent().getParcelableExtra(\"\
    forward_intent\");\nstartActivity(forwardIntent);\n\n// GOOD: The destination\
    \ component is checked before launching it\nIntent forwardIntent = (Intent) getIntent().getParcelableExtra(\"\
    forward_intent\");\nComponentName destinationComponent = forwardIntent.resolveActivity(getPackageManager());\n\
    if (destinationComponent.getPackageName().equals(\"safe.package\") && \n    destinationComponent.getClassName().equals(\"\
    SafeClass\")) {\n    startActivity(forwardIntent);\n}\n\n// GOOD: The component\
    \ that sent the Intent is checked before launching the destination component\n\
    Intent forwardIntent = (Intent) getIntent().getParcelableExtra(\"forward_intent\"\
    );\nComponentName originComponent = getCallingActivity();\nif (originComponent.getPackageName().equals(\"\
    trusted.package\") && originComponent.getClassName().equals(\"TrustedClass\"))\
    \ {\n    startActivity(forwardIntent);\n}\n\n```\n\n## References\n* Google: [Remediation\
    \ for Intent Redirection Vulnerability](https://support.google.com/faqs/answer/9267555?hl=en).\n\
    * OWASP Mobile Security Testing Guide: [Intents](https://mobile-security.gitbook.io/mobile-security-testing-guide/android-testing-guide/0x05a-platform-overview#intents).\n\
    * Android Developers: [The android:exported attribute](https://developer.android.com/guide/topics/manifest/activity-element#exported).\n\
    * Common Weakness Enumeration: [CWE-926](https://cwe.mitre.org/data/definitions/926.html).\n\
    * Common Weakness Enumeration: [CWE-940](https://cwe.mitre.org/data/definitions/940.html).\n"
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Telemetry/DatabaseQualityDiagnostics.ql
  relativeBqrsPath: codeql/java-queries/Telemetry/DatabaseQualityDiagnostics.bqrs
  metadata:
    name: Low Java analysis quality
    description: Low Java analysis quality
    kind: diagnostic
    id: java/diagnostic/database-quality
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Telemetry/ExternalLibraryUsage.ql
  relativeBqrsPath: codeql/java-queries/Telemetry/ExternalLibraryUsage.bqrs
  metadata:
    name: External libraries
    description: A list of external libraries used in the code
    kind: metric
    tags: summary telemetry
    id: java/telemetry/external-libs
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Telemetry/ExtractorInformation.ql
  relativeBqrsPath: codeql/java-queries/Telemetry/ExtractorInformation.bqrs
  metadata:
    name: Java extraction information
    description: Information about the extraction for a Java database
    kind: metric
    tags: summary telemetry
    id: java/telemetry/extraction-information
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Telemetry/SupportedExternalApis.ql
  relativeBqrsPath: codeql/java-queries/Telemetry/SupportedExternalApis.bqrs
  metadata:
    name: Usage of supported APIs coming from external libraries
    description: A list of supported 3rd party APIs used in the codebase. Excludes
      test and generated code.
    kind: metric
    tags: summary telemetry exclude-from-incremental
    id: java/telemetry/supported-external-api
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Telemetry/SupportedExternalSinks.ql
  relativeBqrsPath: codeql/java-queries/Telemetry/SupportedExternalSinks.bqrs
  metadata:
    name: Supported sinks in external libraries
    description: A list of 3rd party APIs detected as sinks. Excludes test and generated
      code.
    kind: metric
    tags: summary telemetry exclude-from-incremental
    id: java/telemetry/supported-external-api-sinks
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Telemetry/SupportedExternalSources.ql
  relativeBqrsPath: codeql/java-queries/Telemetry/SupportedExternalSources.bqrs
  metadata:
    name: Supported sources in external libraries
    description: A list of 3rd party APIs detected as sources. Excludes test and generated
      code.
    kind: metric
    tags: summary telemetry
    id: java/telemetry/supported-external-api-sources
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Telemetry/SupportedExternalTaint.ql
  relativeBqrsPath: codeql/java-queries/Telemetry/SupportedExternalTaint.bqrs
  metadata:
    name: Supported flow steps in external libraries
    description: A list of 3rd party APIs detected as flow steps. Excludes test and
      generated code.
    kind: metric
    tags: summary telemetry
    id: java/telemetry/supported-external-api-taint
 -
  pack: codeql/java-queries#0
  relativeQueryPath: Telemetry/UnsupportedExternalAPIs.ql
  relativeBqrsPath: codeql/java-queries/Telemetry/UnsupportedExternalAPIs.bqrs
  metadata:
    name: Usage of unsupported APIs coming from external libraries
    description: A list of 3rd party APIs used in the codebase. Excludes test and
      generated code.
    kind: metric
    tags: summary telemetry exclude-from-incremental
    id: java/telemetry/unsupported-external-api
extensionPacks: []
packs:
  codeql/threat-models#2:
    name: codeql/threat-models
    version: 1.0.27
    isLibrary: true
    isExtensionPack: false
    localPath: file:///home/m496839/.codeql/packages/codeql/java-queries/1.6.1/.codeql/libraries/codeql/threat-models/1.0.27/
    localPackDefinitionFile: file:///home/m496839/.codeql/packages/codeql/java-queries/1.6.1/.codeql/libraries/codeql/threat-models/1.0.27/qlpack.yml
    headSha: ff54dfe8aae51d15d5c032af2ba8a54b50043d41
    runDataExtensions: []
  codeql/java-all#1:
    name: codeql/java-all
    version: 7.4.0
    isLibrary: true
    isExtensionPack: false
    localPath: file:///home/m496839/.codeql/packages/codeql/java-queries/1.6.1/.codeql/libraries/codeql/java-all/7.4.0/
    localPackDefinitionFile: file:///home/m496839/.codeql/packages/codeql/java-queries/1.6.1/.codeql/libraries/codeql/java-all/7.4.0/qlpack.yml
    headSha: ff54dfe8aae51d15d5c032af2ba8a54b50043d41
    runDataExtensions: []
  codeql/util#3:
    name: codeql/util
    version: 2.0.14
    isLibrary: true
    isExtensionPack: false
    localPath: file:///home/m496839/.codeql/packages/codeql/java-queries/1.6.1/.codeql/libraries/codeql/util/2.0.14/
    localPackDefinitionFile: file:///home/m496839/.codeql/packages/codeql/java-queries/1.6.1/.codeql/libraries/codeql/util/2.0.14/qlpack.yml
    headSha: ff54dfe8aae51d15d5c032af2ba8a54b50043d41
    runDataExtensions: []
  codeql/java-queries#0:
    name: codeql/java-queries
    version: 1.6.1
    isLibrary: false
    isExtensionPack: false
    localPath: file:///home/m496839/.codeql/packages/codeql/java-queries/1.6.1/
    localPackDefinitionFile: file:///home/m496839/.codeql/packages/codeql/java-queries/1.6.1/qlpack.yml
    headSha: ff54dfe8aae51d15d5c032af2ba8a54b50043d41
    runDataExtensions:
     -
      pack: codeql/java-all#1
      relativePath: ext/android.app.model.yml
      index: 0
      firstRowId: 0
      rowCount: 77
      locations:
        lineNumbers: A=6+1*76
        columnNumbers: A=9*77
     -
      pack: codeql/java-all#1
      relativePath: ext/android.app.model.yml
      index: 1
      firstRowId: 77
      rowCount: 103
      locations:
        lineNumbers: A=88+1*102
        columnNumbers: A=9*103
     -
      pack: codeql/java-all#1
      relativePath: ext/android.content.model.yml
      index: 0
      firstRowId: 180
      rowCount: 31
      locations:
        lineNumbers: A=7+1*30
        columnNumbers: A=9*31
     -
      pack: codeql/java-all#1
      relativePath: ext/android.content.model.yml
      index: 1
      firstRowId: 211
      rowCount: 24
      locations:
        lineNumbers: A=42+1*23
        columnNumbers: A=9*24
     -
      pack: codeql/java-all#1
      relativePath: ext/android.content.model.yml
      index: 2
      firstRowId: 235
      rowCount: 154
      locations:
        lineNumbers: A=70+1*13+2+1*51+2+1*87
        columnNumbers: A=9*154
     -
      pack: codeql/java-all#1
      relativePath: ext/android.database.model.yml
      index: 0
      firstRowId: 389
      rowCount: 7
      locations:
        lineNumbers: A=6+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/android.database.model.yml
      index: 1
      firstRowId: 396
      rowCount: 11
      locations:
        lineNumbers: A=17+1*10
        columnNumbers: A=9*11
     -
      pack: codeql/java-all#1
      relativePath: ext/android.database.sqlite.model.yml
      index: 0
      firstRowId: 407
      rowCount: 52
      locations:
        lineNumbers: A=6+1*51
        columnNumbers: A=9*52
     -
      pack: codeql/java-all#1
      relativePath: ext/android.database.sqlite.model.yml
      index: 1
      firstRowId: 459
      rowCount: 30
      locations:
        lineNumbers: A=62+1*29
        columnNumbers: A=9*30
     -
      pack: codeql/java-all#1
      relativePath: ext/android.net.model.yml
      index: 0
      firstRowId: 489
      rowCount: 60
      locations:
        lineNumbers: A=6+1*59
        columnNumbers: A=9*60
     -
      pack: codeql/java-all#1
      relativePath: ext/android.os.model.yml
      index: 0
      firstRowId: 549
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/android.os.model.yml
      index: 1
      firstRowId: 551
      rowCount: 122
      locations:
        lineNumbers: A=12+1*25+2+1*95
        columnNumbers: A=9*122
     -
      pack: codeql/java-all#1
      relativePath: ext/android.os.model.yml
      index: 2
      firstRowId: 673
      rowCount: 1
      locations:
        lineNumbers: A=139
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/android.support.v4.app.model.yml
      index: 0
      firstRowId: 674
      rowCount: 11
      locations:
        lineNumbers: A=6+1*10
        columnNumbers: A=9*11
     -
      pack: codeql/java-all#1
      relativePath: ext/android.util.model.yml
      index: 0
      firstRowId: 685
      rowCount: 16
      locations:
        lineNumbers: A=6+1*15
        columnNumbers: A=9*16
     -
      pack: codeql/java-all#1
      relativePath: ext/android.util.model.yml
      index: 1
      firstRowId: 701
      rowCount: 6
      locations:
        lineNumbers: A=26+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/android.webkit.model.yml
      index: 0
      firstRowId: 707
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/android.webkit.model.yml
      index: 1
      firstRowId: 709
      rowCount: 3
      locations:
        lineNumbers: A=13+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/android.widget.model.yml
      index: 0
      firstRowId: 712
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/android.widget.model.yml
      index: 1
      firstRowId: 713
      rowCount: 1
      locations:
        lineNumbers: A=11
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/androidx.core.app.model.yml
      index: 0
      firstRowId: 714
      rowCount: 47
      locations:
        lineNumbers: A=6+1*46
        columnNumbers: A=9*47
     -
      pack: codeql/java-all#1
      relativePath: ext/androidx.core.app.model.yml
      index: 1
      firstRowId: 761
      rowCount: 95
      locations:
        lineNumbers: A=58+1*94
        columnNumbers: A=9*95
     -
      pack: codeql/java-all#1
      relativePath: ext/androidx.fragment.app.model.yml
      index: 0
      firstRowId: 856
      rowCount: 11
      locations:
        lineNumbers: A=6+1*10
        columnNumbers: A=9*11
     -
      pack: codeql/java-all#1
      relativePath: ext/androidx.slice.builders.model.yml
      index: 0
      firstRowId: 867
      rowCount: 88
      locations:
        lineNumbers: A=6+1*87
        columnNumbers: A=9*88
     -
      pack: codeql/java-all#1
      relativePath: ext/androidx.slice.model.yml
      index: 0
      firstRowId: 955
      rowCount: 5
      locations:
        lineNumbers: A=6+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/androidx.slice.model.yml
      index: 1
      firstRowId: 960
      rowCount: 2
      locations:
        lineNumbers: A=15+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/ch.ethz.ssh2.model.yml
      index: 0
      firstRowId: 962
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/cn.hutool.core.codec.model.yml
      index: 0
      firstRowId: 964
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/com.alibaba.com.caucho.hessian.io.model.yml
      index: 0
      firstRowId: 965
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/com.alibaba.druid.sql.model.yml
      index: 0
      firstRowId: 967
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/com.alibaba.druid.sql.repository.model.yml
      index: 0
      firstRowId: 968
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/com.alibaba.fastjson2.model.yml
      index: 0
      firstRowId: 969
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/com.amazonaws.auth.model.yml
      index: 0
      firstRowId: 970
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/com.auth0.jwt.algorithms.model.yml
      index: 0
      firstRowId: 972
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/com.azure.identity.model.yml
      index: 0
      firstRowId: 978
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/com.caucho.burlap.io.model.yml
      index: 0
      firstRowId: 981
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/com.caucho.hessian.io.model.yml
      index: 0
      firstRowId: 982
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/com.cedarsoftware.util.io.model.yml
      index: 0
      firstRowId: 984
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/com.esotericsoftware.kryo.io.model.yml
      index: 0
      firstRowId: 986
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/com.esotericsoftware.kryo5.io.model.yml
      index: 0
      firstRowId: 987
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/com.esotericsoftware.yamlbeans.model.yml
      index: 0
      firstRowId: 988
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/com.fasterxml.jackson.core.model.yml
      index: 0
      firstRowId: 989
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/com.fasterxml.jackson.databind.model.yml
      index: 0
      firstRowId: 990
      rowCount: 8
      locations:
        lineNumbers: A=6+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/com.fasterxml.jackson.databind.model.yml
      index: 1
      firstRowId: 998
      rowCount: 2
      locations:
        lineNumbers: A=18+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/com.google.common.base.model.yml
      index: 0
      firstRowId: 1000
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/com.google.common.base.model.yml
      index: 1
      firstRowId: 1004
      rowCount: 87
      locations:
        lineNumbers: A=14+1*86
        columnNumbers: A=9*87
     -
      pack: codeql/java-all#1
      relativePath: ext/com.google.common.cache.model.yml
      index: 0
      firstRowId: 1091
      rowCount: 17
      locations:
        lineNumbers: A=6+1+2*2+1*13
        columnNumbers: A=9*17
     -
      pack: codeql/java-all#1
      relativePath: ext/com.google.common.collect.model.yml
      index: 0
      firstRowId: 1108
      rowCount: 553
      locations:
        lineNumbers: A=8+1*552
        columnNumbers: A=9*553
     -
      pack: codeql/java-all#1
      relativePath: ext/com.google.common.flogger.model.yml
      index: 0
      firstRowId: 1661
      rowCount: 29
      locations:
        lineNumbers: A=6+1*28
        columnNumbers: A=9*29
     -
      pack: codeql/java-all#1
      relativePath: ext/com.google.common.io.model.yml
      index: 0
      firstRowId: 1690
      rowCount: 10
      locations:
        lineNumbers: A=6+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/com.google.common.io.model.yml
      index: 1
      firstRowId: 1700
      rowCount: 73
      locations:
        lineNumbers: A=20+1*72
        columnNumbers: A=9*73
     -
      pack: codeql/java-all#1
      relativePath: ext/com.google.gson.model.yml
      index: 0
      firstRowId: 1773
      rowCount: 52
      locations:
        lineNumbers: A=6+1*51
        columnNumbers: A=9*52
     -
      pack: codeql/java-all#1
      relativePath: ext/com.hubspot.jinjava.model.yml
      index: 0
      firstRowId: 1825
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/com.jcraft.jsch.model.yml
      index: 0
      firstRowId: 1827
      rowCount: 5
      locations:
        lineNumbers: A=6+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/com.jcraft.jsch.model.yml
      index: 1
      firstRowId: 1832
      rowCount: 1
      locations:
        lineNumbers: A=15
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/com.microsoft.sqlserver.jdbc.model.yml
      index: 0
      firstRowId: 1833
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/com.mitchellbosecke.pebble.model.yml
      index: 0
      firstRowId: 1837
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/com.mongodb.model.yml
      index: 0
      firstRowId: 1839
      rowCount: 10
      locations:
        lineNumbers: A=6+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/com.opensymphony.xwork2.ognl.model.yml
      index: 0
      firstRowId: 1849
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/com.rabbitmq.client.impl.model.yml
      index: 0
      firstRowId: 1852
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/com.rabbitmq.client.impl.model.yml
      index: 1
      firstRowId: 1855
      rowCount: 3
      locations:
        lineNumbers: A=13+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/com.rabbitmq.client.model.yml
      index: 0
      firstRowId: 1858
      rowCount: 18
      locations:
        lineNumbers: A=6+1*17
        columnNumbers: A=9*18
     -
      pack: codeql/java-all#1
      relativePath: ext/com.rabbitmq.client.model.yml
      index: 1
      firstRowId: 1876
      rowCount: 4
      locations:
        lineNumbers: A=28+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/com.sshtools.j2ssh.authentication.model.yml
      index: 0
      firstRowId: 1880
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/com.sun.crypto.provider.model.yml
      index: 0
      firstRowId: 1883
      rowCount: 19
      locations:
        lineNumbers: A=6+1*18
        columnNumbers: A=9*19
     -
      pack: codeql/java-all#1
      relativePath: ext/com.sun.jndi.ldap.model.yml
      index: 0
      firstRowId: 1902
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/com.sun.net.httpserver.model.yml
      index: 0
      firstRowId: 1906
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/com.sun.net.ssl.model.yml
      index: 0
      firstRowId: 1909
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/com.sun.rowset.model.yml
      index: 0
      firstRowId: 1912
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/com.sun.security.auth.module.model.yml
      index: 0
      firstRowId: 1915
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/com.sun.security.ntlm.model.yml
      index: 0
      firstRowId: 1917
      rowCount: 5
      locations:
        lineNumbers: A=6+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/com.sun.security.sasl.digest.model.yml
      index: 0
      firstRowId: 1922
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/com.thoughtworks.xstream.model.yml
      index: 0
      firstRowId: 1925
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/com.trilead.ssh2.model.yml
      index: 0
      firstRowId: 1926
      rowCount: 13
      locations:
        lineNumbers: A=6+1*12
        columnNumbers: A=9*13
     -
      pack: codeql/java-all#1
      relativePath: ext/com.unboundid.ldap.sdk.model.yml
      index: 0
      firstRowId: 1939
      rowCount: 17
      locations:
        lineNumbers: A=6+1*16
        columnNumbers: A=9*17
     -
      pack: codeql/java-all#1
      relativePath: ext/com.zaxxer.hikari.model.yml
      index: 0
      firstRowId: 1956
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/experimental/android.webkit.model.yml
      index: 0
      firstRowId: 1958
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/experimental/com.google.common.io.model.yml
      index: 0
      firstRowId: 1959
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/experimental/com.jcraft.jsch.model.yml
      index: 0
      firstRowId: 1965
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/experimental/com.jfinal.core.model.yml
      index: 0
      firstRowId: 1966
      rowCount: 23
      locations:
        lineNumbers: A=6+1*22
        columnNumbers: A=9*23
     -
      pack: codeql/java-all#1
      relativePath: ext/experimental/java.io.model.yml
      index: 0
      firstRowId: 1989
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/experimental/java.lang.model.yml
      index: 0
      firstRowId: 1990
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/experimental/java.lang.model.yml
      index: 1
      firstRowId: 1991
      rowCount: 2
      locations:
        lineNumbers: A=11+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/experimental/java.util.concurrent.model.yml
      index: 0
      firstRowId: 1993
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/experimental/javax.servlet.http.model.yml
      index: 0
      firstRowId: 1994
      rowCount: 5
      locations:
        lineNumbers: A=6+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/experimental/org.apache.logging.log4j.message.model.yml
      index: 0
      firstRowId: 1999
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/experimental/org.apache.logging.log4j.model.yml
      index: 0
      firstRowId: 2003
      rowCount: 357
      locations:
        lineNumbers: A=6+1*356
        columnNumbers: A=9*357
     -
      pack: codeql/java-all#1
      relativePath: ext/flexjson.model.yml
      index: 0
      firstRowId: 2360
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/freemarker.cache.model.yml
      index: 0
      firstRowId: 2361
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/freemarker.template.model.yml
      index: 0
      firstRowId: 2362
      rowCount: 7
      locations:
        lineNumbers: A=6+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.applet.model.yml
      index: 0
      firstRowId: 2369
      rowCount: 11
      locations:
        lineNumbers: A=7+1*10
        columnNumbers: A=9*11
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.applet.model.yml
      index: 1
      firstRowId: 2380
      rowCount: 19
      locations:
        lineNumbers: A=22+1*18
        columnNumbers: A=9*19
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.beans.beancontext.model.yml
      index: 0
      firstRowId: 2399
      rowCount: 37
      locations:
        lineNumbers: A=7+1*36
        columnNumbers: A=9*37
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.beans.beancontext.model.yml
      index: 1
      firstRowId: 2436
      rowCount: 42
      locations:
        lineNumbers: A=48+1*41
        columnNumbers: A=9*42
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.beans.model.yml
      index: 0
      firstRowId: 2478
      rowCount: 139
      locations:
        lineNumbers: A=7+1*138
        columnNumbers: A=9*139
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.beans.model.yml
      index: 1
      firstRowId: 2617
      rowCount: 90
      locations:
        lineNumbers: A=150+1*89
        columnNumbers: A=9*90
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.io.model.yml
      index: 0
      firstRowId: 2707
      rowCount: 173
      locations:
        lineNumbers: A=7+1*172
        columnNumbers: A=9*173
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.io.model.yml
      index: 1
      firstRowId: 2880
      rowCount: 278
      locations:
        lineNumbers: A=184+1*277
        columnNumbers: A=9*278
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.annotation.model.yml
      index: 0
      firstRowId: 3158
      rowCount: 10
      locations:
        lineNumbers: A=7+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.annotation.model.yml
      index: 1
      firstRowId: 3168
      rowCount: 1
      locations:
        lineNumbers: A=21
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.constant.model.yml
      index: 0
      firstRowId: 3169
      rowCount: 97
      locations:
        lineNumbers: A=7+1*96
        columnNumbers: A=9*97
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.constant.model.yml
      index: 1
      firstRowId: 3266
      rowCount: 6
      locations:
        lineNumbers: A=108+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.instrument.model.yml
      index: 0
      firstRowId: 3272
      rowCount: 5
      locations:
        lineNumbers: A=7+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.instrument.model.yml
      index: 1
      firstRowId: 3277
      rowCount: 3
      locations:
        lineNumbers: A=16+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.invoke.model.yml
      index: 0
      firstRowId: 3280
      rowCount: 143
      locations:
        lineNumbers: A=7+1*142
        columnNumbers: A=9*143
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.invoke.model.yml
      index: 1
      firstRowId: 3423
      rowCount: 128
      locations:
        lineNumbers: A=154+1*127
        columnNumbers: A=9*128
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.management.model.yml
      index: 0
      firstRowId: 3551
      rowCount: 29
      locations:
        lineNumbers: A=7+1*28
        columnNumbers: A=9*29
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.management.model.yml
      index: 1
      firstRowId: 3580
      rowCount: 38
      locations:
        lineNumbers: A=40+1*37
        columnNumbers: A=9*38
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.model.yml
      index: 0
      firstRowId: 3618
      rowCount: 240
      locations:
        lineNumbers: A=7+1*239
        columnNumbers: A=9*240
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.model.yml
      index: 1
      firstRowId: 3858
      rowCount: 707
      locations:
        lineNumbers: A=251+1*706
        columnNumbers: A=9*707
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.module.model.yml
      index: 0
      firstRowId: 4565
      rowCount: 84
      locations:
        lineNumbers: A=7+1*83
        columnNumbers: A=9*84
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.module.model.yml
      index: 1
      firstRowId: 4649
      rowCount: 10
      locations:
        lineNumbers: A=95+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.ref.model.yml
      index: 0
      firstRowId: 4659
      rowCount: 15
      locations:
        lineNumbers: A=7+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.ref.model.yml
      index: 1
      firstRowId: 4674
      rowCount: 8
      locations:
        lineNumbers: A=26+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.reflect.model.yml
      index: 0
      firstRowId: 4682
      rowCount: 58
      locations:
        lineNumbers: A=7+1*57
        columnNumbers: A=9*58
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.reflect.model.yml
      index: 1
      firstRowId: 4740
      rowCount: 106
      locations:
        lineNumbers: A=69+1*105
        columnNumbers: A=9*106
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.lang.runtime.model.yml
      index: 0
      firstRowId: 4846
      rowCount: 3
      locations:
        lineNumbers: A=7+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.math.model.yml
      index: 0
      firstRowId: 4849
      rowCount: 9
      locations:
        lineNumbers: A=7+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.math.model.yml
      index: 1
      firstRowId: 4858
      rowCount: 91
      locations:
        lineNumbers: A=20+1*90
        columnNumbers: A=9*91
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.net.http.model.yml
      index: 0
      firstRowId: 4949
      rowCount: 93
      locations:
        lineNumbers: A=7+1*92
        columnNumbers: A=9*93
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.net.http.model.yml
      index: 1
      firstRowId: 5042
      rowCount: 38
      locations:
        lineNumbers: A=104+1*37
        columnNumbers: A=9*38
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.net.model.yml
      index: 0
      firstRowId: 5080
      rowCount: 215
      locations:
        lineNumbers: A=7+1*214
        columnNumbers: A=9*215
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.net.model.yml
      index: 1
      firstRowId: 5295
      rowCount: 259
      locations:
        lineNumbers: A=226+1*258
        columnNumbers: A=9*259
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.channels.model.yml
      index: 0
      firstRowId: 5554
      rowCount: 128
      locations:
        lineNumbers: A=7+1*127
        columnNumbers: A=9*128
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.channels.model.yml
      index: 1
      firstRowId: 5682
      rowCount: 79
      locations:
        lineNumbers: A=139+1*78
        columnNumbers: A=9*79
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.channels.spi.model.yml
      index: 0
      firstRowId: 5761
      rowCount: 16
      locations:
        lineNumbers: A=7+1*15
        columnNumbers: A=9*16
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.channels.spi.model.yml
      index: 1
      firstRowId: 5777
      rowCount: 9
      locations:
        lineNumbers: A=27+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.charset.model.yml
      index: 0
      firstRowId: 5786
      rowCount: 35
      locations:
        lineNumbers: A=7+1*34
        columnNumbers: A=9*35
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.charset.model.yml
      index: 1
      firstRowId: 5821
      rowCount: 42
      locations:
        lineNumbers: A=46+1*41
        columnNumbers: A=9*42
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.charset.spi.model.yml
      index: 0
      firstRowId: 5863
      rowCount: 2
      locations:
        lineNumbers: A=7+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.file.attribute.model.yml
      index: 0
      firstRowId: 5865
      rowCount: 23
      locations:
        lineNumbers: A=7+1*22
        columnNumbers: A=9*23
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.file.attribute.model.yml
      index: 1
      firstRowId: 5888
      rowCount: 9
      locations:
        lineNumbers: A=34+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.file.model.yml
      index: 0
      firstRowId: 5897
      rowCount: 85
      locations:
        lineNumbers: A=7+1*84
        columnNumbers: A=9*85
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.file.model.yml
      index: 1
      firstRowId: 5982
      rowCount: 36
      locations:
        lineNumbers: A=96+1*35
        columnNumbers: A=9*36
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.file.spi.model.yml
      index: 0
      firstRowId: 6018
      rowCount: 23
      locations:
        lineNumbers: A=7+1*22
        columnNumbers: A=9*23
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.file.spi.model.yml
      index: 1
      firstRowId: 6041
      rowCount: 14
      locations:
        lineNumbers: A=34+1*13
        columnNumbers: A=9*14
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.model.yml
      index: 0
      firstRowId: 6055
      rowCount: 137
      locations:
        lineNumbers: A=7+1*136
        columnNumbers: A=9*137
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.nio.model.yml
      index: 1
      firstRowId: 6192
      rowCount: 89
      locations:
        lineNumbers: A=148+1*88
        columnNumbers: A=9*89
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.rmi.dgc.model.yml
      index: 0
      firstRowId: 6281
      rowCount: 4
      locations:
        lineNumbers: A=7+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.rmi.dgc.model.yml
      index: 1
      firstRowId: 6285
      rowCount: 2
      locations:
        lineNumbers: A=15+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.rmi.model.yml
      index: 0
      firstRowId: 6287
      rowCount: 29
      locations:
        lineNumbers: A=7+1*28
        columnNumbers: A=9*29
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.rmi.model.yml
      index: 1
      firstRowId: 6316
      rowCount: 5
      locations:
        lineNumbers: A=40+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.rmi.registry.model.yml
      index: 0
      firstRowId: 6321
      rowCount: 6
      locations:
        lineNumbers: A=7+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.rmi.registry.model.yml
      index: 1
      firstRowId: 6327
      rowCount: 7
      locations:
        lineNumbers: A=17+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.rmi.server.model.yml
      index: 0
      firstRowId: 6334
      rowCount: 29
      locations:
        lineNumbers: A=7+1*28
        columnNumbers: A=9*29
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.rmi.server.model.yml
      index: 1
      firstRowId: 6363
      rowCount: 33
      locations:
        lineNumbers: A=40+1*32
        columnNumbers: A=9*33
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.security.cert.model.yml
      index: 0
      firstRowId: 6396
      rowCount: 186
      locations:
        lineNumbers: A=7+1*185
        columnNumbers: A=9*186
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.security.cert.model.yml
      index: 1
      firstRowId: 6582
      rowCount: 87
      locations:
        lineNumbers: A=197+1*86
        columnNumbers: A=9*87
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.security.interfaces.model.yml
      index: 0
      firstRowId: 6669
      rowCount: 11
      locations:
        lineNumbers: A=7+1*10
        columnNumbers: A=9*11
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.security.model.yml
      index: 0
      firstRowId: 6680
      rowCount: 309
      locations:
        lineNumbers: A=7+1*308
        columnNumbers: A=9*309
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.security.model.yml
      index: 1
      firstRowId: 6989
      rowCount: 138
      locations:
        lineNumbers: A=320+1*137
        columnNumbers: A=9*138
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.security.spec.model.yml
      index: 0
      firstRowId: 7127
      rowCount: 66
      locations:
        lineNumbers: A=7+1*65
        columnNumbers: A=9*66
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.security.spec.model.yml
      index: 1
      firstRowId: 7193
      rowCount: 75
      locations:
        lineNumbers: A=77+1*74
        columnNumbers: A=9*75
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.sql.model.yml
      index: 0
      firstRowId: 7268
      rowCount: 290
      locations:
        lineNumbers: A=7+1*289
        columnNumbers: A=9*290
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.sql.model.yml
      index: 1
      firstRowId: 7558
      rowCount: 104
      locations:
        lineNumbers: A=301+1*103
        columnNumbers: A=9*104
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.text.model.yml
      index: 0
      firstRowId: 7662
      rowCount: 144
      locations:
        lineNumbers: A=7+1*143
        columnNumbers: A=9*144
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.text.model.yml
      index: 1
      firstRowId: 7806
      rowCount: 205
      locations:
        lineNumbers: A=155+1*204
        columnNumbers: A=9*205
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.text.spi.model.yml
      index: 0
      firstRowId: 8011
      rowCount: 10
      locations:
        lineNumbers: A=7+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.text.spi.model.yml
      index: 1
      firstRowId: 8021
      rowCount: 5
      locations:
        lineNumbers: A=21+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.time.chrono.model.yml
      index: 0
      firstRowId: 8026
      rowCount: 3
      locations:
        lineNumbers: A=7+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.time.chrono.model.yml
      index: 1
      firstRowId: 8029
      rowCount: 105
      locations:
        lineNumbers: A=14+1*104
        columnNumbers: A=9*105
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.time.format.model.yml
      index: 0
      firstRowId: 8134
      rowCount: 73
      locations:
        lineNumbers: A=7+1*72
        columnNumbers: A=9*73
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.time.format.model.yml
      index: 1
      firstRowId: 8207
      rowCount: 21
      locations:
        lineNumbers: A=84+1*20
        columnNumbers: A=9*21
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.time.model.yml
      index: 0
      firstRowId: 8228
      rowCount: 49
      locations:
        lineNumbers: A=7+1*48
        columnNumbers: A=9*49
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.time.model.yml
      index: 1
      firstRowId: 8277
      rowCount: 292
      locations:
        lineNumbers: A=60+1*291
        columnNumbers: A=9*292
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.time.temporal.model.yml
      index: 0
      firstRowId: 8569
      rowCount: 3
      locations:
        lineNumbers: A=7+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.time.temporal.model.yml
      index: 1
      firstRowId: 8572
      rowCount: 52
      locations:
        lineNumbers: A=14+1*51
        columnNumbers: A=9*52
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.time.zone.model.yml
      index: 0
      firstRowId: 8624
      rowCount: 3
      locations:
        lineNumbers: A=7+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.time.zone.model.yml
      index: 1
      firstRowId: 8627
      rowCount: 20
      locations:
        lineNumbers: A=14+1*19
        columnNumbers: A=9*20
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.concurrent.atomic.model.yml
      index: 0
      firstRowId: 8647
      rowCount: 12
      locations:
        lineNumbers: A=7+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.concurrent.atomic.model.yml
      index: 1
      firstRowId: 8659
      rowCount: 255
      locations:
        lineNumbers: A=23+1*254
        columnNumbers: A=9*255
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.concurrent.locks.model.yml
      index: 0
      firstRowId: 8914
      rowCount: 15
      locations:
        lineNumbers: A=7+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.concurrent.locks.model.yml
      index: 1
      firstRowId: 8929
      rowCount: 116
      locations:
        lineNumbers: A=26+1*115
        columnNumbers: A=9*116
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.concurrent.model.yml
      index: 0
      firstRowId: 9045
      rowCount: 229
      locations:
        lineNumbers: A=7+1*228
        columnNumbers: A=9*229
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.concurrent.model.yml
      index: 1
      firstRowId: 9274
      rowCount: 313
      locations:
        lineNumbers: A=240+1*312
        columnNumbers: A=9*313
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.function.model.yml
      index: 0
      firstRowId: 9587
      rowCount: 37
      locations:
        lineNumbers: A=7+1*36
        columnNumbers: A=9*37
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.jar.model.yml
      index: 0
      firstRowId: 9624
      rowCount: 38
      locations:
        lineNumbers: A=7+1*37
        columnNumbers: A=9*38
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.jar.model.yml
      index: 1
      firstRowId: 9662
      rowCount: 10
      locations:
        lineNumbers: A=49+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.logging.model.yml
      index: 0
      firstRowId: 9672
      rowCount: 63
      locations:
        lineNumbers: A=7+1*62
        columnNumbers: A=9*63
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.logging.model.yml
      index: 1
      firstRowId: 9735
      rowCount: 81
      locations:
        lineNumbers: A=74+1*80
        columnNumbers: A=9*81
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.model.yml
      index: 0
      firstRowId: 9816
      rowCount: 194
      locations:
        lineNumbers: A=7+1*193
        columnNumbers: A=9*194
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.model.yml
      index: 1
      firstRowId: 10010
      rowCount: 680
      locations:
        lineNumbers: A=205+1*679
        columnNumbers: A=9*680
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.prefs.model.yml
      index: 0
      firstRowId: 10690
      rowCount: 26
      locations:
        lineNumbers: A=7+1*25
        columnNumbers: A=9*26
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.prefs.model.yml
      index: 1
      firstRowId: 10716
      rowCount: 31
      locations:
        lineNumbers: A=37+1*30
        columnNumbers: A=9*31
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.random.model.yml
      index: 0
      firstRowId: 10747
      rowCount: 24
      locations:
        lineNumbers: A=7+1*23
        columnNumbers: A=9*24
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.random.model.yml
      index: 1
      firstRowId: 10771
      rowCount: 54
      locations:
        lineNumbers: A=35+1*53
        columnNumbers: A=9*54
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.regex.model.yml
      index: 0
      firstRowId: 10825
      rowCount: 21
      locations:
        lineNumbers: A=7+1*20
        columnNumbers: A=9*21
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.regex.model.yml
      index: 1
      firstRowId: 10846
      rowCount: 23
      locations:
        lineNumbers: A=32+1*22
        columnNumbers: A=9*23
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.spi.model.yml
      index: 0
      firstRowId: 10869
      rowCount: 7
      locations:
        lineNumbers: A=7+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.spi.model.yml
      index: 1
      firstRowId: 10876
      rowCount: 12
      locations:
        lineNumbers: A=18+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.stream.model.yml
      index: 0
      firstRowId: 10888
      rowCount: 102
      locations:
        lineNumbers: A=7+1*101
        columnNumbers: A=9*102
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.stream.model.yml
      index: 1
      firstRowId: 10990
      rowCount: 80
      locations:
        lineNumbers: A=113+1*79
        columnNumbers: A=9*80
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.zip.model.yml
      index: 0
      firstRowId: 11070
      rowCount: 60
      locations:
        lineNumbers: A=7+1*59
        columnNumbers: A=9*60
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/java.util.zip.model.yml
      index: 1
      firstRowId: 11130
      rowCount: 92
      locations:
        lineNumbers: A=71+1*91
        columnNumbers: A=9*92
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.accessibility.model.yml
      index: 0
      firstRowId: 11222
      rowCount: 63
      locations:
        lineNumbers: A=7+1*62
        columnNumbers: A=9*63
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.accessibility.model.yml
      index: 1
      firstRowId: 11285
      rowCount: 25
      locations:
        lineNumbers: A=74+1*24
        columnNumbers: A=9*25
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.annotation.processing.model.yml
      index: 0
      firstRowId: 11310
      rowCount: 28
      locations:
        lineNumbers: A=7+1*27
        columnNumbers: A=9*28
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.annotation.processing.model.yml
      index: 1
      firstRowId: 11338
      rowCount: 6
      locations:
        lineNumbers: A=39+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.crypto.interfaces.model.yml
      index: 0
      firstRowId: 11344
      rowCount: 3
      locations:
        lineNumbers: A=7+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.crypto.model.yml
      index: 0
      firstRowId: 11347
      rowCount: 72
      locations:
        lineNumbers: A=7+1*71
        columnNumbers: A=9*72
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.crypto.model.yml
      index: 1
      firstRowId: 11419
      rowCount: 26
      locations:
        lineNumbers: A=83+1*25
        columnNumbers: A=9*26
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.crypto.spec.model.yml
      index: 0
      firstRowId: 11445
      rowCount: 35
      locations:
        lineNumbers: A=7+1*34
        columnNumbers: A=9*35
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.crypto.spec.model.yml
      index: 1
      firstRowId: 11480
      rowCount: 30
      locations:
        lineNumbers: A=46+1*29
        columnNumbers: A=9*30
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.metadata.model.yml
      index: 0
      firstRowId: 11510
      rowCount: 65
      locations:
        lineNumbers: A=7+1*64
        columnNumbers: A=9*65
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.metadata.model.yml
      index: 1
      firstRowId: 11575
      rowCount: 58
      locations:
        lineNumbers: A=76+1*57
        columnNumbers: A=9*58
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.model.yml
      index: 0
      firstRowId: 11633
      rowCount: 117
      locations:
        lineNumbers: A=7+1*116
        columnNumbers: A=9*117
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.model.yml
      index: 1
      firstRowId: 11750
      rowCount: 138
      locations:
        lineNumbers: A=128+1*137
        columnNumbers: A=9*138
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.plugins.bmp.model.yml
      index: 0
      firstRowId: 11888
      rowCount: 1
      locations:
        lineNumbers: A=7
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.plugins.bmp.model.yml
      index: 1
      firstRowId: 11889
      rowCount: 2
      locations:
        lineNumbers: A=12+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.plugins.jpeg.model.yml
      index: 0
      firstRowId: 11891
      rowCount: 13
      locations:
        lineNumbers: A=7+1*12
        columnNumbers: A=9*13
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.plugins.jpeg.model.yml
      index: 1
      firstRowId: 11904
      rowCount: 15
      locations:
        lineNumbers: A=24+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.plugins.tiff.model.yml
      index: 0
      firstRowId: 11919
      rowCount: 43
      locations:
        lineNumbers: A=7+1*42
        columnNumbers: A=9*43
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.plugins.tiff.model.yml
      index: 1
      firstRowId: 11962
      rowCount: 45
      locations:
        lineNumbers: A=54+1*44
        columnNumbers: A=9*45
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.spi.model.yml
      index: 0
      firstRowId: 12007
      rowCount: 48
      locations:
        lineNumbers: A=7+1*47
        columnNumbers: A=9*48
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.spi.model.yml
      index: 1
      firstRowId: 12055
      rowCount: 37
      locations:
        lineNumbers: A=59+1*36
        columnNumbers: A=9*37
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.stream.model.yml
      index: 0
      firstRowId: 12092
      rowCount: 16
      locations:
        lineNumbers: A=7+1*15
        columnNumbers: A=9*16
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.imageio.stream.model.yml
      index: 1
      firstRowId: 12108
      rowCount: 82
      locations:
        lineNumbers: A=27+1*81
        columnNumbers: A=9*82
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.lang.model.element.model.yml
      index: 0
      firstRowId: 12190
      rowCount: 51
      locations:
        lineNumbers: A=7+1*50
        columnNumbers: A=9*51
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.lang.model.element.model.yml
      index: 1
      firstRowId: 12241
      rowCount: 9
      locations:
        lineNumbers: A=62+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.lang.model.model.yml
      index: 0
      firstRowId: 12250
      rowCount: 1
      locations:
        lineNumbers: A=7
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.lang.model.model.yml
      index: 1
      firstRowId: 12251
      rowCount: 7
      locations:
        lineNumbers: A=12+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.lang.model.type.model.yml
      index: 0
      firstRowId: 12258
      rowCount: 24
      locations:
        lineNumbers: A=7+1*23
        columnNumbers: A=9*24
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.lang.model.type.model.yml
      index: 1
      firstRowId: 12282
      rowCount: 1
      locations:
        lineNumbers: A=35
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.lang.model.util.model.yml
      index: 0
      firstRowId: 12283
      rowCount: 201
      locations:
        lineNumbers: A=7+1*200
        columnNumbers: A=9*201
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.lang.model.util.model.yml
      index: 1
      firstRowId: 12484
      rowCount: 21
      locations:
        lineNumbers: A=212+1*20
        columnNumbers: A=9*21
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.loading.model.yml
      index: 0
      firstRowId: 12505
      rowCount: 35
      locations:
        lineNumbers: A=7+1*34
        columnNumbers: A=9*35
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.loading.model.yml
      index: 1
      firstRowId: 12540
      rowCount: 10
      locations:
        lineNumbers: A=46+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.model.yml
      index: 0
      firstRowId: 12550
      rowCount: 285
      locations:
        lineNumbers: A=7+1*284
        columnNumbers: A=9*285
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.model.yml
      index: 1
      firstRowId: 12835
      rowCount: 85
      locations:
        lineNumbers: A=296+1*84
        columnNumbers: A=9*85
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.modelmbean.model.yml
      index: 0
      firstRowId: 12920
      rowCount: 84
      locations:
        lineNumbers: A=7+1*83
        columnNumbers: A=9*84
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.modelmbean.model.yml
      index: 1
      firstRowId: 13004
      rowCount: 19
      locations:
        lineNumbers: A=95+1*18
        columnNumbers: A=9*19
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.monitor.model.yml
      index: 0
      firstRowId: 13023
      rowCount: 13
      locations:
        lineNumbers: A=7+1*12
        columnNumbers: A=9*13
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.monitor.model.yml
      index: 1
      firstRowId: 13036
      rowCount: 54
      locations:
        lineNumbers: A=24+1*53
        columnNumbers: A=9*54
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.openmbean.model.yml
      index: 0
      firstRowId: 13090
      rowCount: 104
      locations:
        lineNumbers: A=7+1*103
        columnNumbers: A=9*104
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.openmbean.model.yml
      index: 1
      firstRowId: 13194
      rowCount: 26
      locations:
        lineNumbers: A=115+1*25
        columnNumbers: A=9*26
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.relation.model.yml
      index: 0
      firstRowId: 13220
      rowCount: 125
      locations:
        lineNumbers: A=7+1*124
        columnNumbers: A=9*125
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.relation.model.yml
      index: 1
      firstRowId: 13345
      rowCount: 41
      locations:
        lineNumbers: A=136+1*40
        columnNumbers: A=9*41
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.remote.model.yml
      index: 0
      firstRowId: 13386
      rowCount: 55
      locations:
        lineNumbers: A=7+1*54
        columnNumbers: A=9*55
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.remote.model.yml
      index: 1
      firstRowId: 13441
      rowCount: 7
      locations:
        lineNumbers: A=66+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.remote.rmi.model.yml
      index: 0
      firstRowId: 13448
      rowCount: 57
      locations:
        lineNumbers: A=7+1*56
        columnNumbers: A=9*57
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.remote.rmi.model.yml
      index: 1
      firstRowId: 13505
      rowCount: 43
      locations:
        lineNumbers: A=68+1*42
        columnNumbers: A=9*43
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.timer.model.yml
      index: 0
      firstRowId: 13548
      rowCount: 4
      locations:
        lineNumbers: A=7+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.management.timer.model.yml
      index: 1
      firstRowId: 13552
      rowCount: 24
      locations:
        lineNumbers: A=15+1*23
        columnNumbers: A=9*24
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.directory.model.yml
      index: 0
      firstRowId: 13576
      rowCount: 87
      locations:
        lineNumbers: A=7+1*86
        columnNumbers: A=9*87
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.directory.model.yml
      index: 1
      firstRowId: 13663
      rowCount: 26
      locations:
        lineNumbers: A=98+1*25
        columnNumbers: A=9*26
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.event.model.yml
      index: 0
      firstRowId: 13689
      rowCount: 12
      locations:
        lineNumbers: A=7+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.event.model.yml
      index: 1
      firstRowId: 13701
      rowCount: 3
      locations:
        lineNumbers: A=23+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.ldap.model.yml
      index: 0
      firstRowId: 13704
      rowCount: 63
      locations:
        lineNumbers: A=7+1*62
        columnNumbers: A=9*63
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.ldap.model.yml
      index: 1
      firstRowId: 13767
      rowCount: 30
      locations:
        lineNumbers: A=74+1*29
        columnNumbers: A=9*30
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.ldap.spi.model.yml
      index: 0
      firstRowId: 13797
      rowCount: 4
      locations:
        lineNumbers: A=7+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.ldap.spi.model.yml
      index: 1
      firstRowId: 13801
      rowCount: 1
      locations:
        lineNumbers: A=15
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.model.yml
      index: 0
      firstRowId: 13802
      rowCount: 140
      locations:
        lineNumbers: A=7+1*139
        columnNumbers: A=9*140
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.model.yml
      index: 1
      firstRowId: 13942
      rowCount: 25
      locations:
        lineNumbers: A=151+1*24
        columnNumbers: A=9*25
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.spi.model.yml
      index: 0
      firstRowId: 13967
      rowCount: 26
      locations:
        lineNumbers: A=7+1*25
        columnNumbers: A=9*26
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.naming.spi.model.yml
      index: 1
      firstRowId: 13993
      rowCount: 4
      locations:
        lineNumbers: A=37+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.net.model.yml
      index: 0
      firstRowId: 13997
      rowCount: 16
      locations:
        lineNumbers: A=7+1*15
        columnNumbers: A=9*16
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.net.model.yml
      index: 1
      firstRowId: 14013
      rowCount: 2
      locations:
        lineNumbers: A=27+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.net.ssl.model.yml
      index: 0
      firstRowId: 14015
      rowCount: 120
      locations:
        lineNumbers: A=7+1*119
        columnNumbers: A=9*120
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.net.ssl.model.yml
      index: 1
      firstRowId: 14135
      rowCount: 124
      locations:
        lineNumbers: A=131+1*123
        columnNumbers: A=9*124
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.print.attribute.model.yml
      index: 0
      firstRowId: 14259
      rowCount: 38
      locations:
        lineNumbers: A=7+1*37
        columnNumbers: A=9*38
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.print.attribute.model.yml
      index: 1
      firstRowId: 14297
      rowCount: 24
      locations:
        lineNumbers: A=49+1*23
        columnNumbers: A=9*24
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.print.attribute.standard.model.yml
      index: 0
      firstRowId: 14321
      rowCount: 41
      locations:
        lineNumbers: A=7+1*40
        columnNumbers: A=9*41
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.print.attribute.standard.model.yml
      index: 1
      firstRowId: 14362
      rowCount: 179
      locations:
        lineNumbers: A=52+1*178
        columnNumbers: A=9*179
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.print.event.model.yml
      index: 0
      firstRowId: 14541
      rowCount: 9
      locations:
        lineNumbers: A=7+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.print.event.model.yml
      index: 1
      firstRowId: 14550
      rowCount: 7
      locations:
        lineNumbers: A=20+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.print.model.yml
      index: 0
      firstRowId: 14557
      rowCount: 45
      locations:
        lineNumbers: A=7+1*44
        columnNumbers: A=9*45
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.print.model.yml
      index: 1
      firstRowId: 14602
      rowCount: 20
      locations:
        lineNumbers: A=56+1*19
        columnNumbers: A=9*20
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.rmi.ssl.model.yml
      index: 0
      firstRowId: 14622
      rowCount: 6
      locations:
        lineNumbers: A=7+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.rmi.ssl.model.yml
      index: 1
      firstRowId: 14628
      rowCount: 1
      locations:
        lineNumbers: A=17
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.script.model.yml
      index: 0
      firstRowId: 14629
      rowCount: 50
      locations:
        lineNumbers: A=7+1*49
        columnNumbers: A=9*50
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.script.model.yml
      index: 1
      firstRowId: 14679
      rowCount: 15
      locations:
        lineNumbers: A=61+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.auth.callback.model.yml
      index: 0
      firstRowId: 14694
      rowCount: 35
      locations:
        lineNumbers: A=7+1*34
        columnNumbers: A=9*35
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.auth.callback.model.yml
      index: 1
      firstRowId: 14729
      rowCount: 14
      locations:
        lineNumbers: A=46+1*13
        columnNumbers: A=9*14
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.auth.kerberos.model.yml
      index: 0
      firstRowId: 14743
      rowCount: 42
      locations:
        lineNumbers: A=7+1*41
        columnNumbers: A=9*42
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.auth.kerberos.model.yml
      index: 1
      firstRowId: 14785
      rowCount: 33
      locations:
        lineNumbers: A=53+1*32
        columnNumbers: A=9*33
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.auth.login.model.yml
      index: 0
      firstRowId: 14818
      rowCount: 31
      locations:
        lineNumbers: A=7+1*30
        columnNumbers: A=9*31
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.auth.login.model.yml
      index: 1
      firstRowId: 14849
      rowCount: 6
      locations:
        lineNumbers: A=42+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.auth.model.yml
      index: 0
      firstRowId: 14855
      rowCount: 17
      locations:
        lineNumbers: A=7+1*16
        columnNumbers: A=9*17
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.auth.model.yml
      index: 1
      firstRowId: 14872
      rowCount: 11
      locations:
        lineNumbers: A=28+1*10
        columnNumbers: A=9*11
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.auth.spi.model.yml
      index: 0
      firstRowId: 14883
      rowCount: 4
      locations:
        lineNumbers: A=7+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.auth.x500.model.yml
      index: 0
      firstRowId: 14887
      rowCount: 18
      locations:
        lineNumbers: A=7+1*17
        columnNumbers: A=9*18
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.auth.x500.model.yml
      index: 1
      firstRowId: 14905
      rowCount: 6
      locations:
        lineNumbers: A=29+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.cert.model.yml
      index: 0
      firstRowId: 14911
      rowCount: 5
      locations:
        lineNumbers: A=7+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.cert.model.yml
      index: 1
      firstRowId: 14916
      rowCount: 17
      locations:
        lineNumbers: A=16+1*16
        columnNumbers: A=9*17
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.sasl.model.yml
      index: 0
      firstRowId: 14933
      rowCount: 49
      locations:
        lineNumbers: A=7+1*48
        columnNumbers: A=9*49
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.security.sasl.model.yml
      index: 1
      firstRowId: 14982
      rowCount: 4
      locations:
        lineNumbers: A=60+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.smartcardio.model.yml
      index: 0
      firstRowId: 14986
      rowCount: 34
      locations:
        lineNumbers: A=7+1*33
        columnNumbers: A=9*34
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.smartcardio.model.yml
      index: 1
      firstRowId: 15020
      rowCount: 34
      locations:
        lineNumbers: A=45+1*33
        columnNumbers: A=9*34
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sound.midi.model.yml
      index: 0
      firstRowId: 15054
      rowCount: 57
      locations:
        lineNumbers: A=7+1*56
        columnNumbers: A=9*57
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sound.midi.model.yml
      index: 1
      firstRowId: 15111
      rowCount: 56
      locations:
        lineNumbers: A=68+1*55
        columnNumbers: A=9*56
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sound.midi.spi.model.yml
      index: 0
      firstRowId: 15167
      rowCount: 3
      locations:
        lineNumbers: A=7+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sound.midi.spi.model.yml
      index: 1
      firstRowId: 15170
      rowCount: 15
      locations:
        lineNumbers: A=14+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sound.sampled.model.yml
      index: 0
      firstRowId: 15185
      rowCount: 84
      locations:
        lineNumbers: A=7+1*83
        columnNumbers: A=9*84
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sound.sampled.model.yml
      index: 1
      firstRowId: 15269
      rowCount: 63
      locations:
        lineNumbers: A=95+1*62
        columnNumbers: A=9*63
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sound.sampled.spi.model.yml
      index: 0
      firstRowId: 15332
      rowCount: 6
      locations:
        lineNumbers: A=7+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sound.sampled.spi.model.yml
      index: 1
      firstRowId: 15338
      rowCount: 19
      locations:
        lineNumbers: A=17+1*18
        columnNumbers: A=9*19
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sql.model.yml
      index: 0
      firstRowId: 15357
      rowCount: 14
      locations:
        lineNumbers: A=7+1*13
        columnNumbers: A=9*14
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sql.model.yml
      index: 1
      firstRowId: 15371
      rowCount: 4
      locations:
        lineNumbers: A=25+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sql.rowset.model.yml
      index: 0
      firstRowId: 15375
      rowCount: 63
      locations:
        lineNumbers: A=7+1*62
        columnNumbers: A=9*63
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sql.rowset.model.yml
      index: 1
      firstRowId: 15438
      rowCount: 140
      locations:
        lineNumbers: A=74+1*139
        columnNumbers: A=9*140
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sql.rowset.serial.model.yml
      index: 0
      firstRowId: 15578
      rowCount: 36
      locations:
        lineNumbers: A=7+1*35
        columnNumbers: A=9*36
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sql.rowset.serial.model.yml
      index: 1
      firstRowId: 15614
      rowCount: 54
      locations:
        lineNumbers: A=47+1*53
        columnNumbers: A=9*54
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sql.rowset.spi.model.yml
      index: 0
      firstRowId: 15668
      rowCount: 13
      locations:
        lineNumbers: A=7+1*12
        columnNumbers: A=9*13
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.sql.rowset.spi.model.yml
      index: 1
      firstRowId: 15681
      rowCount: 12
      locations:
        lineNumbers: A=24+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.tools.model.yml
      index: 0
      firstRowId: 15693
      rowCount: 66
      locations:
        lineNumbers: A=7+1*65
        columnNumbers: A=9*66
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.tools.model.yml
      index: 1
      firstRowId: 15759
      rowCount: 36
      locations:
        lineNumbers: A=77+1*35
        columnNumbers: A=9*36
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.transaction.xa.model.yml
      index: 0
      firstRowId: 15795
      rowCount: 1
      locations:
        lineNumbers: A=7
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.transaction.xa.model.yml
      index: 1
      firstRowId: 15796
      rowCount: 1
      locations:
        lineNumbers: A=12
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.catalog.model.yml
      index: 0
      firstRowId: 15797
      rowCount: 12
      locations:
        lineNumbers: A=7+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.catalog.model.yml
      index: 1
      firstRowId: 15809
      rowCount: 8
      locations:
        lineNumbers: A=23+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.crypto.dom.model.yml
      index: 0
      firstRowId: 15817
      rowCount: 27
      locations:
        lineNumbers: A=7+1*26
        columnNumbers: A=9*27
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.crypto.dom.model.yml
      index: 1
      firstRowId: 15844
      rowCount: 1
      locations:
        lineNumbers: A=38
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.crypto.dsig.dom.model.yml
      index: 0
      firstRowId: 15845
      rowCount: 14
      locations:
        lineNumbers: A=7+1*13
        columnNumbers: A=9*14
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.crypto.dsig.keyinfo.model.yml
      index: 0
      firstRowId: 15859
      rowCount: 35
      locations:
        lineNumbers: A=7+1*34
        columnNumbers: A=9*35
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.crypto.dsig.keyinfo.model.yml
      index: 1
      firstRowId: 15894
      rowCount: 4
      locations:
        lineNumbers: A=46+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.crypto.dsig.model.yml
      index: 0
      firstRowId: 15898
      rowCount: 137
      locations:
        lineNumbers: A=7+1*136
        columnNumbers: A=9*137
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.crypto.dsig.model.yml
      index: 1
      firstRowId: 16035
      rowCount: 3
      locations:
        lineNumbers: A=148+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.crypto.dsig.spec.model.yml
      index: 0
      firstRowId: 16038
      rowCount: 23
      locations:
        lineNumbers: A=7+1*22
        columnNumbers: A=9*23
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.crypto.dsig.spec.model.yml
      index: 1
      firstRowId: 16061
      rowCount: 2
      locations:
        lineNumbers: A=34+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.crypto.model.yml
      index: 0
      firstRowId: 16063
      rowCount: 33
      locations:
        lineNumbers: A=7+1*32
        columnNumbers: A=9*33
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.crypto.model.yml
      index: 1
      firstRowId: 16096
      rowCount: 1
      locations:
        lineNumbers: A=44
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.datatype.model.yml
      index: 0
      firstRowId: 16097
      rowCount: 6
      locations:
        lineNumbers: A=7+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.datatype.model.yml
      index: 1
      firstRowId: 16103
      rowCount: 81
      locations:
        lineNumbers: A=17+1*80
        columnNumbers: A=9*81
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.namespace.model.yml
      index: 0
      firstRowId: 16184
      rowCount: 15
      locations:
        lineNumbers: A=7+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.parsers.model.yml
      index: 0
      firstRowId: 16199
      rowCount: 37
      locations:
        lineNumbers: A=7+1*36
        columnNumbers: A=9*37
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.parsers.model.yml
      index: 1
      firstRowId: 16236
      rowCount: 46
      locations:
        lineNumbers: A=48+1*45
        columnNumbers: A=9*46
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.stream.events.model.yml
      index: 0
      firstRowId: 16282
      rowCount: 38
      locations:
        lineNumbers: A=7+1*37
        columnNumbers: A=9*38
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.stream.model.yml
      index: 0
      firstRowId: 16320
      rowCount: 175
      locations:
        lineNumbers: A=7+1*174
        columnNumbers: A=9*175
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.stream.model.yml
      index: 1
      firstRowId: 16495
      rowCount: 21
      locations:
        lineNumbers: A=186+1*20
        columnNumbers: A=9*21
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.stream.util.model.yml
      index: 0
      firstRowId: 16516
      rowCount: 8
      locations:
        lineNumbers: A=7+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.stream.util.model.yml
      index: 1
      firstRowId: 16524
      rowCount: 40
      locations:
        lineNumbers: A=19+1*39
        columnNumbers: A=9*40
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.transform.dom.model.yml
      index: 0
      firstRowId: 16564
      rowCount: 21
      locations:
        lineNumbers: A=7+1*20
        columnNumbers: A=9*21
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.transform.dom.model.yml
      index: 1
      firstRowId: 16585
      rowCount: 1
      locations:
        lineNumbers: A=32
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.transform.model.yml
      index: 0
      firstRowId: 16586
      rowCount: 54
      locations:
        lineNumbers: A=7+1*53
        columnNumbers: A=9*54
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.transform.model.yml
      index: 1
      firstRowId: 16640
      rowCount: 10
      locations:
        lineNumbers: A=65+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.transform.sax.model.yml
      index: 0
      firstRowId: 16650
      rowCount: 26
      locations:
        lineNumbers: A=7+1*25
        columnNumbers: A=9*26
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.transform.sax.model.yml
      index: 1
      firstRowId: 16676
      rowCount: 1
      locations:
        lineNumbers: A=37
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.transform.stax.model.yml
      index: 0
      firstRowId: 16677
      rowCount: 8
      locations:
        lineNumbers: A=7+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.transform.stax.model.yml
      index: 1
      firstRowId: 16685
      rowCount: 3
      locations:
        lineNumbers: A=19+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.transform.stream.model.yml
      index: 0
      firstRowId: 16688
      rowCount: 19
      locations:
        lineNumbers: A=7+1*18
        columnNumbers: A=9*19
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.transform.stream.model.yml
      index: 1
      firstRowId: 16707
      rowCount: 1
      locations:
        lineNumbers: A=30
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.validation.model.yml
      index: 0
      firstRowId: 16708
      rowCount: 29
      locations:
        lineNumbers: A=7+1*28
        columnNumbers: A=9*29
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.validation.model.yml
      index: 1
      firstRowId: 16737
      rowCount: 22
      locations:
        lineNumbers: A=40+1*21
        columnNumbers: A=9*22
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.xpath.model.yml
      index: 0
      firstRowId: 16759
      rowCount: 26
      locations:
        lineNumbers: A=7+1*25
        columnNumbers: A=9*26
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/javax.xml.xpath.model.yml
      index: 1
      firstRowId: 16785
      rowCount: 12
      locations:
        lineNumbers: A=37+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/jenkins-json-lib.model.yml
      index: 0
      firstRowId: 16797
      rowCount: 2
      locations:
        lineNumbers: A=8+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/jenkins-json-lib.model.yml
      index: 1
      firstRowId: 16799
      rowCount: 338
      locations:
        lineNumbers: A=14+1*337
        columnNumbers: A=9*338
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/jenkins-json-lib.model.yml
      index: 2
      firstRowId: 17137
      rowCount: 243
      locations:
        lineNumbers: A=356+1*242
        columnNumbers: A=9*243
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/jenkins.model.yml
      index: 0
      firstRowId: 17380
      rowCount: 3251
      locations:
        lineNumbers: A=8+1*3250
        columnNumbers: A=9*3251
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/jenkins.model.yml
      index: 1
      firstRowId: 20631
      rowCount: 5200
      locations:
        lineNumbers: A=3263+1*5199
        columnNumbers: A=9*5200
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/kotlinstdlib.model.yml
      index: 0
      firstRowId: 25831
      rowCount: 12
      locations:
        lineNumbers: A=9+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/kotlinstdlib.model.yml
      index: 1
      firstRowId: 25843
      rowCount: 1833
      locations:
        lineNumbers: A=27+1*1832
        columnNumbers: A=9*1833
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/kotlinstdlib.model.yml
      index: 2
      firstRowId: 27676
      rowCount: 4608
      locations:
        lineNumbers: A=1866+1*4607
        columnNumbers: A=9*4608
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/org.apache.commons.io.model.yml
      index: 0
      firstRowId: 32284
      rowCount: 106
      locations:
        lineNumbers: A=9+1*105
        columnNumbers: A=9*106
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/org.apache.commons.io.model.yml
      index: 1
      firstRowId: 32390
      rowCount: 555
      locations:
        lineNumbers: A=121+1*554
        columnNumbers: A=9*555
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/org.apache.commons.io.model.yml
      index: 2
      firstRowId: 32945
      rowCount: 750
      locations:
        lineNumbers: A=681+1*749
        columnNumbers: A=9*750
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/org.apache.commons.lang.model.yml
      index: 0
      firstRowId: 33695
      rowCount: 765
      locations:
        lineNumbers: A=9+1*764
        columnNumbers: A=9*765
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/org.apache.commons.lang.model.yml
      index: 1
      firstRowId: 34460
      rowCount: 914
      locations:
        lineNumbers: A=780+1*913
        columnNumbers: A=9*914
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/stapler.model.yml
      index: 0
      firstRowId: 35374
      rowCount: 362
      locations:
        lineNumbers: A=8+1*361
        columnNumbers: A=9*362
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/stapler.model.yml
      index: 1
      firstRowId: 35736
      rowCount: 316
      locations:
        lineNumbers: A=374+1*315
        columnNumbers: A=9*316
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/struts2.model.yml
      index: 0
      firstRowId: 36052
      rowCount: 4844
      locations:
        lineNumbers: A=8+1*4843
        columnNumbers: A=9*4844
     -
      pack: codeql/java-all#1
      relativePath: ext/generated/struts2.model.yml
      index: 1
      firstRowId: 40896
      rowCount: 2026
      locations:
        lineNumbers: A=4856+1*2025
        columnNumbers: A=9*2026
     -
      pack: codeql/java-all#1
      relativePath: ext/groovy.lang.model.yml
      index: 0
      firstRowId: 42922
      rowCount: 27
      locations:
        lineNumbers: A=6+1*26
        columnNumbers: A=9*27
     -
      pack: codeql/java-all#1
      relativePath: ext/groovy.util.model.yml
      index: 0
      firstRowId: 42949
      rowCount: 5
      locations:
        lineNumbers: A=6+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.cli.model.yml
      index: 0
      firstRowId: 42954
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.console.model.yml
      index: 0
      firstRowId: 42956
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.lifecycle.model.yml
      index: 0
      firstRowId: 42957
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.model.model.yml
      index: 0
      firstRowId: 42958
      rowCount: 7
      locations:
        lineNumbers: A=6+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.model.model.yml
      index: 1
      firstRowId: 42965
      rowCount: 2
      locations:
        lineNumbers: A=17+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.model.model.yml
      index: 2
      firstRowId: 42967
      rowCount: 2
      locations:
        lineNumbers: A=23+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.model.yml
      index: 0
      firstRowId: 42969
      rowCount: 36
      locations:
        lineNumbers: A=6+1*35
        columnNumbers: A=9*36
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.model.yml
      index: 1
      firstRowId: 43005
      rowCount: 7
      locations:
        lineNumbers: A=46+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.model.yml
      index: 2
      firstRowId: 43012
      rowCount: 26
      locations:
        lineNumbers: A=57+1*25
        columnNumbers: A=9*26
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.os.model.yml
      index: 0
      firstRowId: 43038
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.remoting.model.yml
      index: 0
      firstRowId: 43039
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.scm.model.yml
      index: 0
      firstRowId: 43040
      rowCount: 5
      locations:
        lineNumbers: A=6+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.scm.model.yml
      index: 1
      firstRowId: 43045
      rowCount: 4
      locations:
        lineNumbers: A=15+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.util.io.model.yml
      index: 0
      firstRowId: 43049
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.util.jna.model.yml
      index: 0
      firstRowId: 43051
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.util.model.yml
      index: 0
      firstRowId: 43054
      rowCount: 19
      locations:
        lineNumbers: A=6+1*18
        columnNumbers: A=9*19
     -
      pack: codeql/java-all#1
      relativePath: ext/hudson.util.model.yml
      index: 1
      firstRowId: 43073
      rowCount: 17
      locations:
        lineNumbers: A=29+1*6+2+1*9
        columnNumbers: A=9*17
     -
      pack: codeql/java-all#1
      relativePath: ext/io.jsonwebtoken.model.yml
      index: 0
      firstRowId: 43090
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/io.jsonwebtoken.model.yml
      index: 1
      firstRowId: 43094
      rowCount: 2
      locations:
        lineNumbers: A=14+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.bootstrap.model.yml
      index: 0
      firstRowId: 43096
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.buffer.model.yml
      index: 0
      firstRowId: 43099
      rowCount: 207
      locations:
        lineNumbers: A=6+1*206
        columnNumbers: A=9*207
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.channel.model.yml
      index: 0
      firstRowId: 43306
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.channel.model.yml
      index: 1
      firstRowId: 43315
      rowCount: 2
      locations:
        lineNumbers: A=19+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.codec.base64.model.yml
      index: 0
      firstRowId: 43317
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=7*2
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.codec.http.cookie.model.yml
      index: 0
      firstRowId: 43319
      rowCount: 14
      locations:
        lineNumbers: A=6+1*13
        columnNumbers: A=7*14
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.codec.http.model.yml
      index: 0
      firstRowId: 43333
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=7*3
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.codec.http.model.yml
      index: 1
      firstRowId: 43336
      rowCount: 70
      locations:
        lineNumbers: A=13+1*57+2+1*11
        columnNumbers: A=7*70
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.codec.http.multipart.model.yml
      index: 0
      firstRowId: 43406
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.codec.http.multipart.model.yml
      index: 1
      firstRowId: 43407
      rowCount: 33
      locations:
        lineNumbers: A=11+1*32
        columnNumbers: A=9*33
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.codec.http.websocketx.model.yml
      index: 0
      firstRowId: 43440
      rowCount: 20
      locations:
        lineNumbers: A=6+1*19
        columnNumbers: A=7*20
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.codec.http2.model.yml
      index: 0
      firstRowId: 43460
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=7*4
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.codec.http2.model.yml
      index: 1
      firstRowId: 43464
      rowCount: 36
      locations:
        lineNumbers: A=14+1*35
        columnNumbers: A=7*36
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.codec.model.yml
      index: 0
      firstRowId: 43500
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.codec.model.yml
      index: 1
      firstRowId: 43509
      rowCount: 85
      locations:
        lineNumbers: A=19+1*84
        columnNumbers: A=9*85
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.ssl.model.yml
      index: 0
      firstRowId: 43594
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.handler.stream.model.yml
      index: 0
      firstRowId: 43598
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.resolver.model.yml
      index: 0
      firstRowId: 43599
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.util.internal.model.yml
      index: 0
      firstRowId: 43600
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.util.internal.model.yml
      index: 1
      firstRowId: 43602
      rowCount: 2
      locations:
        lineNumbers: A=12+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/io.netty.util.model.yml
      index: 0
      firstRowId: 43604
      rowCount: 22
      locations:
        lineNumbers: A=6+1*21
        columnNumbers: A=9*22
     -
      pack: codeql/java-all#1
      relativePath: ext/io.undertow.server.handlers.resource.model.yml
      index: 0
      firstRowId: 43626
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/io.undertow.server.handlers.resource.model.yml
      index: 1
      firstRowId: 43627
      rowCount: 3
      locations:
        lineNumbers: A=12+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.activation.model.yml
      index: 0
      firstRowId: 43630
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.activation.model.yml
      index: 1
      firstRowId: 43632
      rowCount: 2
      locations:
        lineNumbers: A=12+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.faces.context.model.yml
      index: 0
      firstRowId: 43634
      rowCount: 7
      locations:
        lineNumbers: A=6+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.faces.context.model.yml
      index: 1
      firstRowId: 43641
      rowCount: 4
      locations:
        lineNumbers: A=17+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.json.model.yml
      index: 0
      firstRowId: 43645
      rowCount: 122
      locations:
        lineNumbers: A=6+1*121
        columnNumbers: A=9*122
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.json.stream.model.yml
      index: 0
      firstRowId: 43767
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.persistence.criteria.model.yml
      index: 0
      firstRowId: 43768
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.persistence.model.yml
      index: 0
      firstRowId: 43769
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.servlet.http.model.yml
      index: 0
      firstRowId: 43771
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.servlet.model.yml
      index: 0
      firstRowId: 43772
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.ws.rs.client.model.yml
      index: 0
      firstRowId: 43774
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.ws.rs.container.model.yml
      index: 0
      firstRowId: 43775
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.ws.rs.core.model.yml
      index: 0
      firstRowId: 43784
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.ws.rs.core.model.yml
      index: 1
      firstRowId: 43786
      rowCount: 149
      locations:
        lineNumbers: A=12+1*17+4+1*35+2+1*2+4+1*91
        columnNumbers: A=9*149
     -
      pack: codeql/java-all#1
      relativePath: ext/jakarta.xml.bind.attachment.model.yml
      index: 0
      firstRowId: 43935
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/java.awt.model.yml
      index: 0
      firstRowId: 43937
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/java.awt.model.yml
      index: 1
      firstRowId: 43940
      rowCount: 1
      locations:
        lineNumbers: A=15
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.awt.model.yml
      index: 2
      firstRowId: 43941
      rowCount: 1
      locations:
        lineNumbers: A=20
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.beans.model.yml
      index: 0
      firstRowId: 43942
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.beans.model.yml
      index: 1
      firstRowId: 43943
      rowCount: 4
      locations:
        lineNumbers: A=12+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/java.beans.model.yml
      index: 2
      firstRowId: 43947
      rowCount: 1
      locations:
        lineNumbers: A=20
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.io.model.yml
      index: 0
      firstRowId: 43948
      rowCount: 66
      locations:
        lineNumbers: A=6+1*65
        columnNumbers: A=9*66
     -
      pack: codeql/java-all#1
      relativePath: ext/java.io.model.yml
      index: 1
      firstRowId: 44014
      rowCount: 52
      locations:
        lineNumbers: A=76+1*14+5+1*36
        columnNumbers: A=9*52
     -
      pack: codeql/java-all#1
      relativePath: ext/java.io.model.yml
      index: 2
      firstRowId: 44066
      rowCount: 20
      locations:
        lineNumbers: A=137+1*14+3+1*3+2
        columnNumbers: A=9*20
     -
      pack: codeql/java-all#1
      relativePath: ext/java.io.model.yml
      index: 3
      firstRowId: 44086
      rowCount: 1
      locations:
        lineNumbers: A=164
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.lang.invoke.model.yml
      index: 0
      firstRowId: 44087
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.lang.model.yml
      index: 0
      firstRowId: 44088
      rowCount: 38
      locations:
        lineNumbers: A=6+1*23+2+4+1*4+4+1*7
        columnNumbers: A=9*38
     -
      pack: codeql/java-all#1
      relativePath: ext/java.lang.model.yml
      index: 1
      firstRowId: 44126
      rowCount: 3
      locations:
        lineNumbers: A=55+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/java.lang.model.yml
      index: 2
      firstRowId: 44129
      rowCount: 98
      locations:
        lineNumbers: A=62+1*3+2+1*93
        columnNumbers: A=9*98
     -
      pack: codeql/java-all#1
      relativePath: ext/java.lang.model.yml
      index: 3
      firstRowId: 44227
      rowCount: 109
      locations:
        lineNumbers: A=165+1*86+3+1*21
        columnNumbers: A=9*109
     -
      pack: codeql/java-all#1
      relativePath: ext/java.lang.module.model.yml
      index: 0
      firstRowId: 44336
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.lang.reflect.model.yml
      index: 0
      firstRowId: 44337
      rowCount: 4
      locations:
        lineNumbers: A=7+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/java.math.model.yml
      index: 0
      firstRowId: 44341
      rowCount: 14
      locations:
        lineNumbers: A=6+4+1*12
        columnNumbers: A=9*14
     -
      pack: codeql/java-all#1
      relativePath: ext/java.net.http.model.yml
      index: 0
      firstRowId: 44355
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.net.http.model.yml
      index: 1
      firstRowId: 44356
      rowCount: 3
      locations:
        lineNumbers: A=11+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/java.net.model.yml
      index: 0
      firstRowId: 44359
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/java.net.model.yml
      index: 1
      firstRowId: 44361
      rowCount: 25
      locations:
        lineNumbers: A=12+1*24
        columnNumbers: A=9*25
     -
      pack: codeql/java-all#1
      relativePath: ext/java.net.model.yml
      index: 2
      firstRowId: 44386
      rowCount: 39
      locations:
        lineNumbers: A=41+1*38
        columnNumbers: A=9*39
     -
      pack: codeql/java-all#1
      relativePath: ext/java.net.model.yml
      index: 3
      firstRowId: 44425
      rowCount: 9
      locations:
        lineNumbers: A=85+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.nio.channels.model.yml
      index: 0
      firstRowId: 44434
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/java.nio.channels.model.yml
      index: 1
      firstRowId: 44436
      rowCount: 4
      locations:
        lineNumbers: A=12+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/java.nio.charset.model.yml
      index: 0
      firstRowId: 44440
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.nio.file.model.yml
      index: 0
      firstRowId: 44441
      rowCount: 40
      locations:
        lineNumbers: A=6+1*39
        columnNumbers: A=9*40
     -
      pack: codeql/java-all#1
      relativePath: ext/java.nio.file.model.yml
      index: 1
      firstRowId: 44481
      rowCount: 33
      locations:
        lineNumbers: A=50+1*32
        columnNumbers: A=9*33
     -
      pack: codeql/java-all#1
      relativePath: ext/java.nio.file.model.yml
      index: 2
      firstRowId: 44514
      rowCount: 38
      locations:
        lineNumbers: A=93+1*24+2+1*12
        columnNumbers: A=9*38
     -
      pack: codeql/java-all#1
      relativePath: ext/java.nio.file.spi.model.yml
      index: 0
      firstRowId: 44552
      rowCount: 2
      locations:
        lineNumbers: A=7+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/java.nio.model.yml
      index: 0
      firstRowId: 44554
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/java.nio.model.yml
      index: 1
      firstRowId: 44557
      rowCount: 15
      locations:
        lineNumbers: A=14+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/java.nio.model.yml
      index: 2
      firstRowId: 44572
      rowCount: 3
      locations:
        lineNumbers: A=35+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/java.security.cert.model.yml
      index: 0
      firstRowId: 44575
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.security.cert.model.yml
      index: 1
      firstRowId: 44576
      rowCount: 2
      locations:
        lineNumbers: A=12+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/java.security.cert.model.yml
      index: 2
      firstRowId: 44578
      rowCount: 36
      locations:
        lineNumbers: A=19+1*35
        columnNumbers: A=9*36
     -
      pack: codeql/java-all#1
      relativePath: ext/java.security.model.yml
      index: 0
      firstRowId: 44614
      rowCount: 12
      locations:
        lineNumbers: A=6+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/java.security.model.yml
      index: 1
      firstRowId: 44626
      rowCount: 9
      locations:
        lineNumbers: A=22+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.security.model.yml
      index: 2
      firstRowId: 44635
      rowCount: 3
      locations:
        lineNumbers: A=36+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/java.security.spec.model.yml
      index: 0
      firstRowId: 44638
      rowCount: 8
      locations:
        lineNumbers: A=6+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/java.sql.model.yml
      index: 0
      firstRowId: 44646
      rowCount: 15
      locations:
        lineNumbers: A=6+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/java.sql.model.yml
      index: 1
      firstRowId: 44661
      rowCount: 2
      locations:
        lineNumbers: A=25+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/java.sql.model.yml
      index: 2
      firstRowId: 44663
      rowCount: 15
      locations:
        lineNumbers: A=32+1*7+4+1*6
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/java.sql.model.yml
      index: 3
      firstRowId: 44678
      rowCount: 1
      locations:
        lineNumbers: A=54
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.text.model.yml
      index: 0
      firstRowId: 44679
      rowCount: 8
      locations:
        lineNumbers: A=7+1+4+1*2+3+1*2
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/java.time.chrono.model.yml
      index: 0
      firstRowId: 44687
      rowCount: 50
      locations:
        lineNumbers: A=6+3+1*48
        columnNumbers: A=9*50
     -
      pack: codeql/java-all#1
      relativePath: ext/java.time.format.model.yml
      index: 0
      firstRowId: 44737
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/java.time.model.yml
      index: 0
      firstRowId: 44739
      rowCount: 265
      locations:
        lineNumbers: A=6+1*5+4+1*10+3+1*247
        columnNumbers: A=9*265
     -
      pack: codeql/java-all#1
      relativePath: ext/java.time.temporal.model.yml
      index: 0
      firstRowId: 45004
      rowCount: 26
      locations:
        lineNumbers: A=7+1*25
        columnNumbers: A=9*26
     -
      pack: codeql/java-all#1
      relativePath: ext/java.time.zone.model.yml
      index: 0
      firstRowId: 45030
      rowCount: 30
      locations:
        lineNumbers: A=7+1*29
        columnNumbers: A=9*30
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.concurrent.atomic.model.yml
      index: 0
      firstRowId: 45060
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.concurrent.atomic.model.yml
      index: 1
      firstRowId: 45063
      rowCount: 11
      locations:
        lineNumbers: A=14+1*3+4+1*6
        columnNumbers: A=9*11
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.concurrent.locks.model.yml
      index: 0
      firstRowId: 45074
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.concurrent.model.yml
      index: 0
      firstRowId: 45076
      rowCount: 24
      locations:
        lineNumbers: A=6+1*23
        columnNumbers: A=9*24
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.concurrent.model.yml
      index: 1
      firstRowId: 45100
      rowCount: 9
      locations:
        lineNumbers: A=35+1*5+4+1*2
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.function.model.yml
      index: 0
      firstRowId: 45109
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.function.model.yml
      index: 1
      firstRowId: 45110
      rowCount: 1
      locations:
        lineNumbers: A=12
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.logging.model.yml
      index: 0
      firstRowId: 45111
      rowCount: 36
      locations:
        lineNumbers: A=6+1*35
        columnNumbers: A=9*36
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.logging.model.yml
      index: 1
      firstRowId: 45147
      rowCount: 6
      locations:
        lineNumbers: A=46+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.logging.model.yml
      index: 2
      firstRowId: 45153
      rowCount: 3
      locations:
        lineNumbers: A=56+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.model.yml
      index: 0
      firstRowId: 45156
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.model.yml
      index: 1
      firstRowId: 45158
      rowCount: 406
      locations:
        lineNumbers: A=13+1*405
        columnNumbers: A=9*406
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.model.yml
      index: 2
      firstRowId: 45564
      rowCount: 140
      locations:
        lineNumbers: A=424+1*128+3+4+1*9
        columnNumbers: A=9*140
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.prefs.model.yml
      index: 0
      firstRowId: 45704
      rowCount: 16
      locations:
        lineNumbers: A=7+1*13+2+1
        columnNumbers: A=9*16
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.regex.model.yml
      index: 0
      firstRowId: 45720
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.regex.model.yml
      index: 1
      firstRowId: 45729
      rowCount: 9
      locations:
        lineNumbers: A=19+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.regex.model.yml
      index: 2
      firstRowId: 45738
      rowCount: 6
      locations:
        lineNumbers: A=33+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.stream.model.yml
      index: 0
      firstRowId: 45744
      rowCount: 83
      locations:
        lineNumbers: A=6+1*15+2+1*26+4+1*39
        columnNumbers: A=9*83
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.stream.model.yml
      index: 1
      firstRowId: 45827
      rowCount: 7
      locations:
        lineNumbers: A=98+1*5+4
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.zip.model.yml
      index: 0
      firstRowId: 45834
      rowCount: 17
      locations:
        lineNumbers: A=6+1*16
        columnNumbers: A=9*17
     -
      pack: codeql/java-all#1
      relativePath: ext/java.util.zip.model.yml
      index: 1
      firstRowId: 45851
      rowCount: 2
      locations:
        lineNumbers: A=27+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/javafx.scene.web.model.yml
      index: 0
      firstRowId: 45853
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.activation.model.yml
      index: 0
      firstRowId: 45854
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.activation.model.yml
      index: 1
      firstRowId: 45856
      rowCount: 7
      locations:
        lineNumbers: A=12+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.crypto.model.yml
      index: 0
      firstRowId: 45863
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.crypto.model.yml
      index: 1
      firstRowId: 45867
      rowCount: 15
      locations:
        lineNumbers: A=14+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.crypto.spec.model.yml
      index: 0
      firstRowId: 45882
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.crypto.spec.model.yml
      index: 1
      firstRowId: 45886
      rowCount: 15
      locations:
        lineNumbers: A=14+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.crypto.spec.model.yml
      index: 2
      firstRowId: 45901
      rowCount: 2
      locations:
        lineNumbers: A=33+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.faces.context.model.yml
      index: 0
      firstRowId: 45903
      rowCount: 7
      locations:
        lineNumbers: A=6+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.faces.context.model.yml
      index: 1
      firstRowId: 45910
      rowCount: 4
      locations:
        lineNumbers: A=17+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.imageio.stream.model.yml
      index: 0
      firstRowId: 45914
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.imageio.stream.model.yml
      index: 1
      firstRowId: 45915
      rowCount: 1
      locations:
        lineNumbers: A=11
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.jms.model.yml
      index: 0
      firstRowId: 45916
      rowCount: 9
      locations:
        lineNumbers: A=11+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.jms.model.yml
      index: 1
      firstRowId: 45925
      rowCount: 57
      locations:
        lineNumbers: A=24+1*56
        columnNumbers: A=9*57
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.json.model.yml
      index: 0
      firstRowId: 45982
      rowCount: 122
      locations:
        lineNumbers: A=6+1*121
        columnNumbers: A=9*122
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.json.stream.model.yml
      index: 0
      firstRowId: 46104
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.management.model.yml
      index: 0
      firstRowId: 46105
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.management.remote.model.yml
      index: 0
      firstRowId: 46109
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.naming.directory.model.yml
      index: 0
      firstRowId: 46111
      rowCount: 8
      locations:
        lineNumbers: A=6+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.naming.directory.model.yml
      index: 1
      firstRowId: 46119
      rowCount: 1
      locations:
        lineNumbers: A=19
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.naming.model.yml
      index: 0
      firstRowId: 46120
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.naming.model.yml
      index: 1
      firstRowId: 46126
      rowCount: 1
      locations:
        lineNumbers: A=17
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.net.ssl.model.yml
      index: 0
      firstRowId: 46127
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.portlet.model.yml
      index: 0
      firstRowId: 46131
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.print.attribute.standard.model.yml
      index: 0
      firstRowId: 46132
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.script.model.yml
      index: 0
      firstRowId: 46134
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.security.auth.callback.model.yml
      index: 0
      firstRowId: 46135
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.security.auth.kerberos.model.yml
      index: 0
      firstRowId: 46136
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.servlet.http.model.yml
      index: 0
      firstRowId: 46142
      rowCount: 16
      locations:
        lineNumbers: A=6+1*15
        columnNumbers: A=9*16
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.servlet.http.model.yml
      index: 1
      firstRowId: 46158
      rowCount: 6
      locations:
        lineNumbers: A=27+1*3+2+1
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.servlet.http.model.yml
      index: 2
      firstRowId: 46164
      rowCount: 2
      locations:
        lineNumbers: A=38+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.servlet.model.yml
      index: 0
      firstRowId: 46166
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.servlet.model.yml
      index: 1
      firstRowId: 46172
      rowCount: 4
      locations:
        lineNumbers: A=16+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.servlet.model.yml
      index: 2
      firstRowId: 46176
      rowCount: 1
      locations:
        lineNumbers: A=24
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.sql.model.yml
      index: 0
      firstRowId: 46177
      rowCount: 7
      locations:
        lineNumbers: A=6+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.validation.model.yml
      index: 0
      firstRowId: 46184
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.validation.model.yml
      index: 1
      firstRowId: 46185
      rowCount: 1
      locations:
        lineNumbers: A=11
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.ws.rs.client.model.yml
      index: 0
      firstRowId: 46186
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.ws.rs.container.model.yml
      index: 0
      firstRowId: 46187
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.ws.rs.core.model.yml
      index: 0
      firstRowId: 46196
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.ws.rs.core.model.yml
      index: 1
      firstRowId: 46199
      rowCount: 149
      locations:
        lineNumbers: A=13+1*17+4+1*35+2+1*2+4+1*91
        columnNumbers: A=9*149
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.xml.bind.attachment.model.yml
      index: 0
      firstRowId: 46348
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.xml.transform.model.yml
      index: 0
      firstRowId: 46350
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.xml.transform.sax.model.yml
      index: 0
      firstRowId: 46351
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.xml.transform.stream.model.yml
      index: 0
      firstRowId: 46355
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.xml.transform.stream.model.yml
      index: 1
      firstRowId: 46357
      rowCount: 1
      locations:
        lineNumbers: A=12
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/javax.xml.xpath.model.yml
      index: 0
      firstRowId: 46358
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/jodd.json.model.yml
      index: 0
      firstRowId: 46361
      rowCount: 10
      locations:
        lineNumbers: A=12+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/kotlin.collections.model.yml
      index: 0
      firstRowId: 46371
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/kotlin.io.model.yml
      index: 0
      firstRowId: 46372
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/kotlin.io.model.yml
      index: 1
      firstRowId: 46376
      rowCount: 10
      locations:
        lineNumbers: A=14+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/kotlin.jvm.internal.model.yml
      index: 0
      firstRowId: 46386
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/kotlin.model.yml
      index: 0
      firstRowId: 46387
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/liquibase.database.jvm.model.yml
      index: 0
      firstRowId: 46391
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/liquibase.statement.core.model.yml
      index: 0
      firstRowId: 46392
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/net.lingala.zip4j.model.yml
      index: 0
      firstRowId: 46393
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/net.schmizz.sshj.model.yml
      index: 0
      firstRowId: 46395
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/net.sf.saxon.s9api.model.yml
      index: 0
      firstRowId: 46399
      rowCount: 5
      locations:
        lineNumbers: A=6+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/ognl.enhance.model.yml
      index: 0
      firstRowId: 46404
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/ognl.model.yml
      index: 0
      firstRowId: 46406
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/okhttp3.model.yml
      index: 0
      firstRowId: 46410
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/okhttp3.model.yml
      index: 1
      firstRowId: 46414
      rowCount: 50
      locations:
        lineNumbers: A=14+1*49
        columnNumbers: A=9*50
     -
      pack: codeql/java-all#1
      relativePath: ext/org.antlr.runtime.model.yml
      index: 0
      firstRowId: 46464
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.codec.model.yml
      index: 0
      firstRowId: 46465
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.bag.model.yml
      index: 0
      firstRowId: 46471
      rowCount: 18
      locations:
        lineNumbers: A=7+1*17
        columnNumbers: A=9*18
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.bidimap.model.yml
      index: 0
      firstRowId: 46489
      rowCount: 32
      locations:
        lineNumbers: A=6+1*31
        columnNumbers: A=9*32
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.collection.model.yml
      index: 0
      firstRowId: 46521
      rowCount: 40
      locations:
        lineNumbers: A=7+1*39
        columnNumbers: A=9*40
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.iterators.model.yml
      index: 0
      firstRowId: 46561
      rowCount: 75
      locations:
        lineNumbers: A=7+1*74
        columnNumbers: A=9*75
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.keyvalue.model.yml
      index: 0
      firstRowId: 46636
      rowCount: 52
      locations:
        lineNumbers: A=9+1*51
        columnNumbers: A=9*52
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.list.model.yml
      index: 0
      firstRowId: 46688
      rowCount: 22
      locations:
        lineNumbers: A=7+1*21
        columnNumbers: A=9*22
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.map.model.yml
      index: 0
      firstRowId: 46710
      rowCount: 128
      locations:
        lineNumbers: A=7+1*127
        columnNumbers: A=9*128
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.model.yml
      index: 0
      firstRowId: 46838
      rowCount: 360
      locations:
        lineNumbers: A=13+1*56+2+1*130+2+1*16+2+1*3+3+1*150
        columnNumbers: A=9*360
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.multimap.model.yml
      index: 0
      firstRowId: 47198
      rowCount: 12
      locations:
        lineNumbers: A=7+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.multiset.model.yml
      index: 0
      firstRowId: 47210
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.properties.model.yml
      index: 0
      firstRowId: 47214
      rowCount: 8
      locations:
        lineNumbers: A=6+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.queue.model.yml
      index: 0
      firstRowId: 47222
      rowCount: 6
      locations:
        lineNumbers: A=7+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.set.model.yml
      index: 0
      firstRowId: 47228
      rowCount: 31
      locations:
        lineNumbers: A=7+1*30
        columnNumbers: A=9*31
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.splitmap.model.yml
      index: 0
      firstRowId: 47259
      rowCount: 4
      locations:
        lineNumbers: A=7+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections.trie.model.yml
      index: 0
      firstRowId: 47263
      rowCount: 8
      locations:
        lineNumbers: A=7+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.bag.model.yml
      index: 0
      firstRowId: 47271
      rowCount: 18
      locations:
        lineNumbers: A=7+1*17
        columnNumbers: A=9*18
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.bidimap.model.yml
      index: 0
      firstRowId: 47289
      rowCount: 32
      locations:
        lineNumbers: A=6+1*31
        columnNumbers: A=9*32
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.collection.model.yml
      index: 0
      firstRowId: 47321
      rowCount: 40
      locations:
        lineNumbers: A=7+1*39
        columnNumbers: A=9*40
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.iterators.model.yml
      index: 0
      firstRowId: 47361
      rowCount: 75
      locations:
        lineNumbers: A=7+1*74
        columnNumbers: A=9*75
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.keyvalue.model.yml
      index: 0
      firstRowId: 47436
      rowCount: 52
      locations:
        lineNumbers: A=9+1*51
        columnNumbers: A=9*52
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.list.model.yml
      index: 0
      firstRowId: 47488
      rowCount: 22
      locations:
        lineNumbers: A=7+1*21
        columnNumbers: A=9*22
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.map.model.yml
      index: 0
      firstRowId: 47510
      rowCount: 128
      locations:
        lineNumbers: A=7+1*127
        columnNumbers: A=9*128
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.model.yml
      index: 0
      firstRowId: 47638
      rowCount: 360
      locations:
        lineNumbers: A=13+1*56+2+1*130+2+1*16+2+1*3+3+1*150
        columnNumbers: A=9*360
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.multimap.model.yml
      index: 0
      firstRowId: 47998
      rowCount: 12
      locations:
        lineNumbers: A=7+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.multiset.model.yml
      index: 0
      firstRowId: 48010
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.properties.model.yml
      index: 0
      firstRowId: 48014
      rowCount: 8
      locations:
        lineNumbers: A=6+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.queue.model.yml
      index: 0
      firstRowId: 48022
      rowCount: 6
      locations:
        lineNumbers: A=7+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.set.model.yml
      index: 0
      firstRowId: 48028
      rowCount: 31
      locations:
        lineNumbers: A=7+1*30
        columnNumbers: A=9*31
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.splitmap.model.yml
      index: 0
      firstRowId: 48059
      rowCount: 4
      locations:
        lineNumbers: A=7+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.collections4.trie.model.yml
      index: 0
      firstRowId: 48063
      rowCount: 8
      locations:
        lineNumbers: A=7+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.compress.archivers.tar.model.yml
      index: 0
      firstRowId: 48071
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.exec.environment.model.yml
      index: 0
      firstRowId: 48075
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.exec.launcher.model.yml
      index: 0
      firstRowId: 48076
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.exec.model.yml
      index: 0
      firstRowId: 48077
      rowCount: 8
      locations:
        lineNumbers: A=6+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.httpclient.util.model.yml
      index: 0
      firstRowId: 48085
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.io.model.yml
      index: 0
      firstRowId: 48086
      rowCount: 15
      locations:
        lineNumbers: A=6+1+5+1*12
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.io.model.yml
      index: 1
      firstRowId: 48101
      rowCount: 18
      locations:
        lineNumbers: A=29+1*17
        columnNumbers: A=9*18
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.jelly.model.yml
      index: 0
      firstRowId: 48119
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.jexl2.model.yml
      index: 0
      firstRowId: 48125
      rowCount: 15
      locations:
        lineNumbers: A=6+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.jexl3.model.yml
      index: 0
      firstRowId: 48140
      rowCount: 15
      locations:
        lineNumbers: A=6+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.lang.model.yml
      index: 0
      firstRowId: 48155
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.lang.model.yml
      index: 1
      firstRowId: 48157
      rowCount: 1
      locations:
        lineNumbers: A=12
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.lang3.builder.model.yml
      index: 0
      firstRowId: 48158
      rowCount: 18
      locations:
        lineNumbers: A=6+1*17
        columnNumbers: A=9*18
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.lang3.model.yml
      index: 0
      firstRowId: 48176
      rowCount: 7
      locations:
        lineNumbers: A=6+4+1*5
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.lang3.model.yml
      index: 1
      firstRowId: 48183
      rowCount: 202
      locations:
        lineNumbers: A=20+1*201
        columnNumbers: A=9*202
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.lang3.mutable.model.yml
      index: 0
      firstRowId: 48385
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.lang3.text.model.yml
      index: 0
      firstRowId: 48388
      rowCount: 155
      locations:
        lineNumbers: A=6+1*154
        columnNumbers: A=9*155
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.lang3.tuple.model.yml
      index: 0
      firstRowId: 48543
      rowCount: 47
      locations:
        lineNumbers: A=6+1*46
        columnNumbers: A=9*47
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.logging.model.yml
      index: 0
      firstRowId: 48590
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.net.ftp.model.yml
      index: 0
      firstRowId: 48596
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.net.model.yml
      index: 0
      firstRowId: 48600
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.net.model.yml
      index: 1
      firstRowId: 48609
      rowCount: 12
      locations:
        lineNumbers: A=19+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.ognl.enhance.model.yml
      index: 0
      firstRowId: 48621
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.ognl.model.yml
      index: 0
      firstRowId: 48623
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.text.lookup.model.yml
      index: 0
      firstRowId: 48627
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.commons.text.model.yml
      index: 0
      firstRowId: 48629
      rowCount: 270
      locations:
        lineNumbers: A=6+1*269
        columnNumbers: A=9*270
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.cxf.catalog.model.yml
      index: 0
      firstRowId: 48899
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.cxf.common.classloader.model.yml
      index: 0
      firstRowId: 48900
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.cxf.common.jaxb.model.yml
      index: 0
      firstRowId: 48903
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.cxf.common.logging.model.yml
      index: 0
      firstRowId: 48904
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.cxf.configuration.jsse.model.yml
      index: 0
      firstRowId: 48910
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.cxf.feature.transform.model.yml
      index: 0
      firstRowId: 48912
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.cxf.helpers.model.yml
      index: 0
      firstRowId: 48915
      rowCount: 10
      locations:
        lineNumbers: A=6+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.cxf.resource.model.yml
      index: 0
      firstRowId: 48925
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.cxf.staxutils.model.yml
      index: 0
      firstRowId: 48934
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.cxf.tools.corba.utils.model.yml
      index: 0
      firstRowId: 48935
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.cxf.tools.util.model.yml
      index: 0
      firstRowId: 48939
      rowCount: 10
      locations:
        lineNumbers: A=6+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.directory.ldap.client.api.model.yml
      index: 0
      firstRowId: 48949
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hadoop.fs.model.yml
      index: 0
      firstRowId: 48950
      rowCount: 11
      locations:
        lineNumbers: A=6+1*10
        columnNumbers: A=9*11
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hadoop.fs.model.yml
      index: 1
      firstRowId: 48961
      rowCount: 2
      locations:
        lineNumbers: A=21+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hadoop.fs.s3a.model.yml
      index: 0
      firstRowId: 48963
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hadoop.hive.metastore.api.model.yml
      index: 0
      firstRowId: 48964
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hadoop.hive.metastore.model.yml
      index: 0
      firstRowId: 48965
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hadoop.hive.ql.exec.model.yml
      index: 0
      firstRowId: 48967
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hadoop.hive.ql.exec.model.yml
      index: 1
      firstRowId: 48968
      rowCount: 1
      locations:
        lineNumbers: A=11
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hadoop.hive.ql.metadata.model.yml
      index: 0
      firstRowId: 48969
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.client5.http.async.methods.model.yml
      index: 0
      firstRowId: 48970
      rowCount: 84
      locations:
        lineNumbers: A=6+1*83
        columnNumbers: A=9*84
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.client5.http.classic.methods.model.yml
      index: 0
      firstRowId: 49054
      rowCount: 37
      locations:
        lineNumbers: A=6+1*36
        columnNumbers: A=9*37
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.client5.http.fluent.model.yml
      index: 0
      firstRowId: 49091
      rowCount: 19
      locations:
        lineNumbers: A=6+1*18
        columnNumbers: A=9*19
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.client5.http.protocol.model.yml
      index: 0
      firstRowId: 49110
      rowCount: 1
      locations:
        lineNumbers: A=7
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.benchmark.model.yml
      index: 0
      firstRowId: 49111
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.function.model.yml
      index: 0
      firstRowId: 49112
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.http.impl.bootstrap.model.yml
      index: 0
      firstRowId: 49113
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.http.io.entity.model.yml
      index: 0
      firstRowId: 49115
      rowCount: 14
      locations:
        lineNumbers: A=6+1*13
        columnNumbers: A=9*14
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.http.io.model.yml
      index: 0
      firstRowId: 49129
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.http.io.support.model.yml
      index: 0
      firstRowId: 49131
      rowCount: 16
      locations:
        lineNumbers: A=6+1*15
        columnNumbers: A=9*16
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.http.message.model.yml
      index: 0
      firstRowId: 49147
      rowCount: 8
      locations:
        lineNumbers: A=6+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.http.message.model.yml
      index: 1
      firstRowId: 49155
      rowCount: 5
      locations:
        lineNumbers: A=19+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.http.model.yml
      index: 0
      firstRowId: 49160
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.http.model.yml
      index: 1
      firstRowId: 49164
      rowCount: 26
      locations:
        lineNumbers: A=14+1*25
        columnNumbers: A=9*26
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.http.nio.support.model.yml
      index: 0
      firstRowId: 49190
      rowCount: 24
      locations:
        lineNumbers: A=6+1*23
        columnNumbers: A=9*24
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.http.support.model.yml
      index: 0
      firstRowId: 49214
      rowCount: 19
      locations:
        lineNumbers: A=6+1*18
        columnNumbers: A=9*19
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.net.model.yml
      index: 0
      firstRowId: 49233
      rowCount: 18
      locations:
        lineNumbers: A=6+1*17
        columnNumbers: A=9*18
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hc.core5.util.model.yml
      index: 0
      firstRowId: 49251
      rowCount: 24
      locations:
        lineNumbers: A=6+1*23
        columnNumbers: A=9*24
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.hive.hcatalog.templeton.model.yml
      index: 0
      firstRowId: 49275
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.client.fluent.model.yml
      index: 0
      firstRowId: 49276
      rowCount: 16
      locations:
        lineNumbers: A=6+1*15
        columnNumbers: A=9*16
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.client.methods.model.yml
      index: 0
      firstRowId: 49292
      rowCount: 19
      locations:
        lineNumbers: A=6+1*18
        columnNumbers: A=9*19
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.client.model.yml
      index: 0
      firstRowId: 49311
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.client.utils.model.yml
      index: 0
      firstRowId: 49314
      rowCount: 20
      locations:
        lineNumbers: A=6+1*19
        columnNumbers: A=9*20
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.entity.model.yml
      index: 0
      firstRowId: 49334
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.impl.client.model.yml
      index: 0
      firstRowId: 49340
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.message.model.yml
      index: 0
      firstRowId: 49341
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.message.model.yml
      index: 1
      firstRowId: 49347
      rowCount: 1
      locations:
        lineNumbers: A=16
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.model.yml
      index: 0
      firstRowId: 49348
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.model.yml
      index: 1
      firstRowId: 49350
      rowCount: 2
      locations:
        lineNumbers: A=12+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.model.yml
      index: 2
      firstRowId: 49352
      rowCount: 30
      locations:
        lineNumbers: A=18+1*29
        columnNumbers: A=9*30
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.params.model.yml
      index: 0
      firstRowId: 49382
      rowCount: 7
      locations:
        lineNumbers: A=6+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.protocol.model.yml
      index: 0
      firstRowId: 49389
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.util.model.yml
      index: 0
      firstRowId: 49390
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.http.util.model.yml
      index: 1
      firstRowId: 49391
      rowCount: 31
      locations:
        lineNumbers: A=11+1*30
        columnNumbers: A=9*31
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.ibatis.jdbc.model.yml
      index: 0
      firstRowId: 49422
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.ibatis.jdbc.model.yml
      index: 1
      firstRowId: 49428
      rowCount: 57
      locations:
        lineNumbers: A=16+1*56
        columnNumbers: A=9*57
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.ibatis.mapping.model.yml
      index: 0
      firstRowId: 49485
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.log4j.model.yml
      index: 0
      firstRowId: 49486
      rowCount: 11
      locations:
        lineNumbers: A=6+1*10
        columnNumbers: A=9*11
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.logging.log4j.model.yml
      index: 0
      firstRowId: 49497
      rowCount: 359
      locations:
        lineNumbers: A=6+1*358
        columnNumbers: A=9*359
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.logging.log4j.model.yml
      index: 1
      firstRowId: 49856
      rowCount: 8
      locations:
        lineNumbers: A=369+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.shiro.authc.model.yml
      index: 0
      firstRowId: 49864
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.shiro.codec.model.yml
      index: 0
      firstRowId: 49865
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.shiro.jndi.model.yml
      index: 0
      firstRowId: 49866
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.shiro.mgt.model.yml
      index: 0
      firstRowId: 49867
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.sshd.client.session.model.yml
      index: 0
      firstRowId: 49868
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.struts2.dispatcher.model.yml
      index: 0
      firstRowId: 49871
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=7
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.struts2.interceptor.model.yml
      index: 0
      firstRowId: 49872
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=7*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.tools.ant.model.yml
      index: 0
      firstRowId: 49874
      rowCount: 5
      locations:
        lineNumbers: A=6+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.tools.ant.taskdefs.model.yml
      index: 0
      firstRowId: 49879
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.tools.zip.model.yml
      index: 0
      firstRowId: 49888
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.velocity.app.model.yml
      index: 0
      firstRowId: 49889
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.velocity.runtime.model.yml
      index: 0
      firstRowId: 49893
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.apache.velocity.runtime.resource.util.model.yml
      index: 0
      firstRowId: 49896
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.codehaus.cargo.container.installer.model.yml
      index: 0
      firstRowId: 49897
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.codehaus.groovy.control.model.yml
      index: 0
      firstRowId: 49900
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.dom4j.model.yml
      index: 0
      firstRowId: 49901
      rowCount: 15
      locations:
        lineNumbers: A=6+1*14
        columnNumbers: A=9*15
     -
      pack: codeql/java-all#1
      relativePath: ext/org.dom4j.tree.model.yml
      index: 0
      firstRowId: 49916
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.dom4j.util.model.yml
      index: 0
      firstRowId: 49918
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.eclipse.jetty.client.model.yml
      index: 0
      firstRowId: 49921
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.exolab.castor.xml.model.yml
      index: 0
      firstRowId: 49923
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.fusesource.leveldbjni.model.yml
      index: 0
      firstRowId: 49924
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.geogebra.web.full.main.model.yml
      index: 0
      firstRowId: 49925
      rowCount: 1
      locations:
        lineNumbers: A=7
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.gradle.api.file.model.yml
      index: 0
      firstRowId: 49926
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.hibernate.model.yml
      index: 0
      firstRowId: 49929
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.hibernate.query.model.yml
      index: 0
      firstRowId: 49933
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.ho.yaml.model.yml
      index: 0
      firstRowId: 49936
      rowCount: 8
      locations:
        lineNumbers: A=6+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/org.influxdb.model.yml
      index: 0
      firstRowId: 49944
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.jabsorb.model.yml
      index: 0
      firstRowId: 49945
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.jboss.logging.model.yml
      index: 0
      firstRowId: 49946
      rowCount: 324
      locations:
        lineNumbers: A=6+1*323
        columnNumbers: A=9*324
     -
      pack: codeql/java-all#1
      relativePath: ext/org.jboss.vfs.model.yml
      index: 0
      firstRowId: 50270
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.jdbi.v3.core.model.yml
      index: 0
      firstRowId: 50271
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.jooq.model.yml
      index: 0
      firstRowId: 50277
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.json.model.yml
      index: 0
      firstRowId: 50278
      rowCount: 236
      locations:
        lineNumbers: A=6+1*235
        columnNumbers: A=9*236
     -
      pack: codeql/java-all#1
      relativePath: ext/org.keycloak.models.map.storage.model.yml
      index: 0
      firstRowId: 50514
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.kohsuke.stapler.bind.model.yml
      index: 0
      firstRowId: 50515
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.kohsuke.stapler.framework.adjunct.model.yml
      index: 0
      firstRowId: 50516
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.kohsuke.stapler.framework.io.model.yml
      index: 0
      firstRowId: 50517
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.kohsuke.stapler.json.model.yml
      index: 0
      firstRowId: 50518
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.kohsuke.stapler.model.yml
      index: 0
      firstRowId: 50520
      rowCount: 19
      locations:
        lineNumbers: A=6+1*18
        columnNumbers: A=9*19
     -
      pack: codeql/java-all#1
      relativePath: ext/org.kohsuke.stapler.model.yml
      index: 1
      firstRowId: 50539
      rowCount: 21
      locations:
        lineNumbers: A=29+1*20
        columnNumbers: A=9*21
     -
      pack: codeql/java-all#1
      relativePath: ext/org.lastaflute.web.model.yml
      index: 0
      firstRowId: 50560
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.lastaflute.web.ruts.multipart.model.yml
      index: 0
      firstRowId: 50561
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.mvel2.compiler.model.yml
      index: 0
      firstRowId: 50565
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.mvel2.jsr223.model.yml
      index: 0
      firstRowId: 50569
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.mvel2.model.yml
      index: 0
      firstRowId: 50572
      rowCount: 7
      locations:
        lineNumbers: A=6+1*6
        columnNumbers: A=9*7
     -
      pack: codeql/java-all#1
      relativePath: ext/org.mvel2.templates.model.yml
      index: 0
      firstRowId: 50579
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.openjdk.jmh.runner.options.model.yml
      index: 0
      firstRowId: 50581
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.owasp.esapi.model.yml
      index: 0
      firstRowId: 50582
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.pac4j.jwt.config.encryption.model.yml
      index: 0
      firstRowId: 50583
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.pac4j.jwt.config.signature.model.yml
      index: 0
      firstRowId: 50587
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.scijava.log.model.yml
      index: 0
      firstRowId: 50591
      rowCount: 13
      locations:
        lineNumbers: A=6+1*12
        columnNumbers: A=9*13
     -
      pack: codeql/java-all#1
      relativePath: ext/org.slf4j.model.yml
      index: 0
      firstRowId: 50604
      rowCount: 50
      locations:
        lineNumbers: A=6+1*49
        columnNumbers: A=9*50
     -
      pack: codeql/java-all#1
      relativePath: ext/org.slf4j.spi.model.yml
      index: 0
      firstRowId: 50654
      rowCount: 5
      locations:
        lineNumbers: A=6+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/org.slf4j.spi.model.yml
      index: 1
      firstRowId: 50659
      rowCount: 6
      locations:
        lineNumbers: A=15+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.beans.model.yml
      index: 0
      firstRowId: 50665
      rowCount: 30
      locations:
        lineNumbers: A=6+1*29
        columnNumbers: A=9*30
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.boot.jdbc.model.yml
      index: 0
      firstRowId: 50695
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.cache.model.yml
      index: 0
      firstRowId: 50696
      rowCount: 13
      locations:
        lineNumbers: A=6+1*12
        columnNumbers: A=9*13
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.context.model.yml
      index: 0
      firstRowId: 50709
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.core.io.model.yml
      index: 0
      firstRowId: 50712
      rowCount: 24
      locations:
        lineNumbers: A=6+1*23
        columnNumbers: A=9*24
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.core.io.model.yml
      index: 1
      firstRowId: 50736
      rowCount: 6
      locations:
        lineNumbers: A=35+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.data.repository.model.yml
      index: 0
      firstRowId: 50742
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.http.model.yml
      index: 0
      firstRowId: 50743
      rowCount: 14
      locations:
        lineNumbers: A=6+1*13
        columnNumbers: A=9*14
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.http.model.yml
      index: 1
      firstRowId: 50757
      rowCount: 77
      locations:
        lineNumbers: A=24+1*76
        columnNumbers: A=9*77
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.jdbc.core.model.yml
      index: 0
      firstRowId: 50834
      rowCount: 10
      locations:
        lineNumbers: A=6+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.jdbc.core.namedparam.model.yml
      index: 0
      firstRowId: 50844
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.jdbc.datasource.model.yml
      index: 0
      firstRowId: 50853
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.jdbc.object.model.yml
      index: 0
      firstRowId: 50857
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.jndi.model.yml
      index: 0
      firstRowId: 50866
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.ldap.core.model.yml
      index: 0
      firstRowId: 50867
      rowCount: 33
      locations:
        lineNumbers: A=6+1*32
        columnNumbers: A=9*33
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.ldap.model.yml
      index: 0
      firstRowId: 50900
      rowCount: 14
      locations:
        lineNumbers: A=6+1*13
        columnNumbers: A=9*14
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.security.core.userdetails.model.yml
      index: 0
      firstRowId: 50914
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.security.web.savedrequest.model.yml
      index: 0
      firstRowId: 50916
      rowCount: 6
      locations:
        lineNumbers: A=6+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.ui.model.yml
      index: 0
      firstRowId: 50922
      rowCount: 32
      locations:
        lineNumbers: A=6+1*31
        columnNumbers: A=9*32
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.util.model.yml
      index: 0
      firstRowId: 50954
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=7*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.util.model.yml
      index: 1
      firstRowId: 50957
      rowCount: 142
      locations:
        lineNumbers: A=14+1*141
        columnNumbers: A=9*142
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.validation.model.yml
      index: 0
      firstRowId: 51099
      rowCount: 13
      locations:
        lineNumbers: A=6+1*12
        columnNumbers: A=9*13
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.web.client.model.yml
      index: 0
      firstRowId: 51112
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.web.client.model.yml
      index: 1
      firstRowId: 51115
      rowCount: 13
      locations:
        lineNumbers: A=13+1*12
        columnNumbers: A=9*13
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.web.context.request.model.yml
      index: 0
      firstRowId: 51128
      rowCount: 8
      locations:
        lineNumbers: A=6+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.web.multipart.model.yml
      index: 0
      firstRowId: 51136
      rowCount: 12
      locations:
        lineNumbers: A=6+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.web.multipart.model.yml
      index: 1
      firstRowId: 51148
      rowCount: 12
      locations:
        lineNumbers: A=22+1*11
        columnNumbers: A=9*12
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.web.portlet.model.yml
      index: 0
      firstRowId: 51160
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.web.reactive.function.client.model.yml
      index: 0
      firstRowId: 51162
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.web.servlet.model.yml
      index: 0
      firstRowId: 51164
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.web.util.model.yml
      index: 0
      firstRowId: 51166
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.springframework.web.util.model.yml
      index: 1
      firstRowId: 51175
      rowCount: 157
      locations:
        lineNumbers: A=20+1*2+2+1*153
        columnNumbers: A=9*157
     -
      pack: codeql/java-all#1
      relativePath: ext/org.thymeleaf.model.yml
      index: 0
      firstRowId: 51332
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.thymeleaf.model.yml
      index: 1
      firstRowId: 51334
      rowCount: 2
      locations:
        lineNumbers: A=12+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/org.xml.sax.model.yml
      index: 0
      firstRowId: 51336
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/org.xmlpull.v1.model.yml
      index: 0
      firstRowId: 51337
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/org.yaml.snakeyaml.model.yml
      index: 0
      firstRowId: 51340
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/play.libs.ws.model.yml
      index: 0
      firstRowId: 51341
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/play.mvc.model.yml
      index: 0
      firstRowId: 51343
      rowCount: 13
      locations:
        lineNumbers: A=6+1*12
        columnNumbers: A=9*13
     -
      pack: codeql/java-all#1
      relativePath: ext/play.mvc.model.yml
      index: 1
      firstRowId: 51356
      rowCount: 1
      locations:
        lineNumbers: A=23
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/play.mvc.model.yml
      index: 2
      firstRowId: 51357
      rowCount: 24
      locations:
        lineNumbers: A=28+1*23
        columnNumbers: A=9*24
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.core.form.model.yml
      index: 0
      firstRowId: 51381
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.core.handling.model.yml
      index: 0
      firstRowId: 51384
      rowCount: 6
      locations:
        lineNumbers: A=7+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.core.handling.model.yml
      index: 1
      firstRowId: 51390
      rowCount: 4
      locations:
        lineNumbers: A=17+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.core.http.model.yml
      index: 0
      firstRowId: 51394
      rowCount: 10
      locations:
        lineNumbers: A=6+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.core.http.model.yml
      index: 1
      firstRowId: 51404
      rowCount: 10
      locations:
        lineNumbers: A=20+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.exec.model.yml
      index: 0
      firstRowId: 51414
      rowCount: 48
      locations:
        lineNumbers: A=6+1*47
        columnNumbers: A=9*48
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.form.model.yml
      index: 0
      firstRowId: 51462
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.func.model.yml
      index: 0
      firstRowId: 51465
      rowCount: 35
      locations:
        lineNumbers: A=6+1*9+2+1+2+1*5+2+1*2+2+1*13
        columnNumbers: A=9*35
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.handling.model.yml
      index: 0
      firstRowId: 51500
      rowCount: 6
      locations:
        lineNumbers: A=7+1*5
        columnNumbers: A=9*6
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.handling.model.yml
      index: 1
      firstRowId: 51506
      rowCount: 4
      locations:
        lineNumbers: A=17+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.http.model.yml
      index: 0
      firstRowId: 51510
      rowCount: 10
      locations:
        lineNumbers: A=6+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.http.model.yml
      index: 1
      firstRowId: 51520
      rowCount: 10
      locations:
        lineNumbers: A=20+1*9
        columnNumbers: A=9*10
     -
      pack: codeql/java-all#1
      relativePath: ext/ratpack.util.model.yml
      index: 0
      firstRowId: 51530
      rowCount: 35
      locations:
        lineNumbers: A=6+1*9+2+1+2+1*5+2+1*2+2+1*13
        columnNumbers: A=9*35
     -
      pack: codeql/java-all#1
      relativePath: ext/retrofit2.model.yml
      index: 0
      firstRowId: 51565
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/retrofit2.model.yml
      index: 1
      firstRowId: 51566
      rowCount: 1
      locations:
        lineNumbers: A=11
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/software.amazon.awssdk.transfer.s3.model.model.yml
      index: 0
      firstRowId: 51567
      rowCount: 8
      locations:
        lineNumbers: A=6+1*7
        columnNumbers: A=9*8
     -
      pack: codeql/java-all#1
      relativePath: ext/struts2.model.yml
      index: 0
      firstRowId: 51575
      rowCount: 64
      locations:
        lineNumbers: A=6+1*63
        columnNumbers: A=9*64
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.jvmstat.perfdata.monitor.protocol.local.model.yml
      index: 0
      firstRowId: 51639
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.jvmstat.perfdata.monitor.protocol.rmi.model.yml
      index: 0
      firstRowId: 51642
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.misc.model.yml
      index: 0
      firstRowId: 51643
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.net.ftp.model.yml
      index: 0
      firstRowId: 51646
      rowCount: 5
      locations:
        lineNumbers: A=6+1*4
        columnNumbers: A=9*5
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.net.www.protocol.http.model.yml
      index: 0
      firstRowId: 51651
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.security.acl.model.yml
      index: 0
      firstRowId: 51654
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.security.jgss.krb5.model.yml
      index: 0
      firstRowId: 51655
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.security.krb5.model.yml
      index: 0
      firstRowId: 51657
      rowCount: 9
      locations:
        lineNumbers: A=6+1*8
        columnNumbers: A=9*9
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.security.pkcs.model.yml
      index: 0
      firstRowId: 51666
      rowCount: 4
      locations:
        lineNumbers: A=6+1*3
        columnNumbers: A=9*4
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.security.pkcs11.model.yml
      index: 0
      firstRowId: 51670
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.security.provider.model.yml
      index: 0
      firstRowId: 51673
      rowCount: 2
      locations:
        lineNumbers: A=6+1
        columnNumbers: A=9*2
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.security.ssl.model.yml
      index: 0
      firstRowId: 51675
      rowCount: 3
      locations:
        lineNumbers: A=6+1*2
        columnNumbers: A=9*3
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.security.x509.model.yml
      index: 0
      firstRowId: 51678
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/java-all#1
      relativePath: ext/sun.tools.jconsole.model.yml
      index: 0
      firstRowId: 51679
      rowCount: 28
      locations:
        lineNumbers: A=6+1*27
        columnNumbers: A=9*28
     -
      pack: codeql/threat-models#2
      relativePath: ext/supported-threat-models.model.yml
      index: 0
      firstRowId: 51707
      rowCount: 1
      locations:
        lineNumbers: A=6
        columnNumbers: A=9
     -
      pack: codeql/threat-models#2
      relativePath: ext/threat-model-grouping.model.yml
      index: 0
      firstRowId: 51708
      rowCount: 15
      locations:
        lineNumbers: A=8+3+1+3+1*5+3+1+5+1*3
        columnNumbers: A=9*15
